
FreeRTOS_VCU_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005244  08005244  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800524c  0800524c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049e0  20000010  08005264  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200049f0  08005264  000249f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001923d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d1  00000000  00000000  0003927b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  0003c350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011d0  00000000  00000000  0003d698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028f2b  00000000  00000000  0003e868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011098  00000000  00000000  00067793  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100d5f  00000000  00000000  0007882b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017958a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  00179608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	080051cc 	.word	0x080051cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	080051cc 	.word	0x080051cc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000546:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <MX_CAN1_Init+0x68>)
 8000548:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_CAN1_Init+0x64>)
 800054c:	2205      	movs	r2, #5
 800054e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_CAN1_Init+0x64>)
 800055e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000562:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000566:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800056a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <MX_CAN1_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000574:	2200      	movs	r2, #0
 8000576:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <MX_CAN1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CAN1_Init+0x64>)
 800058c:	2200      	movs	r2, #0
 800058e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_CAN1_Init+0x64>)
 8000592:	f000 fa8d 	bl	8000ab0 <HAL_CAN_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800059c:	f000 f972 	bl	8000884 <Error_Handler>
  }

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20004934 	.word	0x20004934
 80005a8:	40006400 	.word	0x40006400

080005ac <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <HAL_CAN_MspInit+0x8c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d12f      	bne.n	800062e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d8:	6413      	str	r3, [r2, #64]	; 0x40
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005ec:	f043 0308 	orr.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_CAN_MspInit+0x90>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0308 	and.w	r3, r3, #8
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005fe:	2303      	movs	r3, #3
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800060e:	2309      	movs	r3, #9
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_CAN_MspInit+0x94>)
 800061a:	f000 fe59 	bl	80012d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	2014      	movs	r0, #20
 8000624:	f000 fe2a 	bl	800127c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000628:	2014      	movs	r0, #20
 800062a:	f000 fe43 	bl	80012b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40006400 	.word	0x40006400
 800063c:	40023800 	.word	0x40023800
 8000640:	40020c00 	.word	0x40020c00

08000644 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
	...

08000654 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <MX_FREERTOS_Init+0x18>)
 800065a:	2100      	movs	r1, #0
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_FREERTOS_Init+0x1c>)
 800065e:	f002 f861 	bl	8002724 <osThreadNew>
 8000662:	4602      	mov	r2, r0
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <MX_FREERTOS_Init+0x20>)
 8000666:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	08005208 	.word	0x08005208
 8000670:	08000679 	.word	0x08000679
 8000674:	2000495c 	.word	0x2000495c

08000678 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f002 f8f5 	bl	8002870 <osDelay>
 8000686:	e7fb      	b.n	8000680 <StartDefaultTask+0x8>

08000688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a2d      	ldr	r2, [pc, #180]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a27      	ldr	r2, [pc, #156]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Okay_GPIO_Port, LED_Okay_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	4816      	ldr	r0, [pc, #88]	; (800075c <MX_GPIO_Init+0xd4>)
 8000704:	f000 ff8e 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Error_Pin|LED_SystemAlive_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <MX_GPIO_Init+0xd8>)
 8000710:	f000 ff88 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Okay_Pin;
 8000714:	2320      	movs	r3, #32
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Okay_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0xd4>)
 800072c:	f000 fdd0 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Error_Pin|LED_SystemAlive_Pin;
 8000730:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_GPIO_Init+0xd8>)
 800074a:	f000 fdc1 	bl	80012d0 <HAL_GPIO_Init>

}
 800074e:	bf00      	nop
 8000750:	3728      	adds	r7, #40	; 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 f975 	bl	8000a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f80c 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f7ff ff8a 	bl	8000688 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000774:	f7ff fee4 	bl	8000540 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000778:	f001 ff6a 	bl	8002650 <osKernelInitialize>
  MX_FREERTOS_Init();
 800077c:	f7ff ff6a 	bl	8000654 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000780:	f001 ff9a 	bl	80026b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000784:	e7fe      	b.n	8000784 <main+0x20>
	...

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2234      	movs	r2, #52	; 0x34
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fd0f 	bl	80051ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <SystemClock_Config+0xd0>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a29      	ldr	r2, [pc, #164]	; (8000858 <SystemClock_Config+0xd0>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <SystemClock_Config+0xd0>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a24      	ldr	r2, [pc, #144]	; (800085c <SystemClock_Config+0xd4>)
 80007ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007dc:	2301      	movs	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 80007f4:	23c8      	movs	r3, #200	; 0xc8
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4618      	mov	r0, r3
 8000806:	f000 ff77 	bl	80016f8 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000810:	f000 f838 	bl	8000884 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000814:	f000 ff20 	bl	8001658 <HAL_PWREx_EnableOverDrive>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800081e:	f000 f831 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2106      	movs	r1, #6
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fa07 	bl	8001c54 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800084c:	f000 f81a 	bl	8000884 <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3750      	adds	r7, #80	; 0x50
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d101      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000872:	f000 f8fd 	bl	8000a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010000 	.word	0x40010000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088a:	e7fe      	b.n	800088a <Error_Handler+0x6>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	210f      	movs	r1, #15
 80008c6:	f06f 0001 	mvn.w	r0, #1
 80008ca:	f000 fcd7 	bl	800127c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	2019      	movs	r0, #25
 80008f2:	f000 fcc3 	bl	800127c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008f6:	2019      	movs	r0, #25
 80008f8:	f000 fcdc 	bl	80012b4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <HAL_InitTick+0xa0>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	4a1e      	ldr	r2, [pc, #120]	; (800097c <HAL_InitTick+0xa0>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6453      	str	r3, [r2, #68]	; 0x44
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_InitTick+0xa0>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000914:	f107 0210 	add.w	r2, r7, #16
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fb7c 	bl	800201c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000924:	f001 fb66 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 8000928:	4603      	mov	r3, r0
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <HAL_InitTick+0xa4>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	3b01      	subs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_InitTick+0xa8>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <HAL_InitTick+0xac>)
 8000940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_InitTick+0xa8>)
 8000944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000948:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_InitTick+0xa8>)
 800094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_InitTick+0xa8>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_InitTick+0xa8>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <HAL_InitTick+0xa8>)
 800095e:	f001 fb8f 	bl	8002080 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d104      	bne.n	8000972 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <HAL_InitTick+0xa8>)
 800096a:	f001 fbeb 	bl	8002144 <HAL_TIM_Base_Start_IT>
 800096e:	4603      	mov	r3, r0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	431bde83 	.word	0x431bde83
 8000984:	20004960 	.word	0x20004960
 8000988:	40010000 	.word	0x40010000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <CAN1_RX0_IRQHandler+0x10>)
 80009be:	f000 f972 	bl	8000ca6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20004934 	.word	0x20004934

080009cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009d2:	f001 fc2f 	bl	8002234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20004960 	.word	0x20004960

080009e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f004 fb93 	bl	800515c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fe95 	bl	8000764 <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a48:	08005254 	.word	0x08005254
  ldr r2, =_sbss
 8000a4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a50:	200049f0 	.word	0x200049f0

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>

08000a56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f000 fc03 	bl	8001266 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ff3b 	bl	80008dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000a66:	f7ff ff11 	bl	800088c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008
 8000a94:	200049ac 	.word	0x200049ac

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200049ac 	.word	0x200049ac

08000ab0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e0ed      	b.n	8000c9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fd6c 	bl	80005ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0202 	bic.w	r2, r2, #2
 8000ae2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae4:	f7ff ffd8 	bl	8000a98 <HAL_GetTick>
 8000ae8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aea:	e012      	b.n	8000b12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aec:	f7ff ffd4 	bl	8000a98 <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b0a      	cmp	r3, #10
 8000af8:	d90b      	bls.n	8000b12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2205      	movs	r2, #5
 8000b0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e0c5      	b.n	8000c9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1e5      	bne.n	8000aec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0201 	orr.w	r2, r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b30:	f7ff ffb2 	bl	8000a98 <HAL_GetTick>
 8000b34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b36:	e012      	b.n	8000b5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b38:	f7ff ffae 	bl	8000a98 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b0a      	cmp	r3, #10
 8000b44:	d90b      	bls.n	8000b5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2205      	movs	r2, #5
 8000b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e09f      	b.n	8000c9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0e5      	beq.n	8000b38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7e1b      	ldrb	r3, [r3, #24]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e007      	b.n	8000b96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7e5b      	ldrb	r3, [r3, #25]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d108      	bne.n	8000bb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e007      	b.n	8000bc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7e9b      	ldrb	r3, [r3, #26]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d108      	bne.n	8000bda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f042 0220 	orr.w	r2, r2, #32
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	e007      	b.n	8000bea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0220 	bic.w	r2, r2, #32
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7edb      	ldrb	r3, [r3, #27]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d108      	bne.n	8000c04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0210 	bic.w	r2, r2, #16
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	e007      	b.n	8000c14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0210 	orr.w	r2, r2, #16
 8000c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7f1b      	ldrb	r3, [r3, #28]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d108      	bne.n	8000c2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0208 	orr.w	r2, r2, #8
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	e007      	b.n	8000c3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0208 	bic.w	r2, r2, #8
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7f5b      	ldrb	r3, [r3, #29]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d108      	bne.n	8000c58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f042 0204 	orr.w	r2, r2, #4
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e007      	b.n	8000c68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0204 	bic.w	r2, r2, #4
 8000c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	431a      	orrs	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	ea42 0103 	orr.w	r1, r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b08a      	sub	sp, #40	; 0x28
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	691b      	ldr	r3, [r3, #16]
 8000cd8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d07c      	beq.n	8000de6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d023      	beq.n	8000d3e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 f97d 	bl	8001008 <HAL_CAN_TxMailbox0CompleteCallback>
 8000d0e:	e016      	b.n	8000d3e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d004      	beq.n	8000d24 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
 8000d22:	e00c      	b.n	8000d3e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d004      	beq.n	8000d38 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
 8000d36:	e002      	b.n	8000d3e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 f983 	bl	8001044 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d024      	beq.n	8000d92 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f95d 	bl	800101c <HAL_CAN_TxMailbox1CompleteCallback>
 8000d62:	e016      	b.n	8000d92 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d004      	beq.n	8000d78 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
 8000d76:	e00c      	b.n	8000d92 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d004      	beq.n	8000d8c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8a:	e002      	b.n	8000d92 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f963 	bl	8001058 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d024      	beq.n	8000de6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000da4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f93d 	bl	8001030 <HAL_CAN_TxMailbox2CompleteCallback>
 8000db6:	e016      	b.n	8000de6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dca:	e00c      	b.n	8000de6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d004      	beq.n	8000de0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dde:	e002      	b.n	8000de6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f943 	bl	800106c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000de6:	6a3b      	ldr	r3, [r7, #32]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00c      	beq.n	8000e0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2210      	movs	r2, #16
 8000e08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00b      	beq.n	8000e2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d006      	beq.n	8000e2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2208      	movs	r2, #8
 8000e24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f934 	bl	8001094 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d009      	beq.n	8000e4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f91b 	bl	8001080 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
 8000e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00c      	beq.n	8000e6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d007      	beq.n	8000e6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00b      	beq.n	8000e90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2208      	movs	r2, #8
 8000e88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f916 	bl	80010bc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d009      	beq.n	8000eae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f8fd 	bl	80010a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000eae:	6a3b      	ldr	r3, [r7, #32]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00b      	beq.n	8000ed0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2210      	movs	r2, #16
 8000ec8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f900 	bl	80010d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2208      	movs	r2, #8
 8000eea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 f8f9 	bl	80010e4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d075      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d06c      	beq.n	8000fe0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d008      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d008      	beq.n	8000f3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d008      	beq.n	8000f5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d03d      	beq.n	8000fe0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d038      	beq.n	8000fe0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000f74:	2b30      	cmp	r3, #48	; 0x30
 8000f76:	d017      	beq.n	8000fa8 <HAL_CAN_IRQHandler+0x302>
 8000f78:	2b30      	cmp	r3, #48	; 0x30
 8000f7a:	d804      	bhi.n	8000f86 <HAL_CAN_IRQHandler+0x2e0>
 8000f7c:	2b10      	cmp	r3, #16
 8000f7e:	d009      	beq.n	8000f94 <HAL_CAN_IRQHandler+0x2ee>
 8000f80:	2b20      	cmp	r3, #32
 8000f82:	d00c      	beq.n	8000f9e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000f84:	e024      	b.n	8000fd0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000f86:	2b50      	cmp	r3, #80	; 0x50
 8000f88:	d018      	beq.n	8000fbc <HAL_CAN_IRQHandler+0x316>
 8000f8a:	2b60      	cmp	r3, #96	; 0x60
 8000f8c:	d01b      	beq.n	8000fc6 <HAL_CAN_IRQHandler+0x320>
 8000f8e:	2b40      	cmp	r3, #64	; 0x40
 8000f90:	d00f      	beq.n	8000fb2 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000f92:	e01d      	b.n	8000fd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	f043 0308 	orr.w	r3, r3, #8
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f9c:	e018      	b.n	8000fd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fa6:	e013      	b.n	8000fd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fb0:	e00e      	b.n	8000fd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fba:	e009      	b.n	8000fd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fc4:	e004      	b.n	8000fd0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000fce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	699a      	ldr	r2, [r3, #24]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fde:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d008      	beq.n	8001000 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f87c 	bl	80010f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	; 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	4313      	orrs	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	05fa0000 	.word	0x05fa0000

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff4c 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128e:	f7ff ff61 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	6978      	ldr	r0, [r7, #20]
 800129a:	f7ff ffb1 	bl	8001200 <NVIC_EncodePriority>
 800129e:	4602      	mov	r2, r0
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff80 	bl	80011ac <__NVIC_SetPriority>
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff54 	bl	8001170 <__NVIC_EnableIRQ>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e175      	b.n	80015dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8164 	bne.w	80015d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d00b      	beq.n	800132e <HAL_GPIO_Init+0x5e>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001322:	2b11      	cmp	r3, #17
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b12      	cmp	r3, #18
 800132c:	d130      	bne.n	8001390 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x100>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b12      	cmp	r3, #18
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80be 	beq.w	80015d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <HAL_GPIO_Init+0x320>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a64      	ldr	r2, [pc, #400]	; (80015f0 <HAL_GPIO_Init+0x320>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b62      	ldr	r3, [pc, #392]	; (80015f0 <HAL_GPIO_Init+0x320>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001472:	4a60      	ldr	r2, [pc, #384]	; (80015f4 <HAL_GPIO_Init+0x324>)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a57      	ldr	r2, [pc, #348]	; (80015f8 <HAL_GPIO_Init+0x328>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d037      	beq.n	800150e <HAL_GPIO_Init+0x23e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a56      	ldr	r2, [pc, #344]	; (80015fc <HAL_GPIO_Init+0x32c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d031      	beq.n	800150a <HAL_GPIO_Init+0x23a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a55      	ldr	r2, [pc, #340]	; (8001600 <HAL_GPIO_Init+0x330>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d02b      	beq.n	8001506 <HAL_GPIO_Init+0x236>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a54      	ldr	r2, [pc, #336]	; (8001604 <HAL_GPIO_Init+0x334>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d025      	beq.n	8001502 <HAL_GPIO_Init+0x232>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a53      	ldr	r2, [pc, #332]	; (8001608 <HAL_GPIO_Init+0x338>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_Init+0x22e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a52      	ldr	r2, [pc, #328]	; (800160c <HAL_GPIO_Init+0x33c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x22a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a51      	ldr	r2, [pc, #324]	; (8001610 <HAL_GPIO_Init+0x340>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a50      	ldr	r2, [pc, #320]	; (8001614 <HAL_GPIO_Init+0x344>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x222>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_GPIO_Init+0x348>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x21e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_GPIO_Init+0x34c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x21a>
 80014e6:	2309      	movs	r3, #9
 80014e8:	e012      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014ea:	230a      	movs	r3, #10
 80014ec:	e010      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014ee:	2308      	movs	r3, #8
 80014f0:	e00e      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00c      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00a      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e008      	b.n	8001510 <HAL_GPIO_Init+0x240>
 80014fe:	2304      	movs	r3, #4
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x240>
 8001502:	2303      	movs	r3, #3
 8001504:	e004      	b.n	8001510 <HAL_GPIO_Init+0x240>
 8001506:	2302      	movs	r3, #2
 8001508:	e002      	b.n	8001510 <HAL_GPIO_Init+0x240>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_GPIO_Init+0x240>
 800150e:	2300      	movs	r3, #0
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	f002 0203 	and.w	r2, r2, #3
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	4093      	lsls	r3, r2
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001520:	4934      	ldr	r1, [pc, #208]	; (80015f4 <HAL_GPIO_Init+0x324>)
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001552:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001558:	4b31      	ldr	r3, [pc, #196]	; (8001620 <HAL_GPIO_Init+0x350>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157c:	4a28      	ldr	r2, [pc, #160]	; (8001620 <HAL_GPIO_Init+0x350>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_GPIO_Init+0x350>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d0:	4a13      	ldr	r2, [pc, #76]	; (8001620 <HAL_GPIO_Init+0x350>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3301      	adds	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	f67f ae86 	bls.w	80012f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015e4:	bf00      	nop
 80015e6:	3724      	adds	r7, #36	; 0x24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40021400 	.word	0x40021400
 8001610:	40021800 	.word	0x40021800
 8001614:	40021c00 	.word	0x40021c00
 8001618:	40022000 	.word	0x40022000
 800161c:	40022400 	.word	0x40022400
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001686:	f7ff fa07 	bl	8000a98 <HAL_GetTick>
 800168a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800168c:	e009      	b.n	80016a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800168e:	f7ff fa03 	bl	8000a98 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169c:	d901      	bls.n	80016a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e022      	b.n	80016e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ae:	d1ee      	bne.n	800168e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016bc:	f7ff f9ec 	bl	8000a98 <HAL_GetTick>
 80016c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016c2:	e009      	b.n	80016d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016c4:	f7ff f9e8 	bl	8000a98 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016d2:	d901      	bls.n	80016d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e007      	b.n	80016e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016e4:	d1ee      	bne.n	80016c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40007000 	.word	0x40007000

080016f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e29b      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800171c:	4b96      	ldr	r3, [pc, #600]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	d00c      	beq.n	8001742 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001728:	4b93      	ldr	r3, [pc, #588]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d112      	bne.n	800175a <HAL_RCC_OscConfig+0x62>
 8001734:	4b90      	ldr	r3, [pc, #576]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b8d      	ldr	r3, [pc, #564]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d06c      	beq.n	8001828 <HAL_RCC_OscConfig+0x130>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d168      	bne.n	8001828 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e275      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x7a>
 8001764:	4b84      	ldr	r3, [pc, #528]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a83      	ldr	r2, [pc, #524]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e02e      	b.n	80017d0 <HAL_RCC_OscConfig+0xd8>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x9c>
 800177a:	4b7f      	ldr	r3, [pc, #508]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7e      	ldr	r2, [pc, #504]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7b      	ldr	r2, [pc, #492]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 800178c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xd8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0xc0>
 800179e:	4b76      	ldr	r3, [pc, #472]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a75      	ldr	r2, [pc, #468]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b73      	ldr	r3, [pc, #460]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a72      	ldr	r2, [pc, #456]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xd8>
 80017b8:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6e      	ldr	r2, [pc, #440]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b6c      	ldr	r3, [pc, #432]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6b      	ldr	r2, [pc, #428]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff f95e 	bl	8000a98 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff f95a 	bl	8000a98 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e229      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe8>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff f94a 	bl	8000a98 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff f946 	bl	8000a98 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e215      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b57      	ldr	r3, [pc, #348]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x110>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d069      	beq.n	800190a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x190>
 800184e:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x17a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1e9      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b41      	ldr	r3, [pc, #260]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	493d      	ldr	r1, [pc, #244]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e040      	b.n	800190a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d023      	beq.n	80018d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a38      	ldr	r2, [pc, #224]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff f8fc 	bl	8000a98 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff f8f8 	bl	8000a98 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1c7      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4929      	ldr	r1, [pc, #164]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
 80018d6:	e018      	b.n	800190a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff f8d8 	bl	8000a98 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff f8d4 	bl	8000a98 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1a3      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d038      	beq.n	8001988 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff f8b5 	bl	8000a98 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff f8b1 	bl	8000a98 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e180      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x23a>
 8001950:	e01a      	b.n	8001988 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_RCC_OscConfig+0x280>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff f89b 	bl	8000a98 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff f897 	bl	8000a98 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d903      	bls.n	800197c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e166      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
 8001978:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 800197e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a4 	beq.w	8001ade <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a88      	ldr	r2, [pc, #544]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019be:	4b83      	ldr	r3, [pc, #524]	; (8001bcc <HAL_RCC_OscConfig+0x4d4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019ca:	4b80      	ldr	r3, [pc, #512]	; (8001bcc <HAL_RCC_OscConfig+0x4d4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7f      	ldr	r2, [pc, #508]	; (8001bcc <HAL_RCC_OscConfig+0x4d4>)
 80019d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff f85f 	bl	8000a98 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff f85b 	bl	8000a98 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e12a      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f0:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x4d4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x31a>
 8001a04:	4b70      	ldr	r3, [pc, #448]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	4a6f      	ldr	r2, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a10:	e02d      	b.n	8001a6e <HAL_RCC_OscConfig+0x376>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x33c>
 8001a1a:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a6a      	ldr	r2, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
 8001a26:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a67      	ldr	r2, [pc, #412]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a2c:	f023 0304 	bic.w	r3, r3, #4
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
 8001a32:	e01c      	b.n	8001a6e <HAL_RCC_OscConfig+0x376>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x35e>
 8001a3c:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a61      	ldr	r2, [pc, #388]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
 8001a48:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	4a5e      	ldr	r2, [pc, #376]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6713      	str	r3, [r2, #112]	; 0x70
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0x376>
 8001a56:	4b5c      	ldr	r3, [pc, #368]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6713      	str	r3, [r2, #112]	; 0x70
 8001a62:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff f80f 	bl	8000a98 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff f80b 	bl	8000a98 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0d8      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ee      	beq.n	8001a7e <HAL_RCC_OscConfig+0x386>
 8001aa0:	e014      	b.n	8001acc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7fe fff9 	bl	8000a98 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7fe fff5 	bl	8000a98 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e0c2      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac0:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ee      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a3c      	ldr	r2, [pc, #240]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80ae 	beq.w	8001c44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae8:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d06d      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d14b      	bne.n	8001b94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7fe ffc6 	bl	8000a98 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7fe ffc2 	bl	8000a98 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e091      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	041b      	lsls	r3, r3, #16
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	071b      	lsls	r3, r3, #28
 8001b5a:	491b      	ldr	r1, [pc, #108]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7fe ff94 	bl	8000a98 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7fe ff90 	bl	8000a98 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e05f      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x47c>
 8001b92:	e057      	b.n	8001c44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7fe ff7a 	bl	8000a98 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7fe ff76 	bl	8000a98 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e045      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bba:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_OscConfig+0x4d0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4b0>
 8001bc6:	e03d      	b.n	8001c44 <HAL_RCC_OscConfig+0x54c>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_RCC_OscConfig+0x558>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d030      	beq.n	8001c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d129      	bne.n	8001c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d122      	bne.n	8001c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d119      	bne.n	8001c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	085b      	lsrs	r3, r3, #1
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d10f      	bne.n	8001c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0d0      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d910      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 020f 	bic.w	r2, r3, #15
 8001c82:	4965      	ldr	r1, [pc, #404]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b8      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	494d      	ldr	r1, [pc, #308]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d040      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d115      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e07f      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e073      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b3d      	ldr	r3, [pc, #244]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06b      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4936      	ldr	r1, [pc, #216]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d48:	f7fe fea6 	bl	8000a98 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe fea2 	bl	8000a98 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e053      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b2d      	ldr	r3, [pc, #180]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d210      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 020f 	bic.w	r2, r3, #15
 8001d8e:	4922      	ldr	r1, [pc, #136]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e032      	b.n	8001e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d008      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4916      	ldr	r1, [pc, #88]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001de6:	f000 f821 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dea:	4601      	mov	r1, r0
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_RCC_ClockConfig+0x1cc>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8001dfe:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1d0>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1d4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fd68 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023c00 	.word	0x40023c00
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	0800522c 	.word	0x0800522c
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d007      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x32>
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d008      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x38>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80b4 	bne.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e5a:	60bb      	str	r3, [r7, #8]
      break;
 8001e5c:	e0b3      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5e:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001e60:	60bb      	str	r3, [r7, #8]
      break;
 8001e62:	e0b0      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e64:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e6c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e6e:	4b58      	ldr	r3, [pc, #352]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d04a      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b55      	ldr	r3, [pc, #340]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	f04f 0400 	mov.w	r4, #0
 8001e84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	ea03 0501 	and.w	r5, r3, r1
 8001e90:	ea04 0602 	and.w	r6, r4, r2
 8001e94:	4629      	mov	r1, r5
 8001e96:	4632      	mov	r2, r6
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f04f 0400 	mov.w	r4, #0
 8001ea0:	0154      	lsls	r4, r2, #5
 8001ea2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ea6:	014b      	lsls	r3, r1, #5
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4622      	mov	r2, r4
 8001eac:	1b49      	subs	r1, r1, r5
 8001eae:	eb62 0206 	sbc.w	r2, r2, r6
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f04f 0400 	mov.w	r4, #0
 8001eba:	0194      	lsls	r4, r2, #6
 8001ebc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ec0:	018b      	lsls	r3, r1, #6
 8001ec2:	1a5b      	subs	r3, r3, r1
 8001ec4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	00e2      	lsls	r2, r4, #3
 8001ed2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ed6:	00d9      	lsls	r1, r3, #3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4614      	mov	r4, r2
 8001edc:	195b      	adds	r3, r3, r5
 8001ede:	eb44 0406 	adc.w	r4, r4, r6
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	0262      	lsls	r2, r4, #9
 8001eec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ef0:	0259      	lsls	r1, r3, #9
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4614      	mov	r4, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	4621      	mov	r1, r4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f04f 0400 	mov.w	r4, #0
 8001f00:	461a      	mov	r2, r3
 8001f02:	4623      	mov	r3, r4
 8001f04:	f7fe f99c 	bl	8000240 <__aeabi_uldivmod>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e049      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	f04f 0400 	mov.w	r4, #0
 8001f1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	ea03 0501 	and.w	r5, r3, r1
 8001f26:	ea04 0602 	and.w	r6, r4, r2
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	4632      	mov	r2, r6
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	f04f 0400 	mov.w	r4, #0
 8001f36:	0154      	lsls	r4, r2, #5
 8001f38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f3c:	014b      	lsls	r3, r1, #5
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4622      	mov	r2, r4
 8001f42:	1b49      	subs	r1, r1, r5
 8001f44:	eb62 0206 	sbc.w	r2, r2, r6
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	f04f 0400 	mov.w	r4, #0
 8001f50:	0194      	lsls	r4, r2, #6
 8001f52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f56:	018b      	lsls	r3, r1, #6
 8001f58:	1a5b      	subs	r3, r3, r1
 8001f5a:	eb64 0402 	sbc.w	r4, r4, r2
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	00e2      	lsls	r2, r4, #3
 8001f68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f6c:	00d9      	lsls	r1, r3, #3
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4614      	mov	r4, r2
 8001f72:	195b      	adds	r3, r3, r5
 8001f74:	eb44 0406 	adc.w	r4, r4, r6
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	02a2      	lsls	r2, r4, #10
 8001f82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f86:	0299      	lsls	r1, r3, #10
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4614      	mov	r4, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	4621      	mov	r1, r4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4623      	mov	r3, r4
 8001f9a:	f7fe f951 	bl	8000240 <__aeabi_uldivmod>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	60bb      	str	r3, [r7, #8]
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001fc2:	60bb      	str	r3, [r7, #8]
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff8:	f7ff fff0 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0b5b      	lsrs	r3, r3, #13
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4a03      	ldr	r2, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	0800523c 	.word	0x0800523c

0800201c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	220f      	movs	r2, #15
 800202a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_RCC_GetClockConfig+0x60>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e049      	b.n	8002126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f841 	bl	800212e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f000 fa00 	bl	80024c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d001      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e054      	b.n	8002206 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <HAL_TIM_Base_Start_IT+0xd0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d022      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d01d      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a22      	ldr	r2, [pc, #136]	; (8002218 <HAL_TIM_Base_Start_IT+0xd4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d018      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a21      	ldr	r2, [pc, #132]	; (800221c <HAL_TIM_Base_Start_IT+0xd8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_TIM_Base_Start_IT+0xdc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00e      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_TIM_Base_Start_IT+0xe0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_TIM_Base_Start_IT+0xe4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1b      	ldr	r2, [pc, #108]	; (800222c <HAL_TIM_Base_Start_IT+0xe8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d115      	bne.n	80021f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_TIM_Base_Start_IT+0xec>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d015      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0xbe>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d011      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ee:	e008      	b.n	8002202 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e000      	b.n	8002204 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	40000400 	.word	0x40000400
 800221c:	40000800 	.word	0x40000800
 8002220:	40000c00 	.word	0x40000c00
 8002224:	40010400 	.word	0x40010400
 8002228:	40014000 	.word	0x40014000
 800222c:	40001800 	.word	0x40001800
 8002230:	00010007 	.word	0x00010007

08002234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	d122      	bne.n	8002290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d11b      	bne.n	8002290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0202 	mvn.w	r2, #2
 8002260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f905 	bl	8002486 <HAL_TIM_IC_CaptureCallback>
 800227c:	e005      	b.n	800228a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f8f7 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f908 	bl	800249a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d122      	bne.n	80022e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d11b      	bne.n	80022e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0204 	mvn.w	r2, #4
 80022b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8db 	bl	8002486 <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f8cd 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f8de 	bl	800249a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0208 	mvn.w	r2, #8
 8002308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2204      	movs	r2, #4
 800230e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8b1 	bl	8002486 <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8a3 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8b4 	bl	800249a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b10      	cmp	r3, #16
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b10      	cmp	r3, #16
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0210 	mvn.w	r2, #16
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2208      	movs	r2, #8
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f887 	bl	8002486 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f879 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f88a 	bl	800249a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d107      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0201 	mvn.w	r2, #1
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fa54 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b80      	cmp	r3, #128	; 0x80
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b80      	cmp	r3, #128	; 0x80
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f91a 	bl	8002618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f2:	d10e      	bne.n	8002412 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	2b80      	cmp	r3, #128	; 0x80
 8002400:	d107      	bne.n	8002412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800240a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f90d 	bl	800262c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d10e      	bne.n	800243e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d107      	bne.n	800243e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f838 	bl	80024ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b20      	cmp	r3, #32
 800244a:	d10e      	bne.n	800246a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b20      	cmp	r3, #32
 8002458:	d107      	bne.n	800246a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f06f 0220 	mvn.w	r2, #32
 8002462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f8cd 	bl	8002604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <TIM_Base_SetConfig+0x114>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <TIM_Base_SetConfig+0x40>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d00f      	beq.n	8002504 <TIM_Base_SetConfig+0x40>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3d      	ldr	r2, [pc, #244]	; (80025dc <TIM_Base_SetConfig+0x118>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00b      	beq.n	8002504 <TIM_Base_SetConfig+0x40>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <TIM_Base_SetConfig+0x11c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d007      	beq.n	8002504 <TIM_Base_SetConfig+0x40>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <TIM_Base_SetConfig+0x120>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <TIM_Base_SetConfig+0x40>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a3a      	ldr	r2, [pc, #232]	; (80025e8 <TIM_Base_SetConfig+0x124>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d108      	bne.n	8002516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <TIM_Base_SetConfig+0x114>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d02b      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d027      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a2c      	ldr	r2, [pc, #176]	; (80025dc <TIM_Base_SetConfig+0x118>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d023      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2b      	ldr	r2, [pc, #172]	; (80025e0 <TIM_Base_SetConfig+0x11c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a2a      	ldr	r2, [pc, #168]	; (80025e4 <TIM_Base_SetConfig+0x120>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01b      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <TIM_Base_SetConfig+0x124>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d017      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a28      	ldr	r2, [pc, #160]	; (80025ec <TIM_Base_SetConfig+0x128>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <TIM_Base_SetConfig+0x12c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00f      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <TIM_Base_SetConfig+0x130>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00b      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <TIM_Base_SetConfig+0x134>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a24      	ldr	r2, [pc, #144]	; (80025fc <TIM_Base_SetConfig+0x138>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d003      	beq.n	8002576 <TIM_Base_SetConfig+0xb2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a23      	ldr	r2, [pc, #140]	; (8002600 <TIM_Base_SetConfig+0x13c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d108      	bne.n	8002588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <TIM_Base_SetConfig+0x114>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d003      	beq.n	80025bc <TIM_Base_SetConfig+0xf8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <TIM_Base_SetConfig+0x124>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d103      	bne.n	80025c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	615a      	str	r2, [r3, #20]
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40010000 	.word	0x40010000
 80025dc:	40000400 	.word	0x40000400
 80025e0:	40000800 	.word	0x40000800
 80025e4:	40000c00 	.word	0x40000c00
 80025e8:	40010400 	.word	0x40010400
 80025ec:	40014000 	.word	0x40014000
 80025f0:	40014400 	.word	0x40014400
 80025f4:	40014800 	.word	0x40014800
 80025f8:	40001800 	.word	0x40001800
 80025fc:	40001c00 	.word	0x40001c00
 8002600:	40002000 	.word	0x40002000

08002604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002656:	f3ef 8305 	mrs	r3, IPSR
 800265a:	60bb      	str	r3, [r7, #8]
  return(result);
 800265c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10f      	bne.n	8002682 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002662:	f3ef 8310 	mrs	r3, PRIMASK
 8002666:	607b      	str	r3, [r7, #4]
  return(result);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800266e:	f3ef 8311 	mrs	r3, BASEPRI
 8002672:	603b      	str	r3, [r7, #0]
  return(result);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <osKernelInitialize+0x3a>
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <osKernelInitialize+0x64>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d103      	bne.n	800268a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002682:	f06f 0305 	mvn.w	r3, #5
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e00c      	b.n	80026a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <osKernelInitialize+0x64>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <osKernelInitialize+0x64>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e002      	b.n	80026a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80026a4:	68fb      	ldr	r3, [r7, #12]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	2000002c 	.word	0x2000002c

080026b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026be:	f3ef 8305 	mrs	r3, IPSR
 80026c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80026c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ca:	f3ef 8310 	mrs	r3, PRIMASK
 80026ce:	607b      	str	r3, [r7, #4]
  return(result);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d105      	bne.n	80026e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026d6:	f3ef 8311 	mrs	r3, BASEPRI
 80026da:	603b      	str	r3, [r7, #0]
  return(result);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <osKernelStart+0x3a>
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <osKernelStart+0x68>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d103      	bne.n	80026f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80026ea:	f06f 0305 	mvn.w	r3, #5
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e010      	b.n	8002714 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <osKernelStart+0x68>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d109      	bne.n	800270e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80026fa:	f7ff ffa1 	bl	8002640 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <osKernelStart+0x68>)
 8002700:	2202      	movs	r2, #2
 8002702:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002704:	f001 f89c 	bl	8003840 <vTaskStartScheduler>
      stat = osOK;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e002      	b.n	8002714 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002714:	68fb      	ldr	r3, [r7, #12]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2000002c 	.word	0x2000002c

08002724 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b090      	sub	sp, #64	; 0x40
 8002728:	af04      	add	r7, sp, #16
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002734:	f3ef 8305 	mrs	r3, IPSR
 8002738:	61fb      	str	r3, [r7, #28]
  return(result);
 800273a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 808f 	bne.w	8002860 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002742:	f3ef 8310 	mrs	r3, PRIMASK
 8002746:	61bb      	str	r3, [r7, #24]
  return(result);
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800274e:	f3ef 8311 	mrs	r3, BASEPRI
 8002752:	617b      	str	r3, [r7, #20]
  return(result);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <osThreadNew+0x3e>
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <osThreadNew+0x148>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d07e      	beq.n	8002860 <osThreadNew+0x13c>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d07b      	beq.n	8002860 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800276c:	2318      	movs	r3, #24
 800276e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d045      	beq.n	800280c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <osThreadNew+0x6a>
        name = attr->name;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <osThreadNew+0x90>
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	2b38      	cmp	r3, #56	; 0x38
 80027a6:	d805      	bhi.n	80027b4 <osThreadNew+0x90>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <osThreadNew+0x94>
        return (NULL);
 80027b4:	2300      	movs	r3, #0
 80027b6:	e054      	b.n	8002862 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <osThreadNew+0xca>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b5b      	cmp	r3, #91	; 0x5b
 80027d6:	d90a      	bls.n	80027ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <osThreadNew+0xca>
        mem = 1;
 80027e8:	2301      	movs	r3, #1
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	e010      	b.n	8002810 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <osThreadNew+0xec>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <osThreadNew+0xec>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <osThreadNew+0xec>
          mem = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	e001      	b.n	8002810 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d110      	bne.n	8002838 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800281e:	9202      	str	r2, [sp, #8]
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fe2b 	bl	8003488 <xTaskCreateStatic>
 8002832:	4603      	mov	r3, r0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	e013      	b.n	8002860 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d110      	bne.n	8002860 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	b29a      	uxth	r2, r3
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fe79 	bl	8003548 <xTaskCreate>
 8002856:	4603      	mov	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <osThreadNew+0x13c>
          hTask = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002860:	693b      	ldr	r3, [r7, #16]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3730      	adds	r7, #48	; 0x30
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000002c 	.word	0x2000002c

08002870 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002878:	f3ef 8305 	mrs	r3, IPSR
 800287c:	613b      	str	r3, [r7, #16]
  return(result);
 800287e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10f      	bne.n	80028a4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002884:	f3ef 8310 	mrs	r3, PRIMASK
 8002888:	60fb      	str	r3, [r7, #12]
  return(result);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002890:	f3ef 8311 	mrs	r3, BASEPRI
 8002894:	60bb      	str	r3, [r7, #8]
  return(result);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <osDelay+0x3c>
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <osDelay+0x58>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d103      	bne.n	80028ac <osDelay+0x3c>
    stat = osErrorISR;
 80028a4:	f06f 0305 	mvn.w	r3, #5
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e007      	b.n	80028bc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <osDelay+0x4c>
      vTaskDelay(ticks);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 ff8c 	bl	80037d4 <vTaskDelay>
    }
  }

  return (stat);
 80028bc:	697b      	ldr	r3, [r7, #20]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	2000002c 	.word	0x2000002c

080028cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80028dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <vApplicationGetIdleTaskMemory+0x30>)
 80028e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000030 	.word	0x20000030
 80028fc:	2000008c 	.word	0x2000008c

08002900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a07      	ldr	r2, [pc, #28]	; (800292c <vApplicationGetTimerTaskMemory+0x2c>)
 8002910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <vApplicationGetTimerTaskMemory+0x30>)
 8002916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	2000028c 	.word	0x2000028c
 8002930:	200002e8 	.word	0x200002e8

08002934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f103 0208 	add.w	r2, r3, #8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f103 0208 	add.w	r2, r3, #8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f103 0208 	add.w	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d103      	bne.n	80029f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e00c      	b.n	8002a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3308      	adds	r3, #8
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e002      	b.n	8002a04 <vListInsert+0x2e>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d2f6      	bcs.n	80029fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6892      	ldr	r2, [r2, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6852      	ldr	r2, [r2, #4]
 8002a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d103      	bne.n	8002a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	b672      	cpsid	i
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	b662      	cpsie	i
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	e7fe      	b.n	8002ac6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8002ac8:	f002 f846 	bl	8004b58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	3b01      	subs	r3, #1
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	441a      	add	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	22ff      	movs	r2, #255	; 0xff
 8002b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d114      	bne.n	8002b48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3310      	adds	r3, #16
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f916 	bl	8003d5c <xTaskRemoveFromEventList>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d012      	beq.n	8002b5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <xQueueGenericReset+0xd0>)
 8002b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	e009      	b.n	8002b5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fef1 	bl	8002934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3324      	adds	r3, #36	; 0x24
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff feec 	bl	8002934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b5c:	f002 f82e 	bl	8004bbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b60:	2301      	movs	r3, #1
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	; 0x38
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10b      	bne.n	8002b9c <xQueueGenericCreateStatic+0x2c>
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	b672      	cpsid	i
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	b662      	cpsie	i
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9a:	e7fe      	b.n	8002b9a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10b      	bne.n	8002bba <xQueueGenericCreateStatic+0x4a>
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	b672      	cpsid	i
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	b662      	cpsie	i
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <xQueueGenericCreateStatic+0x56>
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <xQueueGenericCreateStatic+0x5a>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <xQueueGenericCreateStatic+0x5c>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <xQueueGenericCreateStatic+0x78>
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	b672      	cpsid	i
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	b662      	cpsie	i
 8002be4:	623b      	str	r3, [r7, #32]
 8002be6:	e7fe      	b.n	8002be6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <xQueueGenericCreateStatic+0x84>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <xQueueGenericCreateStatic+0x88>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <xQueueGenericCreateStatic+0x8a>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10b      	bne.n	8002c16 <xQueueGenericCreateStatic+0xa6>
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	b672      	cpsid	i
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	b662      	cpsie	i
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	e7fe      	b.n	8002c14 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c16:	2350      	movs	r3, #80	; 0x50
 8002c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b50      	cmp	r3, #80	; 0x50
 8002c1e:	d00b      	beq.n	8002c38 <xQueueGenericCreateStatic+0xc8>
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	b672      	cpsid	i
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	b662      	cpsie	i
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	e7fe      	b.n	8002c36 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f805 	bl	8002c6a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3730      	adds	r7, #48	; 0x30
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	e002      	b.n	8002c8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c98:	2101      	movs	r1, #1
 8002c9a:	69b8      	ldr	r0, [r7, #24]
 8002c9c:	f7ff fefe 	bl	8002a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08e      	sub	sp, #56	; 0x38
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <xQueueGenericSend+0x34>
 8002ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd0:	b672      	cpsid	i
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	b662      	cpsie	i
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce2:	e7fe      	b.n	8002ce2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <xQueueGenericSend+0x42>
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <xQueueGenericSend+0x46>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <xQueueGenericSend+0x48>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <xQueueGenericSend+0x64>
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	b672      	cpsid	i
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	b662      	cpsie	i
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	e7fe      	b.n	8002d12 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d103      	bne.n	8002d22 <xQueueGenericSend+0x72>
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <xQueueGenericSend+0x76>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <xQueueGenericSend+0x78>
 8002d26:	2300      	movs	r3, #0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <xQueueGenericSend+0x94>
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	b672      	cpsid	i
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	b662      	cpsie	i
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	e7fe      	b.n	8002d42 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d44:	f001 f9ca 	bl	80040dc <xTaskGetSchedulerState>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <xQueueGenericSend+0xa4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <xQueueGenericSend+0xa8>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <xQueueGenericSend+0xaa>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <xQueueGenericSend+0xc6>
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	b672      	cpsid	i
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	b662      	cpsie	i
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	e7fe      	b.n	8002d74 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d76:	f001 feef 	bl	8004b58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <xQueueGenericSend+0xdc>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d129      	bne.n	8002de0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d92:	f000 fa0d 	bl	80031b0 <prvCopyDataToQueue>
 8002d96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	3324      	adds	r3, #36	; 0x24
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 ffd9 	bl	8003d5c <xTaskRemoveFromEventList>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002db0:	4b3f      	ldr	r3, [pc, #252]	; (8002eb0 <xQueueGenericSend+0x200>)
 8002db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	e00a      	b.n	8002dd8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dc8:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <xQueueGenericSend+0x200>)
 8002dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dd8:	f001 fef0 	bl	8004bbc <vPortExitCritical>
				return pdPASS;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e063      	b.n	8002ea8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002de6:	f001 fee9 	bl	8004bbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e05c      	b.n	8002ea8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f001 f813 	bl	8003e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e02:	f001 fedb 	bl	8004bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e06:	f000 fd83 	bl	8003910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e0a:	f001 fea5 	bl	8004b58 <vPortEnterCritical>
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d103      	bne.n	8002e24 <xQueueGenericSend+0x174>
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d103      	bne.n	8002e3a <xQueueGenericSend+0x18a>
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e3a:	f001 febf 	bl	8004bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e3e:	1d3a      	adds	r2, r7, #4
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 f802 	bl	8003e50 <xTaskCheckForTimeOut>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d124      	bne.n	8002e9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e54:	f000 faa4 	bl	80033a0 <prvIsQueueFull>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	3310      	adds	r3, #16
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 ff26 	bl	8003cb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e6e:	f000 fa2f 	bl	80032d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e72:	f000 fd5b 	bl	800392c <xTaskResumeAll>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f47f af7c 	bne.w	8002d76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <xQueueGenericSend+0x200>)
 8002e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	e772      	b.n	8002d76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e92:	f000 fa1d 	bl	80032d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e96:	f000 fd49 	bl	800392c <xTaskResumeAll>
 8002e9a:	e76c      	b.n	8002d76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e9e:	f000 fa17 	bl	80032d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ea2:	f000 fd43 	bl	800392c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ea6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3738      	adds	r7, #56	; 0x38
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <xQueueGenericSendFromISR+0x30>
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	b672      	cpsid	i
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	b662      	cpsie	i
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e7fe      	b.n	8002ee2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d103      	bne.n	8002ef2 <xQueueGenericSendFromISR+0x3e>
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <xQueueGenericSendFromISR+0x42>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <xQueueGenericSendFromISR+0x44>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <xQueueGenericSendFromISR+0x60>
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	b672      	cpsid	i
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	b662      	cpsie	i
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	e7fe      	b.n	8002f12 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d103      	bne.n	8002f22 <xQueueGenericSendFromISR+0x6e>
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <xQueueGenericSendFromISR+0x72>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <xQueueGenericSendFromISR+0x74>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <xQueueGenericSendFromISR+0x90>
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	b672      	cpsid	i
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	b662      	cpsie	i
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e7fe      	b.n	8002f42 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f44:	f001 fee8 	bl	8004d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f48:	f3ef 8211 	mrs	r2, BASEPRI
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	b672      	cpsid	i
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	b662      	cpsie	i
 8002f60:	61ba      	str	r2, [r7, #24]
 8002f62:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f64:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <xQueueGenericSendFromISR+0xc6>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d12c      	bne.n	8002fd4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f8a:	f000 f911 	bl	80031b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f8e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f96:	d112      	bne.n	8002fbe <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d016      	beq.n	8002fce <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	3324      	adds	r3, #36	; 0x24
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fed9 	bl	8003d5c <xTaskRemoveFromEventList>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00e      	beq.n	8002fce <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e007      	b.n	8002fce <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	b25a      	sxtb	r2, r3
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002fd2:	e001      	b.n	8002fd8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3738      	adds	r7, #56	; 0x38
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08c      	sub	sp, #48	; 0x30
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <xQueueReceive+0x32>
	__asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	b672      	cpsid	i
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	b662      	cpsie	i
 800301a:	623b      	str	r3, [r7, #32]
 800301c:	e7fe      	b.n	800301c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <xQueueReceive+0x40>
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <xQueueReceive+0x44>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <xQueueReceive+0x46>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <xQueueReceive+0x62>
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	b672      	cpsid	i
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	b662      	cpsie	i
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	e7fe      	b.n	800304c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304e:	f001 f845 	bl	80040dc <xTaskGetSchedulerState>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <xQueueReceive+0x72>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <xQueueReceive+0x76>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <xQueueReceive+0x78>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <xQueueReceive+0x94>
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	b672      	cpsid	i
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	b662      	cpsie	i
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e7fe      	b.n	800307e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003080:	f001 fd6a 	bl	8004b58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01f      	beq.n	80030d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003094:	f000 f8f6 	bl	8003284 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	1e5a      	subs	r2, r3, #1
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00f      	beq.n	80030c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	3310      	adds	r3, #16
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fe55 	bl	8003d5c <xTaskRemoveFromEventList>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030b8:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <xQueueReceive+0x1c0>)
 80030ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030c8:	f001 fd78 	bl	8004bbc <vPortExitCritical>
				return pdPASS;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e069      	b.n	80031a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030d6:	f001 fd71 	bl	8004bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030da:	2300      	movs	r3, #0
 80030dc:	e062      	b.n	80031a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fe9b 	bl	8003e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030f2:	f001 fd63 	bl	8004bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f6:	f000 fc0b 	bl	8003910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030fa:	f001 fd2d 	bl	8004b58 <vPortEnterCritical>
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003104:	b25b      	sxtb	r3, r3
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d103      	bne.n	8003114 <xQueueReceive+0x128>
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311a:	b25b      	sxtb	r3, r3
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d103      	bne.n	800312a <xQueueReceive+0x13e>
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800312a:	f001 fd47 	bl	8004bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312e:	1d3a      	adds	r2, r7, #4
 8003130:	f107 0310 	add.w	r3, r7, #16
 8003134:	4611      	mov	r1, r2
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fe8a 	bl	8003e50 <xTaskCheckForTimeOut>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d123      	bne.n	800318a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003144:	f000 f916 	bl	8003374 <prvIsQueueEmpty>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	3324      	adds	r3, #36	; 0x24
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fdae 	bl	8003cb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800315c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315e:	f000 f8b7 	bl	80032d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003162:	f000 fbe3 	bl	800392c <xTaskResumeAll>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d189      	bne.n	8003080 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <xQueueReceive+0x1c0>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	e780      	b.n	8003080 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800317e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003180:	f000 f8a6 	bl	80032d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003184:	f000 fbd2 	bl	800392c <xTaskResumeAll>
 8003188:	e77a      	b.n	8003080 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800318a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800318c:	f000 f8a0 	bl	80032d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003190:	f000 fbcc 	bl	800392c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003196:	f000 f8ed 	bl	8003374 <prvIsQueueEmpty>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f43f af6f 	beq.w	8003080 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3730      	adds	r7, #48	; 0x30
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10d      	bne.n	80031ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d14d      	bne.n	8003272 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 ff9c 	bl	8004118 <xTaskPriorityDisinherit>
 80031e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	e043      	b.n	8003272 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d119      	bne.n	8003224 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6858      	ldr	r0, [r3, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	461a      	mov	r2, r3
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	f001 ffd2 	bl	80051a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	441a      	add	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d32b      	bcc.n	8003272 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	e026      	b.n	8003272 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68d8      	ldr	r0, [r3, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	461a      	mov	r2, r3
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	f001 ffb8 	bl	80051a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	425b      	negs	r3, r3
 800323e:	441a      	add	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d207      	bcs.n	8003260 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	425b      	negs	r3, r3
 800325a:	441a      	add	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d105      	bne.n	8003272 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	3b01      	subs	r3, #1
 8003270:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800327a:	697b      	ldr	r3, [r7, #20]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d018      	beq.n	80032c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	441a      	add	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d303      	bcc.n	80032b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68d9      	ldr	r1, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	461a      	mov	r2, r3
 80032c2:	6838      	ldr	r0, [r7, #0]
 80032c4:	f001 ff6e 	bl	80051a4 <memcpy>
	}
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032d8:	f001 fc3e 	bl	8004b58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032e4:	e011      	b.n	800330a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3324      	adds	r3, #36	; 0x24
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fd32 	bl	8003d5c <xTaskRemoveFromEventList>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032fe:	f000 fe0b 	bl	8003f18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	3b01      	subs	r3, #1
 8003306:	b2db      	uxtb	r3, r3
 8003308:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	dce9      	bgt.n	80032e6 <prvUnlockQueue+0x16>
 8003312:	e000      	b.n	8003316 <prvUnlockQueue+0x46>
					break;
 8003314:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	22ff      	movs	r2, #255	; 0xff
 800331a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800331e:	f001 fc4d 	bl	8004bbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003322:	f001 fc19 	bl	8004b58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800332c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800332e:	e011      	b.n	8003354 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3310      	adds	r3, #16
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fd0d 	bl	8003d5c <xTaskRemoveFromEventList>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003348:	f000 fde6 	bl	8003f18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800334c:	7bbb      	ldrb	r3, [r7, #14]
 800334e:	3b01      	subs	r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003358:	2b00      	cmp	r3, #0
 800335a:	dce9      	bgt.n	8003330 <prvUnlockQueue+0x60>
 800335c:	e000      	b.n	8003360 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800335e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	22ff      	movs	r2, #255	; 0xff
 8003364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003368:	f001 fc28 	bl	8004bbc <vPortExitCritical>
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800337c:	f001 fbec 	bl	8004b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003388:	2301      	movs	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e001      	b.n	8003392 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003392:	f001 fc13 	bl	8004bbc <vPortExitCritical>

	return xReturn;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033a8:	f001 fbd6 	bl	8004b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d102      	bne.n	80033be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e001      	b.n	80033c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033c2:	f001 fbfb 	bl	8004bbc <vPortExitCritical>

	return xReturn;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e014      	b.n	800340a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033e0:	4a0e      	ldr	r2, [pc, #56]	; (800341c <vQueueAddToRegistry+0x4c>)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033ec:	490b      	ldr	r1, [pc, #44]	; (800341c <vQueueAddToRegistry+0x4c>)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033f6:	4a09      	ldr	r2, [pc, #36]	; (800341c <vQueueAddToRegistry+0x4c>)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003402:	e005      	b.n	8003410 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3301      	adds	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b07      	cmp	r3, #7
 800340e:	d9e7      	bls.n	80033e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	200049b0 	.word	0x200049b0

08003420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003430:	f001 fb92 	bl	8004b58 <vPortEnterCritical>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800343a:	b25b      	sxtb	r3, r3
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d103      	bne.n	800344a <vQueueWaitForMessageRestricted+0x2a>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003450:	b25b      	sxtb	r3, r3
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003456:	d103      	bne.n	8003460 <vQueueWaitForMessageRestricted+0x40>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003460:	f001 fbac 	bl	8004bbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fc45 	bl	8003d04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800347a:	6978      	ldr	r0, [r7, #20]
 800347c:	f7ff ff28 	bl	80032d0 <prvUnlockQueue>
	}
 8003480:	bf00      	nop
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	; 0x38
 800348c:	af04      	add	r7, sp, #16
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <xTaskCreateStatic+0x2c>
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	b672      	cpsid	i
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	b662      	cpsie	i
 80034b0:	623b      	str	r3, [r7, #32]
 80034b2:	e7fe      	b.n	80034b2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <xTaskCreateStatic+0x4a>
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	b672      	cpsid	i
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	b662      	cpsie	i
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	e7fe      	b.n	80034d0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034d2:	235c      	movs	r3, #92	; 0x5c
 80034d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b5c      	cmp	r3, #92	; 0x5c
 80034da:	d00b      	beq.n	80034f4 <xTaskCreateStatic+0x6c>
 80034dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e0:	b672      	cpsid	i
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	b662      	cpsie	i
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e7fe      	b.n	80034f2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01e      	beq.n	800353a <xTaskCreateStatic+0xb2>
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01b      	beq.n	800353a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	2202      	movs	r2, #2
 8003510:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003514:	2300      	movs	r3, #0
 8003516:	9303      	str	r3, [sp, #12]
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	9302      	str	r3, [sp, #8]
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f850 	bl	80035d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003532:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003534:	f000 f8de 	bl	80036f4 <prvAddNewTaskToReadyList>
 8003538:	e001      	b.n	800353e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800353e:	697b      	ldr	r3, [r7, #20]
	}
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	; 0x30
 800354c:	af04      	add	r7, sp, #16
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc1d 	bl	8004d9c <pvPortMalloc>
 8003562:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800356a:	205c      	movs	r0, #92	; 0x5c
 800356c:	f001 fc16 	bl	8004d9c <pvPortMalloc>
 8003570:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
 800357e:	e005      	b.n	800358c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003580:	6978      	ldr	r0, [r7, #20]
 8003582:	f001 fcd3 	bl	8004f2c <vPortFree>
 8003586:	e001      	b.n	800358c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d017      	beq.n	80035c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	2300      	movs	r3, #0
 800359e:	9303      	str	r3, [sp, #12]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	9302      	str	r3, [sp, #8]
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f80e 	bl	80035d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035b6:	69f8      	ldr	r0, [r7, #28]
 80035b8:	f000 f89c 	bl	80036f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035bc:	2301      	movs	r3, #1
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	e002      	b.n	80035c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035c8:	69bb      	ldr	r3, [r7, #24]
	}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b088      	sub	sp, #32
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	461a      	mov	r2, r3
 80035ea:	21a5      	movs	r1, #165	; 0xa5
 80035ec:	f001 fde5 	bl	80051ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80035fa:	440b      	add	r3, r1
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f023 0307 	bic.w	r3, r3, #7
 8003608:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <prvInitialiseNewTask+0x5a>
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	b672      	cpsid	i
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	b662      	cpsie	i
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e7fe      	b.n	800362a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01f      	beq.n	8003672 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	e012      	b.n	800365e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	7819      	ldrb	r1, [r3, #0]
 8003640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	3334      	adds	r3, #52	; 0x34
 8003648:	460a      	mov	r2, r1
 800364a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d9e9      	bls.n	8003638 <prvInitialiseNewTask+0x66>
 8003664:	e000      	b.n	8003668 <prvInitialiseNewTask+0x96>
			{
				break;
 8003666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003670:	e003      	b.n	800367a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	2b37      	cmp	r3, #55	; 0x37
 800367e:	d901      	bls.n	8003684 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003680:	2337      	movs	r3, #55	; 0x37
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800368e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003692:	2200      	movs	r2, #0
 8003694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	3304      	adds	r3, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff f96a 	bl	8002974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	3318      	adds	r3, #24
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f965 	bl	8002974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	2200      	movs	r2, #0
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	68f9      	ldr	r1, [r7, #12]
 80036d2:	69b8      	ldr	r0, [r7, #24]
 80036d4:	f001 f938 	bl	8004948 <pxPortInitialiseStack>
 80036d8:	4602      	mov	r2, r0
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036ea:	bf00      	nop
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036fc:	f001 fa2c 	bl	8004b58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003700:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <prvAddNewTaskToReadyList+0xc4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3301      	adds	r3, #1
 8003706:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <prvAddNewTaskToReadyList+0xc4>)
 8003708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <prvAddNewTaskToReadyList+0xc8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003712:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <prvAddNewTaskToReadyList+0xc8>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <prvAddNewTaskToReadyList+0xc4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d110      	bne.n	8003742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003720:	f000 fc20 	bl	8003f64 <prvInitialiseTaskLists>
 8003724:	e00d      	b.n	8003742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <prvAddNewTaskToReadyList+0xcc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <prvAddNewTaskToReadyList+0xc8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	d802      	bhi.n	8003742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800373c:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <prvAddNewTaskToReadyList+0xc8>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <prvAddNewTaskToReadyList+0xd0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <prvAddNewTaskToReadyList+0xd0>)
 800374a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800374c:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <prvAddNewTaskToReadyList+0xd0>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <prvAddNewTaskToReadyList+0xd4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d903      	bls.n	8003768 <prvAddNewTaskToReadyList+0x74>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <prvAddNewTaskToReadyList+0xd4>)
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <prvAddNewTaskToReadyList+0xd8>)
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f7ff f905 	bl	800298e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003784:	f001 fa1a 	bl	8004bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <prvAddNewTaskToReadyList+0xcc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <prvAddNewTaskToReadyList+0xc8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	429a      	cmp	r2, r3
 800379c:	d207      	bcs.n	80037ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <prvAddNewTaskToReadyList+0xdc>)
 80037a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000bbc 	.word	0x20000bbc
 80037bc:	200006e8 	.word	0x200006e8
 80037c0:	20000bc8 	.word	0x20000bc8
 80037c4:	20000bd8 	.word	0x20000bd8
 80037c8:	20000bc4 	.word	0x20000bc4
 80037cc:	200006ec 	.word	0x200006ec
 80037d0:	e000ed04 	.word	0xe000ed04

080037d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <vTaskDelay+0x64>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <vTaskDelay+0x32>
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	b672      	cpsid	i
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	b662      	cpsie	i
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	e7fe      	b.n	8003804 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003806:	f000 f883 	bl	8003910 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800380a:	2100      	movs	r1, #0
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fcf3 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003812:	f000 f88b 	bl	800392c <xTaskResumeAll>
 8003816:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <vTaskDelay+0x68>)
 8003820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000be4 	.word	0x20000be4
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800384e:	463a      	mov	r2, r7
 8003850:	1d39      	adds	r1, r7, #4
 8003852:	f107 0308 	add.w	r3, r7, #8
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff f838 	bl	80028cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800385c:	6839      	ldr	r1, [r7, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	9202      	str	r2, [sp, #8]
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2300      	movs	r3, #0
 800386c:	460a      	mov	r2, r1
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <vTaskStartScheduler+0xb8>)
 8003870:	4822      	ldr	r0, [pc, #136]	; (80038fc <vTaskStartScheduler+0xbc>)
 8003872:	f7ff fe09 	bl	8003488 <xTaskCreateStatic>
 8003876:	4602      	mov	r2, r0
 8003878:	4b21      	ldr	r3, [pc, #132]	; (8003900 <vTaskStartScheduler+0xc0>)
 800387a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800387c:	4b20      	ldr	r3, [pc, #128]	; (8003900 <vTaskStartScheduler+0xc0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e001      	b.n	800388e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d102      	bne.n	800389a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003894:	f000 fd04 	bl	80042a0 <xTimerCreateTimerTask>
 8003898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d117      	bne.n	80038d0 <vTaskStartScheduler+0x90>
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	b672      	cpsid	i
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	b662      	cpsie	i
 80038b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <vTaskStartScheduler+0xc4>)
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <vTaskStartScheduler+0xc8>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <vTaskStartScheduler+0xcc>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038ca:	f001 f8c9 	bl	8004a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038ce:	e00f      	b.n	80038f0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d10b      	bne.n	80038f0 <vTaskStartScheduler+0xb0>
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	b672      	cpsid	i
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	b662      	cpsie	i
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e7fe      	b.n	80038ee <vTaskStartScheduler+0xae>
}
 80038f0:	bf00      	nop
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	080051f0 	.word	0x080051f0
 80038fc:	08003f31 	.word	0x08003f31
 8003900:	20000be0 	.word	0x20000be0
 8003904:	20000bdc 	.word	0x20000bdc
 8003908:	20000bc8 	.word	0x20000bc8
 800390c:	20000bc0 	.word	0x20000bc0

08003910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <vTaskSuspendAll+0x18>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3301      	adds	r3, #1
 800391a:	4a03      	ldr	r2, [pc, #12]	; (8003928 <vTaskSuspendAll+0x18>)
 800391c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800391e:	bf00      	nop
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	20000be4 	.word	0x20000be4

0800392c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003936:	2300      	movs	r3, #0
 8003938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800393a:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <xTaskResumeAll+0x118>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <xTaskResumeAll+0x2e>
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	b672      	cpsid	i
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	b662      	cpsie	i
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	e7fe      	b.n	8003958 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800395a:	f001 f8fd 	bl	8004b58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800395e:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <xTaskResumeAll+0x118>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3b01      	subs	r3, #1
 8003964:	4a37      	ldr	r2, [pc, #220]	; (8003a44 <xTaskResumeAll+0x118>)
 8003966:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003968:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <xTaskResumeAll+0x118>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d162      	bne.n	8003a36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <xTaskResumeAll+0x11c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d05e      	beq.n	8003a36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003978:	e02f      	b.n	80039da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800397a:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <xTaskResumeAll+0x120>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3318      	adds	r3, #24
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f85e 	bl	8002a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3304      	adds	r3, #4
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f859 	bl	8002a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399a:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <xTaskResumeAll+0x124>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d903      	bls.n	80039aa <xTaskResumeAll+0x7e>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <xTaskResumeAll+0x124>)
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4a27      	ldr	r2, [pc, #156]	; (8003a54 <xTaskResumeAll+0x128>)
 80039b8:	441a      	add	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3304      	adds	r3, #4
 80039be:	4619      	mov	r1, r3
 80039c0:	4610      	mov	r0, r2
 80039c2:	f7fe ffe4 	bl	800298e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <xTaskResumeAll+0x12c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <xTaskResumeAll+0x130>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <xTaskResumeAll+0x120>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1cb      	bne.n	800397a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039e8:	f000 fb58 	bl	800409c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <xTaskResumeAll+0x134>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d010      	beq.n	8003a1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039f8:	f000 f846 	bl	8003a88 <xTaskIncrementTick>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <xTaskResumeAll+0x130>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f1      	bne.n	80039f8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003a14:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <xTaskResumeAll+0x134>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <xTaskResumeAll+0x130>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <xTaskResumeAll+0x138>)
 8003a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a36:	f001 f8c1 	bl	8004bbc <vPortExitCritical>

	return xAlreadyYielded;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000be4 	.word	0x20000be4
 8003a48:	20000bbc 	.word	0x20000bbc
 8003a4c:	20000b7c 	.word	0x20000b7c
 8003a50:	20000bc4 	.word	0x20000bc4
 8003a54:	200006ec 	.word	0x200006ec
 8003a58:	200006e8 	.word	0x200006e8
 8003a5c:	20000bd0 	.word	0x20000bd0
 8003a60:	20000bcc 	.word	0x20000bcc
 8003a64:	e000ed04 	.word	0xe000ed04

08003a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <xTaskGetTickCount+0x1c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a74:	687b      	ldr	r3, [r7, #4]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000bc0 	.word	0x20000bc0

08003a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a92:	4b4f      	ldr	r3, [pc, #316]	; (8003bd0 <xTaskIncrementTick+0x148>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 808a 	bne.w	8003bb0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a9c:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <xTaskIncrementTick+0x14c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003aa4:	4a4b      	ldr	r2, [pc, #300]	; (8003bd4 <xTaskIncrementTick+0x14c>)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d121      	bne.n	8003af4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ab0:	4b49      	ldr	r3, [pc, #292]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <xTaskIncrementTick+0x4a>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	b672      	cpsid	i
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	b662      	cpsie	i
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	e7fe      	b.n	8003ad0 <xTaskIncrementTick+0x48>
 8003ad2:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	4b40      	ldr	r3, [pc, #256]	; (8003bdc <xTaskIncrementTick+0x154>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3e      	ldr	r2, [pc, #248]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4a3e      	ldr	r2, [pc, #248]	; (8003bdc <xTaskIncrementTick+0x154>)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3301      	adds	r3, #1
 8003aec:	4a3c      	ldr	r2, [pc, #240]	; (8003be0 <xTaskIncrementTick+0x158>)
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	f000 fad4 	bl	800409c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003af4:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d349      	bcc.n	8003b92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afe:	4b36      	ldr	r3, [pc, #216]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0e:	601a      	str	r2, [r3, #0]
					break;
 8003b10:	e03f      	b.n	8003b92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <xTaskIncrementTick+0x150>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d203      	bcs.n	8003b32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b2a:	4a2e      	ldr	r2, [pc, #184]	; (8003be4 <xTaskIncrementTick+0x15c>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b30:	e02f      	b.n	8003b92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe ff86 	bl	8002a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3318      	adds	r3, #24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe ff7d 	bl	8002a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b52:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <xTaskIncrementTick+0x160>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d903      	bls.n	8003b62 <xTaskIncrementTick+0xda>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4a22      	ldr	r2, [pc, #136]	; (8003be8 <xTaskIncrementTick+0x160>)
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <xTaskIncrementTick+0x164>)
 8003b70:	441a      	add	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f7fe ff08 	bl	800298e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b82:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <xTaskIncrementTick+0x168>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d3b8      	bcc.n	8003afe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b90:	e7b5      	b.n	8003afe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b92:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <xTaskIncrementTick+0x168>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	4914      	ldr	r1, [pc, #80]	; (8003bec <xTaskIncrementTick+0x164>)
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d907      	bls.n	8003bba <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8003baa:	2301      	movs	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e004      	b.n	8003bba <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003bb0:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <xTaskIncrementTick+0x16c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a0f      	ldr	r2, [pc, #60]	; (8003bf4 <xTaskIncrementTick+0x16c>)
 8003bb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <xTaskIncrementTick+0x170>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003bc6:	697b      	ldr	r3, [r7, #20]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000be4 	.word	0x20000be4
 8003bd4:	20000bc0 	.word	0x20000bc0
 8003bd8:	20000b74 	.word	0x20000b74
 8003bdc:	20000b78 	.word	0x20000b78
 8003be0:	20000bd4 	.word	0x20000bd4
 8003be4:	20000bdc 	.word	0x20000bdc
 8003be8:	20000bc4 	.word	0x20000bc4
 8003bec:	200006ec 	.word	0x200006ec
 8003bf0:	200006e8 	.word	0x200006e8
 8003bf4:	20000bcc 	.word	0x20000bcc
 8003bf8:	20000bd0 	.word	0x20000bd0

08003bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c02:	4b28      	ldr	r3, [pc, #160]	; (8003ca4 <vTaskSwitchContext+0xa8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c0a:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <vTaskSwitchContext+0xac>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c10:	e042      	b.n	8003c98 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <vTaskSwitchContext+0xac>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <vTaskSwitchContext+0xb0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e011      	b.n	8003c44 <vTaskSwitchContext+0x48>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <vTaskSwitchContext+0x42>
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	b672      	cpsid	i
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	b662      	cpsie	i
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	e7fe      	b.n	8003c3c <vTaskSwitchContext+0x40>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	491a      	ldr	r1, [pc, #104]	; (8003cb0 <vTaskSwitchContext+0xb4>)
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0e3      	beq.n	8003c20 <vTaskSwitchContext+0x24>
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <vTaskSwitchContext+0xb4>)
 8003c64:	4413      	add	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3308      	adds	r3, #8
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d104      	bne.n	8003c88 <vTaskSwitchContext+0x8c>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4a09      	ldr	r2, [pc, #36]	; (8003cb4 <vTaskSwitchContext+0xb8>)
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4a06      	ldr	r2, [pc, #24]	; (8003cac <vTaskSwitchContext+0xb0>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000be4 	.word	0x20000be4
 8003ca8:	20000bd0 	.word	0x20000bd0
 8003cac:	20000bc4 	.word	0x20000bc4
 8003cb0:	200006ec 	.word	0x200006ec
 8003cb4:	200006e8 	.word	0x200006e8

08003cb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10b      	bne.n	8003ce0 <vTaskPlaceOnEventList+0x28>
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	b672      	cpsid	i
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	b662      	cpsie	i
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e7fe      	b.n	8003cde <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <vTaskPlaceOnEventList+0x48>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fe fe74 	bl	80029d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cee:	2101      	movs	r1, #1
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f000 fa81 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200006e8 	.word	0x200006e8

08003d04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <vTaskPlaceOnEventListRestricted+0x2a>
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	b672      	cpsid	i
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	b662      	cpsie	i
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	e7fe      	b.n	8003d2c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3318      	adds	r3, #24
 8003d34:	4619      	mov	r1, r3
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7fe fe29 	bl	800298e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	68b8      	ldr	r0, [r7, #8]
 8003d4c:	f000 fa54 	bl	80041f8 <prvAddCurrentTaskToDelayedList>
	}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	200006e8 	.word	0x200006e8

08003d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <xTaskRemoveFromEventList+0x2e>
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	b672      	cpsid	i
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	b662      	cpsie	i
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e7fe      	b.n	8003d88 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3318      	adds	r3, #24
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fe5a 	bl	8002a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <xTaskRemoveFromEventList+0xb0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11d      	bne.n	8003dd8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fe51 	bl	8002a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003daa:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <xTaskRemoveFromEventList+0xb4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d903      	bls.n	8003dba <xTaskRemoveFromEventList+0x5e>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <xTaskRemoveFromEventList+0xb4>)
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <xTaskRemoveFromEventList+0xb8>)
 8003dc8:	441a      	add	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f7fe fddc 	bl	800298e <vListInsertEnd>
 8003dd6:	e005      	b.n	8003de4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	3318      	adds	r3, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	480e      	ldr	r0, [pc, #56]	; (8003e18 <xTaskRemoveFromEventList+0xbc>)
 8003de0:	f7fe fdd5 	bl	800298e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <xTaskRemoveFromEventList+0xc0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d905      	bls.n	8003dfe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <xTaskRemoveFromEventList+0xc4>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e001      	b.n	8003e02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e02:	697b      	ldr	r3, [r7, #20]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000be4 	.word	0x20000be4
 8003e10:	20000bc4 	.word	0x20000bc4
 8003e14:	200006ec 	.word	0x200006ec
 8003e18:	20000b7c 	.word	0x20000b7c
 8003e1c:	200006e8 	.word	0x200006e8
 8003e20:	20000bd0 	.word	0x20000bd0

08003e24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <vTaskInternalSetTimeOutState+0x24>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <vTaskInternalSetTimeOutState+0x28>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	605a      	str	r2, [r3, #4]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	20000bd4 	.word	0x20000bd4
 8003e4c:	20000bc0 	.word	0x20000bc0

08003e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <xTaskCheckForTimeOut+0x28>
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	b672      	cpsid	i
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	b662      	cpsie	i
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	e7fe      	b.n	8003e76 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <xTaskCheckForTimeOut+0x46>
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	b672      	cpsid	i
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	b662      	cpsie	i
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e7fe      	b.n	8003e94 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8003e96:	f000 fe5f 	bl	8004b58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <xTaskCheckForTimeOut+0xc0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d102      	bne.n	8003eba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e023      	b.n	8003f02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <xTaskCheckForTimeOut+0xc4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d007      	beq.n	8003ed6 <xTaskCheckForTimeOut+0x86>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	e015      	b.n	8003f02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d20b      	bcs.n	8003ef8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff99 	bl	8003e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e004      	b.n	8003f02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f02:	f000 fe5b 	bl	8004bbc <vPortExitCritical>

	return xReturn;
 8003f06:	69fb      	ldr	r3, [r7, #28]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000bc0 	.word	0x20000bc0
 8003f14:	20000bd4 	.word	0x20000bd4

08003f18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f1c:	4b03      	ldr	r3, [pc, #12]	; (8003f2c <vTaskMissedYield+0x14>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	20000bd0 	.word	0x20000bd0

08003f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f38:	f000 f854 	bl	8003fe4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <prvIdleTask+0x2c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d907      	bls.n	8003f54 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <prvIdleTask+0x30>)
 8003f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003f54:	f7fc fb76 	bl	8000644 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003f58:	e7ee      	b.n	8003f38 <prvIdleTask+0x8>
 8003f5a:	bf00      	nop
 8003f5c:	200006ec 	.word	0x200006ec
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	e00c      	b.n	8003f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <prvInitialiseTaskLists+0x60>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fcd8 	bl	8002934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3301      	adds	r3, #1
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b37      	cmp	r3, #55	; 0x37
 8003f8e:	d9ef      	bls.n	8003f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f90:	480d      	ldr	r0, [pc, #52]	; (8003fc8 <prvInitialiseTaskLists+0x64>)
 8003f92:	f7fe fccf 	bl	8002934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f96:	480d      	ldr	r0, [pc, #52]	; (8003fcc <prvInitialiseTaskLists+0x68>)
 8003f98:	f7fe fccc 	bl	8002934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <prvInitialiseTaskLists+0x6c>)
 8003f9e:	f7fe fcc9 	bl	8002934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fa2:	480c      	ldr	r0, [pc, #48]	; (8003fd4 <prvInitialiseTaskLists+0x70>)
 8003fa4:	f7fe fcc6 	bl	8002934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fa8:	480b      	ldr	r0, [pc, #44]	; (8003fd8 <prvInitialiseTaskLists+0x74>)
 8003faa:	f7fe fcc3 	bl	8002934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fae:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <prvInitialiseTaskLists+0x78>)
 8003fb0:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <prvInitialiseTaskLists+0x64>)
 8003fb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <prvInitialiseTaskLists+0x7c>)
 8003fb6:	4a05      	ldr	r2, [pc, #20]	; (8003fcc <prvInitialiseTaskLists+0x68>)
 8003fb8:	601a      	str	r2, [r3, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200006ec 	.word	0x200006ec
 8003fc8:	20000b4c 	.word	0x20000b4c
 8003fcc:	20000b60 	.word	0x20000b60
 8003fd0:	20000b7c 	.word	0x20000b7c
 8003fd4:	20000b90 	.word	0x20000b90
 8003fd8:	20000ba8 	.word	0x20000ba8
 8003fdc:	20000b74 	.word	0x20000b74
 8003fe0:	20000b78 	.word	0x20000b78

08003fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fea:	e019      	b.n	8004020 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fec:	f000 fdb4 	bl	8004b58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <prvCheckTasksWaitingTermination+0x4c>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fd23 	bl	8002a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <prvCheckTasksWaitingTermination+0x50>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3b01      	subs	r3, #1
 8004008:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <prvCheckTasksWaitingTermination+0x50>)
 800400a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <prvCheckTasksWaitingTermination+0x54>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3b01      	subs	r3, #1
 8004012:	4a09      	ldr	r2, [pc, #36]	; (8004038 <prvCheckTasksWaitingTermination+0x54>)
 8004014:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004016:	f000 fdd1 	bl	8004bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f80e 	bl	800403c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <prvCheckTasksWaitingTermination+0x54>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e1      	bne.n	8003fec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000b90 	.word	0x20000b90
 8004034:	20000bbc 	.word	0x20000bbc
 8004038:	20000ba4 	.word	0x20000ba4

0800403c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800404a:	2b00      	cmp	r3, #0
 800404c:	d108      	bne.n	8004060 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	4618      	mov	r0, r3
 8004054:	f000 ff6a 	bl	8004f2c <vPortFree>
				vPortFree( pxTCB );
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 ff67 	bl	8004f2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800405e:	e019      	b.n	8004094 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004066:	2b01      	cmp	r3, #1
 8004068:	d103      	bne.n	8004072 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 ff5e 	bl	8004f2c <vPortFree>
	}
 8004070:	e010      	b.n	8004094 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004078:	2b02      	cmp	r3, #2
 800407a:	d00b      	beq.n	8004094 <prvDeleteTCB+0x58>
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	b672      	cpsid	i
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	b662      	cpsie	i
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e7fe      	b.n	8004092 <prvDeleteTCB+0x56>
	}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <prvResetNextTaskUnblockTime+0x38>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <prvResetNextTaskUnblockTime+0x3c>)
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295
 80040b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040b4:	e008      	b.n	80040c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b6:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <prvResetNextTaskUnblockTime+0x38>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <prvResetNextTaskUnblockTime+0x3c>)
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	20000b74 	.word	0x20000b74
 80040d8:	20000bdc 	.word	0x20000bdc

080040dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <xTaskGetSchedulerState+0x34>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040ea:	2301      	movs	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	e008      	b.n	8004102 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f0:	4b08      	ldr	r3, [pc, #32]	; (8004114 <xTaskGetSchedulerState+0x38>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040f8:	2302      	movs	r3, #2
 80040fa:	607b      	str	r3, [r7, #4]
 80040fc:	e001      	b.n	8004102 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004102:	687b      	ldr	r3, [r7, #4]
	}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20000bc8 	.word	0x20000bc8
 8004114:	20000be4 	.word	0x20000be4

08004118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d058      	beq.n	80041e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800412e:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <xTaskPriorityDisinherit+0xd4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	d00b      	beq.n	8004150 <xTaskPriorityDisinherit+0x38>
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	b672      	cpsid	i
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	b662      	cpsie	i
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e7fe      	b.n	800414e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <xTaskPriorityDisinherit+0x58>
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	b672      	cpsid	i
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	b662      	cpsie	i
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	e7fe      	b.n	800416e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004174:	1e5a      	subs	r2, r3, #1
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004182:	429a      	cmp	r2, r3
 8004184:	d02c      	beq.n	80041e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418a:	2b00      	cmp	r3, #0
 800418c:	d128      	bne.n	80041e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	3304      	adds	r3, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fc58 	bl	8002a48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <xTaskPriorityDisinherit+0xd8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d903      	bls.n	80041c0 <xTaskPriorityDisinherit+0xa8>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <xTaskPriorityDisinherit+0xd8>)
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <xTaskPriorityDisinherit+0xdc>)
 80041ce:	441a      	add	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fe fbd9 	bl	800298e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041e0:	697b      	ldr	r3, [r7, #20]
	}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200006e8 	.word	0x200006e8
 80041f0:	20000bc4 	.word	0x20000bc4
 80041f4:	200006ec 	.word	0x200006ec

080041f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004202:	4b21      	ldr	r3, [pc, #132]	; (8004288 <prvAddCurrentTaskToDelayedList+0x90>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004208:	4b20      	ldr	r3, [pc, #128]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3304      	adds	r3, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fc1a 	bl	8002a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d10a      	bne.n	8004232 <prvAddCurrentTaskToDelayedList+0x3a>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4819      	ldr	r0, [pc, #100]	; (8004290 <prvAddCurrentTaskToDelayedList+0x98>)
 800422c:	f7fe fbaf 	bl	800298e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004230:	e026      	b.n	8004280 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	429a      	cmp	r2, r3
 8004248:	d209      	bcs.n	800425e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <prvAddCurrentTaskToDelayedList+0x9c>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7fe fbbd 	bl	80029d6 <vListInsert>
}
 800425c:	e010      	b.n	8004280 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <prvAddCurrentTaskToDelayedList+0x94>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7fe fbb3 	bl	80029d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d202      	bcs.n	8004280 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800427a:	4a08      	ldr	r2, [pc, #32]	; (800429c <prvAddCurrentTaskToDelayedList+0xa4>)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000bc0 	.word	0x20000bc0
 800428c:	200006e8 	.word	0x200006e8
 8004290:	20000ba8 	.word	0x20000ba8
 8004294:	20000b78 	.word	0x20000b78
 8004298:	20000b74 	.word	0x20000b74
 800429c:	20000bdc 	.word	0x20000bdc

080042a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042aa:	f000 fb0d 	bl	80048c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <xTimerCreateTimerTask+0x84>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d021      	beq.n	80042fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042be:	1d3a      	adds	r2, r7, #4
 80042c0:	f107 0108 	add.w	r1, r7, #8
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe fb19 	bl	8002900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	9202      	str	r2, [sp, #8]
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	2302      	movs	r3, #2
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	460a      	mov	r2, r1
 80042e0:	4911      	ldr	r1, [pc, #68]	; (8004328 <xTimerCreateTimerTask+0x88>)
 80042e2:	4812      	ldr	r0, [pc, #72]	; (800432c <xTimerCreateTimerTask+0x8c>)
 80042e4:	f7ff f8d0 	bl	8003488 <xTaskCreateStatic>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <xTimerCreateTimerTask+0x90>)
 80042ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <xTimerCreateTimerTask+0x90>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80042f6:	2301      	movs	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <xTimerCreateTimerTask+0x78>
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	b672      	cpsid	i
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	b662      	cpsie	i
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	e7fe      	b.n	8004316 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8004318:	697b      	ldr	r3, [r7, #20]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000c18 	.word	0x20000c18
 8004328:	080051f8 	.word	0x080051f8
 800432c:	0800446d 	.word	0x0800446d
 8004330:	20000c1c 	.word	0x20000c1c

08004334 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <xTimerGenericCommand+0x30>
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	b672      	cpsid	i
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	b662      	cpsie	i
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	e7fe      	b.n	8004362 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <xTimerGenericCommand+0x98>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d02a      	beq.n	80043c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b05      	cmp	r3, #5
 800437c:	dc18      	bgt.n	80043b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800437e:	f7ff fead 	bl	80040dc <xTaskGetSchedulerState>
 8004382:	4603      	mov	r3, r0
 8004384:	2b02      	cmp	r3, #2
 8004386:	d109      	bne.n	800439c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004388:	4b10      	ldr	r3, [pc, #64]	; (80043cc <xTimerGenericCommand+0x98>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	f107 0110 	add.w	r1, r7, #16
 8004390:	2300      	movs	r3, #0
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	f7fe fc8c 	bl	8002cb0 <xQueueGenericSend>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24
 800439a:	e012      	b.n	80043c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <xTimerGenericCommand+0x98>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	f107 0110 	add.w	r1, r7, #16
 80043a4:	2300      	movs	r3, #0
 80043a6:	2200      	movs	r2, #0
 80043a8:	f7fe fc82 	bl	8002cb0 <xQueueGenericSend>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24
 80043ae:	e008      	b.n	80043c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <xTimerGenericCommand+0x98>)
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	f107 0110 	add.w	r1, r7, #16
 80043b8:	2300      	movs	r3, #0
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	f7fe fd7a 	bl	8002eb4 <xQueueGenericSendFromISR>
 80043c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3728      	adds	r7, #40	; 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000c18 	.word	0x20000c18

080043d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <prvProcessExpiredTimer+0x98>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe fb2d 	bl	8002a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d023      	beq.n	8004444 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	18d1      	adds	r1, r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	6978      	ldr	r0, [r7, #20]
 800440a:	f000 f8d3 	bl	80045b4 <prvInsertTimerInActiveList>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	2100      	movs	r1, #0
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff ff88 	bl	8004334 <xTimerGenericCommand>
 8004424:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d114      	bne.n	8004456 <prvProcessExpiredTimer+0x86>
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	b672      	cpsid	i
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	b662      	cpsie	i
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e7fe      	b.n	8004442 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	b2da      	uxtb	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	6978      	ldr	r0, [r7, #20]
 800445c:	4798      	blx	r3
}
 800445e:	bf00      	nop
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000c10 	.word	0x20000c10

0800446c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004474:	f107 0308 	add.w	r3, r7, #8
 8004478:	4618      	mov	r0, r3
 800447a:	f000 f857 	bl	800452c <prvGetNextExpireTime>
 800447e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4619      	mov	r1, r3
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f803 	bl	8004490 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800448a:	f000 f8d5 	bl	8004638 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800448e:	e7f1      	b.n	8004474 <prvTimerTask+0x8>

08004490 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800449a:	f7ff fa39 	bl	8003910 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f866 	bl	8004574 <prvSampleTimeNow>
 80044a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d130      	bne.n	8004512 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <prvProcessTimerOrBlockTask+0x3c>
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d806      	bhi.n	80044cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044be:	f7ff fa35 	bl	800392c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff83 	bl	80043d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044ca:	e024      	b.n	8004516 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <prvProcessTimerOrBlockTask+0x90>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <prvProcessTimerOrBlockTask+0x50>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <prvProcessTimerOrBlockTask+0x52>
 80044e0:	2300      	movs	r3, #0
 80044e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044e4:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <prvProcessTimerOrBlockTask+0x94>)
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4619      	mov	r1, r3
 80044f2:	f7fe ff95 	bl	8003420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80044f6:	f7ff fa19 	bl	800392c <xTaskResumeAll>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <prvProcessTimerOrBlockTask+0x98>)
 8004502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
}
 8004510:	e001      	b.n	8004516 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004512:	f7ff fa0b 	bl	800392c <xTaskResumeAll>
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000c14 	.word	0x20000c14
 8004524:	20000c18 	.word	0x20000c18
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <prvGetNextExpireTime+0x44>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <prvGetNextExpireTime+0x16>
 800453e:	2201      	movs	r2, #1
 8004540:	e000      	b.n	8004544 <prvGetNextExpireTime+0x18>
 8004542:	2200      	movs	r2, #0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <prvGetNextExpireTime+0x44>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e001      	b.n	8004560 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004560:	68fb      	ldr	r3, [r7, #12]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000c10 	.word	0x20000c10

08004574 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800457c:	f7ff fa74 	bl	8003a68 <xTaskGetTickCount>
 8004580:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <prvSampleTimeNow+0x3c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d205      	bcs.n	8004598 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800458c:	f000 f936 	bl	80047fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e002      	b.n	800459e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800459e:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <prvSampleTimeNow+0x3c>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045a4:	68fb      	ldr	r3, [r7, #12]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000c20 	.word	0x20000c20

080045b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d812      	bhi.n	8004600 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	1ad2      	subs	r2, r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d302      	bcc.n	80045ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e01b      	b.n	8004626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80045ee:	4b10      	ldr	r3, [pc, #64]	; (8004630 <prvInsertTimerInActiveList+0x7c>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7fe f9ec 	bl	80029d6 <vListInsert>
 80045fe:	e012      	b.n	8004626 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d206      	bcs.n	8004616 <prvInsertTimerInActiveList+0x62>
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	e007      	b.n	8004626 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <prvInsertTimerInActiveList+0x80>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f7fe f9d8 	bl	80029d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004626:	697b      	ldr	r3, [r7, #20]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000c14 	.word	0x20000c14
 8004634:	20000c10 	.word	0x20000c10

08004638 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800463e:	e0cc      	b.n	80047da <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	da19      	bge.n	800467a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	3304      	adds	r3, #4
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <prvProcessReceivedCommands+0x32>
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	b672      	cpsid	i
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	b662      	cpsie	i
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	e7fe      	b.n	8004668 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004670:	6850      	ldr	r0, [r2, #4]
 8004672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004674:	6892      	ldr	r2, [r2, #8]
 8004676:	4611      	mov	r1, r2
 8004678:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f2c0 80ab 	blt.w	80047d8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	3304      	adds	r3, #4
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe f9d8 	bl	8002a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004698:	463b      	mov	r3, r7
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff6a 	bl	8004574 <prvSampleTimeNow>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b09      	cmp	r3, #9
 80046a6:	f200 8098 	bhi.w	80047da <prvProcessReceivedCommands+0x1a2>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <prvProcessReceivedCommands+0x78>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046d9 	.word	0x080046d9
 80046bc:	0800474f 	.word	0x0800474f
 80046c0:	08004763 	.word	0x08004763
 80046c4:	080047af 	.word	0x080047af
 80046c8:	080046d9 	.word	0x080046d9
 80046cc:	080046d9 	.word	0x080046d9
 80046d0:	0800474f 	.word	0x0800474f
 80046d4:	08004763 	.word	0x08004763
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	18d1      	adds	r1, r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f8:	f7ff ff5c 	bl	80045b4 <prvInsertTimerInActiveList>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d06b      	beq.n	80047da <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004708:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d060      	beq.n	80047da <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	441a      	add	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2300      	movs	r3, #0
 8004726:	2100      	movs	r1, #0
 8004728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472a:	f7ff fe03 	bl	8004334 <xTimerGenericCommand>
 800472e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d151      	bne.n	80047da <prvProcessReceivedCommands+0x1a2>
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	b672      	cpsid	i
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	b662      	cpsie	i
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	e7fe      	b.n	800474c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	b2da      	uxtb	r2, r3
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004760:	e03b      	b.n	80047da <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	b2da      	uxtb	r2, r3
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <prvProcessReceivedCommands+0x162>
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	b672      	cpsid	i
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	b662      	cpsie	i
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e7fe      	b.n	8004798 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	18d1      	adds	r1, r2, r3
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a8:	f7ff ff04 	bl	80045b4 <prvInsertTimerInActiveList>
					break;
 80047ac:	e015      	b.n	80047da <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80047bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047be:	f000 fbb5 	bl	8004f2c <vPortFree>
 80047c2:	e00a      	b.n	80047da <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047d6:	e000      	b.n	80047da <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80047d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <prvProcessReceivedCommands+0x1c0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	1d39      	adds	r1, r7, #4
 80047e0:	2200      	movs	r2, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe fc02 	bl	8002fec <xQueueReceive>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f47f af28 	bne.w	8004640 <prvProcessReceivedCommands+0x8>
	}
}
 80047f0:	bf00      	nop
 80047f2:	3730      	adds	r7, #48	; 0x30
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000c18 	.word	0x20000c18

080047fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004802:	e049      	b.n	8004898 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004804:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <prvSwitchTimerLists+0xc4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480e:	4b2c      	ldr	r3, [pc, #176]	; (80048c0 <prvSwitchTimerLists+0xc4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3304      	adds	r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe f913 	bl	8002a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02f      	beq.n	8004898 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d90e      	bls.n	8004868 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004856:	4b1a      	ldr	r3, [pc, #104]	; (80048c0 <prvSwitchTimerLists+0xc4>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fe f8b8 	bl	80029d6 <vListInsert>
 8004866:	e017      	b.n	8004898 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004868:	2300      	movs	r3, #0
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2300      	movs	r3, #0
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	2100      	movs	r1, #0
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff fd5e 	bl	8004334 <xTimerGenericCommand>
 8004878:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <prvSwitchTimerLists+0x9c>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	b672      	cpsid	i
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	b662      	cpsie	i
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	e7fe      	b.n	8004896 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <prvSwitchTimerLists+0xc4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1b0      	bne.n	8004804 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <prvSwitchTimerLists+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <prvSwitchTimerLists+0xc8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <prvSwitchTimerLists+0xc4>)
 80048ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048b0:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <prvSwitchTimerLists+0xc8>)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000c10 	.word	0x20000c10
 80048c4:	20000c14 	.word	0x20000c14

080048c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048ce:	f000 f943 	bl	8004b58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <prvCheckForValidListAndQueue+0x60>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d120      	bne.n	800491c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048da:	4814      	ldr	r0, [pc, #80]	; (800492c <prvCheckForValidListAndQueue+0x64>)
 80048dc:	f7fe f82a 	bl	8002934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048e0:	4813      	ldr	r0, [pc, #76]	; (8004930 <prvCheckForValidListAndQueue+0x68>)
 80048e2:	f7fe f827 	bl	8002934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048e6:	4b13      	ldr	r3, [pc, #76]	; (8004934 <prvCheckForValidListAndQueue+0x6c>)
 80048e8:	4a10      	ldr	r2, [pc, #64]	; (800492c <prvCheckForValidListAndQueue+0x64>)
 80048ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <prvCheckForValidListAndQueue+0x70>)
 80048ee:	4a10      	ldr	r2, [pc, #64]	; (8004930 <prvCheckForValidListAndQueue+0x68>)
 80048f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048f2:	2300      	movs	r3, #0
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <prvCheckForValidListAndQueue+0x74>)
 80048f8:	4a11      	ldr	r2, [pc, #68]	; (8004940 <prvCheckForValidListAndQueue+0x78>)
 80048fa:	2110      	movs	r1, #16
 80048fc:	200a      	movs	r0, #10
 80048fe:	f7fe f937 	bl	8002b70 <xQueueGenericCreateStatic>
 8004902:	4602      	mov	r2, r0
 8004904:	4b08      	ldr	r3, [pc, #32]	; (8004928 <prvCheckForValidListAndQueue+0x60>)
 8004906:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <prvCheckForValidListAndQueue+0x60>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <prvCheckForValidListAndQueue+0x60>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	490b      	ldr	r1, [pc, #44]	; (8004944 <prvCheckForValidListAndQueue+0x7c>)
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fd5a 	bl	80033d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800491c:	f000 f94e 	bl	8004bbc <vPortExitCritical>
}
 8004920:	bf00      	nop
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000c18 	.word	0x20000c18
 800492c:	20000be8 	.word	0x20000be8
 8004930:	20000bfc 	.word	0x20000bfc
 8004934:	20000c10 	.word	0x20000c10
 8004938:	20000c14 	.word	0x20000c14
 800493c:	20000cc4 	.word	0x20000cc4
 8004940:	20000c24 	.word	0x20000c24
 8004944:	08005200 	.word	0x08005200

08004948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b04      	subs	r3, #4
 8004958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b04      	subs	r3, #4
 8004966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3b04      	subs	r3, #4
 8004976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004978:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <pxPortInitialiseStack+0x64>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3b14      	subs	r3, #20
 8004982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b04      	subs	r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f06f 0202 	mvn.w	r2, #2
 8004996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b20      	subs	r3, #32
 800499c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	080049b1 	.word	0x080049b1

080049b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <prvTaskExitError+0x58>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d00b      	beq.n	80049dc <prvTaskExitError+0x2c>
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	b672      	cpsid	i
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	b662      	cpsie	i
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e7fe      	b.n	80049da <prvTaskExitError+0x2a>
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	b672      	cpsid	i
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	b662      	cpsie	i
 80049f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049f2:	bf00      	nop
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0fc      	beq.n	80049f4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c
 8004a0c:	00000000 	.word	0x00000000

08004a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <pxCurrentTCBConst2>)
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	6808      	ldr	r0, [r1, #0]
 8004a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	f380 8809 	msr	PSP, r0
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8811 	msr	BASEPRI, r0
 8004a2a:	4770      	bx	lr
 8004a2c:	f3af 8000 	nop.w

08004a30 <pxCurrentTCBConst2>:
 8004a30:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop

08004a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a38:	4808      	ldr	r0, [pc, #32]	; (8004a5c <prvPortStartFirstTask+0x24>)
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	6800      	ldr	r0, [r0, #0]
 8004a3e:	f380 8808 	msr	MSP, r0
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8814 	msr	CONTROL, r0
 8004a4a:	b662      	cpsie	i
 8004a4c:	b661      	cpsie	f
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	df00      	svc	0
 8004a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed08 	.word	0xe000ed08

08004a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a66:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <xPortStartScheduler+0xe0>)
 8004a68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	22ff      	movs	r2, #255	; 0xff
 8004a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <xPortStartScheduler+0xe4>)
 8004a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a8e:	4b2e      	ldr	r3, [pc, #184]	; (8004b48 <xPortStartScheduler+0xe8>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a94:	e009      	b.n	8004aaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a96:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <xPortStartScheduler+0xe8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <xPortStartScheduler+0xe8>)
 8004a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b80      	cmp	r3, #128	; 0x80
 8004ab4:	d0ef      	beq.n	8004a96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ab6:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <xPortStartScheduler+0xe8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1c3 0307 	rsb	r3, r3, #7
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d00b      	beq.n	8004ada <xPortStartScheduler+0x7a>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	b672      	cpsid	i
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	b662      	cpsie	i
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	e7fe      	b.n	8004ad8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <xPortStartScheduler+0xe8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	4a19      	ldr	r2, [pc, #100]	; (8004b48 <xPortStartScheduler+0xe8>)
 8004ae2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <xPortStartScheduler+0xe8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aec:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <xPortStartScheduler+0xe8>)
 8004aee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004af8:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <xPortStartScheduler+0xec>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <xPortStartScheduler+0xec>)
 8004afe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b02:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <xPortStartScheduler+0xec>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <xPortStartScheduler+0xec>)
 8004b0a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b0e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b10:	f000 f8d4 	bl	8004cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <xPortStartScheduler+0xf0>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b1a:	f000 f8f3 	bl	8004d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <xPortStartScheduler+0xf4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <xPortStartScheduler+0xf4>)
 8004b24:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b28:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b2a:	f7ff ff85 	bl	8004a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b2e:	f7ff f865 	bl	8003bfc <vTaskSwitchContext>
	prvTaskExitError();
 8004b32:	f7ff ff3d 	bl	80049b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	e000e400 	.word	0xe000e400
 8004b44:	20000d14 	.word	0x20000d14
 8004b48:	20000d18 	.word	0x20000d18
 8004b4c:	e000ed20 	.word	0xe000ed20
 8004b50:	2000000c 	.word	0x2000000c
 8004b54:	e000ef34 	.word	0xe000ef34

08004b58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	b672      	cpsid	i
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	b662      	cpsie	i
 8004b72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <vPortEnterCritical+0x5c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <vPortEnterCritical+0x5c>)
 8004b7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <vPortEnterCritical+0x5c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d110      	bne.n	8004ba8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <vPortEnterCritical+0x60>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <vPortEnterCritical+0x50>
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	b672      	cpsid	i
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	b662      	cpsie	i
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	e7fe      	b.n	8004ba6 <vPortEnterCritical+0x4e>
	}
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	2000000c 	.word	0x2000000c
 8004bb8:	e000ed04 	.word	0xe000ed04

08004bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <vPortExitCritical+0x50>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <vPortExitCritical+0x26>
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	b672      	cpsid	i
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	b662      	cpsie	i
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	e7fe      	b.n	8004be0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <vPortExitCritical+0x50>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <vPortExitCritical+0x50>)
 8004bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <vPortExitCritical+0x50>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <vPortExitCritical+0x42>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	2000000c 	.word	0x2000000c

08004c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c10:	f3ef 8009 	mrs	r0, PSP
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <pxCurrentTCBConst>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f01e 0f10 	tst.w	lr, #16
 8004c20:	bf08      	it	eq
 8004c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	6010      	str	r0, [r2, #0]
 8004c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c34:	b672      	cpsid	i
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	b662      	cpsie	i
 8004c44:	f7fe ffda 	bl	8003bfc <vTaskSwitchContext>
 8004c48:	f04f 0000 	mov.w	r0, #0
 8004c4c:	f380 8811 	msr	BASEPRI, r0
 8004c50:	bc09      	pop	{r0, r3}
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	f01e 0f10 	tst.w	lr, #16
 8004c5e:	bf08      	it	eq
 8004c60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c64:	f380 8809 	msr	PSP, r0
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop

08004c70 <pxCurrentTCBConst>:
 8004c70:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	b672      	cpsid	i
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	b662      	cpsie	i
 8004c92:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c94:	f7fe fef8 	bl	8003a88 <xTaskIncrementTick>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <SysTick_Handler+0x40>)
 8004ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <vPortSetupTimerInterrupt+0x34>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <vPortSetupTimerInterrupt+0x38>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vPortSetupTimerInterrupt+0x3c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <vPortSetupTimerInterrupt+0x40>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <vPortSetupTimerInterrupt+0x44>)
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <vPortSetupTimerInterrupt+0x34>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	e000e010 	.word	0xe000e010
 8004cf4:	e000e018 	.word	0xe000e018
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	10624dd3 	.word	0x10624dd3
 8004d00:	e000e014 	.word	0xe000e014

08004d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d14 <vPortEnableVFP+0x10>
 8004d08:	6801      	ldr	r1, [r0, #0]
 8004d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d0e:	6001      	str	r1, [r0, #0]
 8004d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d12:	bf00      	nop
 8004d14:	e000ed88 	.word	0xe000ed88

08004d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d1e:	f3ef 8305 	mrs	r3, IPSR
 8004d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b0f      	cmp	r3, #15
 8004d28:	d915      	bls.n	8004d56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <vPortValidateInterruptPriority+0x74>)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d34:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <vPortValidateInterruptPriority+0x78>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	7afa      	ldrb	r2, [r7, #11]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d20b      	bcs.n	8004d56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	b672      	cpsid	i
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	b662      	cpsie	i
 8004d52:	607b      	str	r3, [r7, #4]
 8004d54:	e7fe      	b.n	8004d54 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d56:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <vPortValidateInterruptPriority+0x7c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d5e:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <vPortValidateInterruptPriority+0x80>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d90b      	bls.n	8004d7e <vPortValidateInterruptPriority+0x66>
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	b672      	cpsid	i
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	b662      	cpsie	i
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	e7fe      	b.n	8004d7c <vPortValidateInterruptPriority+0x64>
	}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	e000e3f0 	.word	0xe000e3f0
 8004d90:	20000d14 	.word	0x20000d14
 8004d94:	e000ed0c 	.word	0xe000ed0c
 8004d98:	20000d18 	.word	0x20000d18

08004d9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004da8:	f7fe fdb2 	bl	8003910 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dac:	4b5a      	ldr	r3, [pc, #360]	; (8004f18 <pvPortMalloc+0x17c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004db4:	f000 f916 	bl	8004fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004db8:	4b58      	ldr	r3, [pc, #352]	; (8004f1c <pvPortMalloc+0x180>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 8090 	bne.w	8004ee6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01e      	beq.n	8004e0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004dcc:	2208      	movs	r2, #8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d015      	beq.n	8004e0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f023 0307 	bic.w	r3, r3, #7
 8004de4:	3308      	adds	r3, #8
 8004de6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <pvPortMalloc+0x6e>
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	b672      	cpsid	i
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	b662      	cpsie	i
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e7fe      	b.n	8004e08 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d06a      	beq.n	8004ee6 <pvPortMalloc+0x14a>
 8004e10:	4b43      	ldr	r3, [pc, #268]	; (8004f20 <pvPortMalloc+0x184>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d865      	bhi.n	8004ee6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e1a:	4b42      	ldr	r3, [pc, #264]	; (8004f24 <pvPortMalloc+0x188>)
 8004e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e1e:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <pvPortMalloc+0x188>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e24:	e004      	b.n	8004e30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d903      	bls.n	8004e42 <pvPortMalloc+0xa6>
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f1      	bne.n	8004e26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e42:	4b35      	ldr	r3, [pc, #212]	; (8004f18 <pvPortMalloc+0x17c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d04c      	beq.n	8004ee6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2208      	movs	r2, #8
 8004e52:	4413      	add	r3, r2
 8004e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	1ad2      	subs	r2, r2, r3
 8004e66:	2308      	movs	r3, #8
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d920      	bls.n	8004eb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00b      	beq.n	8004e98 <pvPortMalloc+0xfc>
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	b672      	cpsid	i
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	b662      	cpsie	i
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	e7fe      	b.n	8004e96 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eaa:	69b8      	ldr	r0, [r7, #24]
 8004eac:	f000 f8fc 	bl	80050a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <pvPortMalloc+0x184>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <pvPortMalloc+0x184>)
 8004ebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ebe:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <pvPortMalloc+0x184>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <pvPortMalloc+0x18c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d203      	bcs.n	8004ed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <pvPortMalloc+0x184>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a16      	ldr	r2, [pc, #88]	; (8004f28 <pvPortMalloc+0x18c>)
 8004ed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <pvPortMalloc+0x180>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ee6:	f7fe fd21 	bl	800392c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00b      	beq.n	8004f0c <pvPortMalloc+0x170>
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	b672      	cpsid	i
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	b662      	cpsie	i
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	e7fe      	b.n	8004f0a <pvPortMalloc+0x16e>
	return pvReturn;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3728      	adds	r7, #40	; 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20004924 	.word	0x20004924
 8004f1c:	20004930 	.word	0x20004930
 8004f20:	20004928 	.word	0x20004928
 8004f24:	2000491c 	.word	0x2000491c
 8004f28:	2000492c 	.word	0x2000492c

08004f2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d04a      	beq.n	8004fd4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f3e:	2308      	movs	r3, #8
 8004f40:	425b      	negs	r3, r3
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <vPortFree+0xb0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4013      	ands	r3, r2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <vPortFree+0x46>
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	b672      	cpsid	i
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	b662      	cpsie	i
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e7fe      	b.n	8004f70 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <vPortFree+0x66>
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	b672      	cpsid	i
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	b662      	cpsie	i
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	e7fe      	b.n	8004f90 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	4b11      	ldr	r3, [pc, #68]	; (8004fdc <vPortFree+0xb0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d019      	beq.n	8004fd4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d115      	bne.n	8004fd4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <vPortFree+0xb0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fb8:	f7fe fcaa 	bl	8003910 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <vPortFree+0xb4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	4a06      	ldr	r2, [pc, #24]	; (8004fe0 <vPortFree+0xb4>)
 8004fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fca:	6938      	ldr	r0, [r7, #16]
 8004fcc:	f000 f86c 	bl	80050a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fd0:	f7fe fcac 	bl	800392c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fd4:	bf00      	nop
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20004930 	.word	0x20004930
 8004fe0:	20004928 	.word	0x20004928

08004fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ff0:	4b27      	ldr	r3, [pc, #156]	; (8005090 <prvHeapInit+0xac>)
 8004ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3307      	adds	r3, #7
 8005002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0307 	bic.w	r3, r3, #7
 800500a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <prvHeapInit+0xac>)
 8005014:	4413      	add	r3, r2
 8005016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <prvHeapInit+0xb0>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005022:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <prvHeapInit+0xb0>)
 8005024:	2200      	movs	r2, #0
 8005026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	4413      	add	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005030:	2208      	movs	r2, #8
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0307 	bic.w	r3, r3, #7
 800503e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a15      	ldr	r2, [pc, #84]	; (8005098 <prvHeapInit+0xb4>)
 8005044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <prvHeapInit+0xb4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <prvHeapInit+0xb4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <prvHeapInit+0xb4>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <prvHeapInit+0xb8>)
 8005072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <prvHeapInit+0xbc>)
 800507a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <prvHeapInit+0xc0>)
 800507e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	20000d1c 	.word	0x20000d1c
 8005094:	2000491c 	.word	0x2000491c
 8005098:	20004924 	.word	0x20004924
 800509c:	2000492c 	.word	0x2000492c
 80050a0:	20004928 	.word	0x20004928
 80050a4:	20004930 	.word	0x20004930

080050a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050b0:	4b28      	ldr	r3, [pc, #160]	; (8005154 <prvInsertBlockIntoFreeList+0xac>)
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e002      	b.n	80050bc <prvInsertBlockIntoFreeList+0x14>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d8f7      	bhi.n	80050b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4413      	add	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d108      	bne.n	80050ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	441a      	add	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	441a      	add	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d118      	bne.n	8005130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b15      	ldr	r3, [pc, #84]	; (8005158 <prvInsertBlockIntoFreeList+0xb0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d00d      	beq.n	8005126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	441a      	add	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e008      	b.n	8005138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005126:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <prvInsertBlockIntoFreeList+0xb0>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e003      	b.n	8005138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d002      	beq.n	8005146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	2000491c 	.word	0x2000491c
 8005158:	20004924 	.word	0x20004924

0800515c <__libc_init_array>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	4e0d      	ldr	r6, [pc, #52]	; (8005194 <__libc_init_array+0x38>)
 8005160:	4c0d      	ldr	r4, [pc, #52]	; (8005198 <__libc_init_array+0x3c>)
 8005162:	1ba4      	subs	r4, r4, r6
 8005164:	10a4      	asrs	r4, r4, #2
 8005166:	2500      	movs	r5, #0
 8005168:	42a5      	cmp	r5, r4
 800516a:	d109      	bne.n	8005180 <__libc_init_array+0x24>
 800516c:	4e0b      	ldr	r6, [pc, #44]	; (800519c <__libc_init_array+0x40>)
 800516e:	4c0c      	ldr	r4, [pc, #48]	; (80051a0 <__libc_init_array+0x44>)
 8005170:	f000 f82c 	bl	80051cc <_init>
 8005174:	1ba4      	subs	r4, r4, r6
 8005176:	10a4      	asrs	r4, r4, #2
 8005178:	2500      	movs	r5, #0
 800517a:	42a5      	cmp	r5, r4
 800517c:	d105      	bne.n	800518a <__libc_init_array+0x2e>
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005184:	4798      	blx	r3
 8005186:	3501      	adds	r5, #1
 8005188:	e7ee      	b.n	8005168 <__libc_init_array+0xc>
 800518a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800518e:	4798      	blx	r3
 8005190:	3501      	adds	r5, #1
 8005192:	e7f2      	b.n	800517a <__libc_init_array+0x1e>
 8005194:	0800524c 	.word	0x0800524c
 8005198:	0800524c 	.word	0x0800524c
 800519c:	0800524c 	.word	0x0800524c
 80051a0:	08005250 	.word	0x08005250

080051a4 <memcpy>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	1e43      	subs	r3, r0, #1
 80051a8:	440a      	add	r2, r1
 80051aa:	4291      	cmp	r1, r2
 80051ac:	d100      	bne.n	80051b0 <memcpy+0xc>
 80051ae:	bd10      	pop	{r4, pc}
 80051b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051b8:	e7f7      	b.n	80051aa <memcpy+0x6>

080051ba <memset>:
 80051ba:	4402      	add	r2, r0
 80051bc:	4603      	mov	r3, r0
 80051be:	4293      	cmp	r3, r2
 80051c0:	d100      	bne.n	80051c4 <memset+0xa>
 80051c2:	4770      	bx	lr
 80051c4:	f803 1b01 	strb.w	r1, [r3], #1
 80051c8:	e7f9      	b.n	80051be <memset+0x4>
	...

080051cc <_init>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	bf00      	nop
 80051d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d2:	bc08      	pop	{r3}
 80051d4:	469e      	mov	lr, r3
 80051d6:	4770      	bx	lr

080051d8 <_fini>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	bf00      	nop
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr
