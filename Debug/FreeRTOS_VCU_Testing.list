
FreeRTOS_VCU_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dbc  08005dbc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc4  08005dc4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc4  08005dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a54  20000010  08005ddc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20004a64  08005ddc  00024a64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed4d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038d3  00000000  00000000  0003ed8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  00042660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001248  00000000  00000000  00043a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a6f7  00000000  00000000  00044c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012cae  00000000  00000000  0006f37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010106e  00000000  00000000  0008202d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018309b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d4  00000000  00000000  00183118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08005cd8 	.word	0x08005cd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08005cd8 	.word	0x08005cd8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <s8CANInit>:
static int8_t s8CANFilterInit(void);
static void vCANSetStatusLED(const int8_t cs8CANStatus);


int8_t s8CANInit(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
   int8_t s8ErrorHandle = CAN_OKAY;
 8000546:	2300      	movs	r3, #0
 8000548:	71fb      	strb	r3, [r7, #7]

   if(CAN_ERROR == s8CANGeneralInit())
 800054a:	f000 f88d 	bl	8000668 <s8CANGeneralInit>
 800054e:	4603      	mov	r3, r0
 8000550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000554:	d101      	bne.n	800055a <s8CANInit+0x1a>
   {
      s8ErrorHandle = CAN_ERROR;
 8000556:	23ff      	movs	r3, #255	; 0xff
 8000558:	71fb      	strb	r3, [r7, #7]
   }

   if(CAN_ERROR == s8CANTxInit())
 800055a:	f000 f8a3 	bl	80006a4 <s8CANTxInit>
 800055e:	4603      	mov	r3, r0
 8000560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000564:	d101      	bne.n	800056a <s8CANInit+0x2a>
   {
      s8ErrorHandle = CAN_ERROR;
 8000566:	23ff      	movs	r3, #255	; 0xff
 8000568:	71fb      	strb	r3, [r7, #7]
   }

   if(CAN_ERROR == s8CANFilterInit())
 800056a:	f000 f8b5 	bl	80006d8 <s8CANFilterInit>
 800056e:	4603      	mov	r3, r0
 8000570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000574:	d101      	bne.n	800057a <s8CANInit+0x3a>
   {
      s8ErrorHandle = CAN_ERROR;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	71fb      	strb	r3, [r7, #7]
   }

   vCANSetStatusLED(s8ErrorHandle);
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f8d8 	bl	8000734 <vCANSetStatusLED>

   return s8ErrorHandle;
 8000584:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <s8CANSendMessage>:


int8_t s8CANSendMessage(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
   int8_t s8ErrorHandle = CAN_OKAY;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]

   if(HAL_OK != HAL_CAN_AddTxMessage(&hcan1, &xCANTxHeader, (uint8_t*) cau8TxData, &u32CANTxBufferNumber))
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <s8CANSendMessage+0x38>)
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <s8CANSendMessage+0x3c>)
 800059e:	490c      	ldr	r1, [pc, #48]	; (80005d0 <s8CANSendMessage+0x40>)
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <s8CANSendMessage+0x44>)
 80005a2:	f000 fe49 	bl	8001238 <HAL_CAN_AddTxMessage>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <s8CANSendMessage+0x20>
   {
      s8ErrorHandle = CAN_ERROR;
 80005ac:	23ff      	movs	r3, #255	; 0xff
 80005ae:	71fb      	strb	r3, [r7, #7]
   }

   vCANSetStatusLED(s8ErrorHandle);
 80005b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f8bd 	bl	8000734 <vCANSetStatusLED>

   return s8ErrorHandle;
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	08005d34 	.word	0x08005d34
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	200049a0 	.word	0x200049a0

080005d8 <s8CANReceiveMessage>:


int8_t s8CANReceiveMessage(uint8_t* const pu8Data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
   int8_t s8ErrorHandle = CAN_OKAY;
 80005e0:	2300      	movs	r3, #0
 80005e2:	73fb      	strb	r3, [r7, #15]
   uint8_t* pu8ReceiveBuffer = au8RxData;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <s8CANReceiveMessage+0x7c>)
 80005e6:	60bb      	str	r3, [r7, #8]

   if(NULL != pu8Data)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <s8CANReceiveMessage+0x1a>
   {
      pu8ReceiveBuffer = pu8Data;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60bb      	str	r3, [r7, #8]
   }

   if(HAL_OK != HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &xCANRxHeader, pu8ReceiveBuffer))
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <s8CANReceiveMessage+0x80>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4818      	ldr	r0, [pc, #96]	; (800065c <s8CANReceiveMessage+0x84>)
 80005fa:	f000 fef8 	bl	80013ee <HAL_CAN_GetRxMessage>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <s8CANReceiveMessage+0x32>
   {
      s8ErrorHandle = CAN_ERROR;
 8000604:	23ff      	movs	r3, #255	; 0xff
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e019      	b.n	800063e <s8CANReceiveMessage+0x66>
   }
   else
   {
      if(0u == memcmp(cau8TxData, pu8ReceiveBuffer, CAN_BUFFER_SIZE))
 800060a:	2204      	movs	r2, #4
 800060c:	68b9      	ldr	r1, [r7, #8]
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <s8CANReceiveMessage+0x88>)
 8000610:	f005 fb40 	bl	8005c94 <memcmp>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d105      	bne.n	8000626 <s8CANReceiveMessage+0x4e>
      {
         au32CANDataValidationCounters[CAN_INDEX_MESSAGE_VALID]++;
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <s8CANReceiveMessage+0x8c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3301      	adds	r3, #1
 8000620:	4a10      	ldr	r2, [pc, #64]	; (8000664 <s8CANReceiveMessage+0x8c>)
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	e006      	b.n	8000634 <s8CANReceiveMessage+0x5c>
      }
      else
      {
         au32CANDataValidationCounters[CAN_INDEX_MESSAGE_INVALID]++;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <s8CANReceiveMessage+0x8c>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <s8CANReceiveMessage+0x8c>)
 800062e:	6053      	str	r3, [r2, #4]
         s8ErrorHandle = CAN_ERROR;
 8000630:	23ff      	movs	r3, #255	; 0xff
 8000632:	73fb      	strb	r3, [r7, #15]
      }

      memset(au8RxData, 0u, CAN_BUFFER_SIZE);
 8000634:	2204      	movs	r2, #4
 8000636:	2100      	movs	r1, #0
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <s8CANReceiveMessage+0x7c>)
 800063a:	f005 fb45 	bl	8005cc8 <memset>
   }

   vCANSetStatusLED(s8ErrorHandle);
 800063e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f876 	bl	8000734 <vCANSetStatusLED>

   return s8ErrorHandle;
 8000648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000094 	.word	0x20000094
 8000658:	20000044 	.word	0x20000044
 800065c:	200049a0 	.word	0x200049a0
 8000660:	08005d34 	.word	0x08005d34
 8000664:	2000008c 	.word	0x2000008c

08000668 <s8CANGeneralInit>:


static int8_t s8CANGeneralInit(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
   int8_t s8ErrorHandle = CAN_OKAY;
 800066e:	2300      	movs	r3, #0
 8000670:	71fb      	strb	r3, [r7, #7]

   if(HAL_OK != HAL_CAN_Start(&hcan1))
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <s8CANGeneralInit+0x38>)
 8000674:	f000 fd9c 	bl	80011b0 <HAL_CAN_Start>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <s8CANGeneralInit+0x1a>
   {
      s8ErrorHandle = CAN_ERROR;
 800067e:	23ff      	movs	r3, #255	; 0xff
 8000680:	71fb      	strb	r3, [r7, #7]
   }

   if(HAL_OK != HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8000682:	2102      	movs	r1, #2
 8000684:	4806      	ldr	r0, [pc, #24]	; (80006a0 <s8CANGeneralInit+0x38>)
 8000686:	f000 ffc4 	bl	8001612 <HAL_CAN_ActivateNotification>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <s8CANGeneralInit+0x2c>
   {
      s8ErrorHandle = CAN_ERROR;
 8000690:	23ff      	movs	r3, #255	; 0xff
 8000692:	71fb      	strb	r3, [r7, #7]
   }

   return s8ErrorHandle;
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200049a0 	.word	0x200049a0

080006a4 <s8CANTxInit>:

static int8_t s8CANTxInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
   xCANTxHeader.IDE = CAN_ID_STD;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <s8CANTxInit+0x30>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
   xCANTxHeader.StdId = cu32TxId;
 80006ae:	2200      	movs	r2, #0
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <s8CANTxInit+0x30>)
 80006b2:	601a      	str	r2, [r3, #0]
   xCANTxHeader.RTR = CAN_RTR_DATA;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <s8CANTxInit+0x30>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
   xCANTxHeader.DLC = CAN_BUFFER_SIZE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <s8CANTxInit+0x30>)
 80006bc:	2204      	movs	r2, #4
 80006be:	611a      	str	r2, [r3, #16]
   xCANTxHeader.TransmitGlobalTime = DISABLE;
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <s8CANTxInit+0x30>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	751a      	strb	r2, [r3, #20]

   return CAN_OKAY;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000002c 	.word	0x2000002c

080006d8 <s8CANFilterInit>:


static int8_t s8CANFilterInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
   int8_t s8ErrorHandle = CAN_OKAY;
 80006de:	2300      	movs	r3, #0
 80006e0:	71fb      	strb	r3, [r7, #7]

   xCANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <s8CANFilterInit+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
   xCANFilter.FilterIdHigh = 1u<<5u;//cu32TxId << 5u;
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <s8CANFilterInit+0x54>)
 80006ea:	2220      	movs	r2, #32
 80006ec:	601a      	str	r2, [r3, #0]
   xCANFilter.FilterIdLow = 0u;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <s8CANFilterInit+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
   xCANFilter.FilterMaskIdHigh = 0u;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <s8CANFilterInit+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
   xCANFilter.FilterMaskIdLow = 0u;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <s8CANFilterInit+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
   xCANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <s8CANFilterInit+0x54>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
   xCANFilter.FilterActivation = CAN_FILTER_ENABLE;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <s8CANFilterInit+0x54>)
 8000708:	2201      	movs	r2, #1
 800070a:	621a      	str	r2, [r3, #32]

   if(HAL_OK != HAL_CAN_ConfigFilter(&hcan1, &xCANFilter))
 800070c:	4907      	ldr	r1, [pc, #28]	; (800072c <s8CANFilterInit+0x54>)
 800070e:	4808      	ldr	r0, [pc, #32]	; (8000730 <s8CANFilterInit+0x58>)
 8000710:	f000 fc62 	bl	8000fd8 <HAL_CAN_ConfigFilter>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <s8CANFilterInit+0x46>
   {
      s8ErrorHandle = CAN_ERROR;
 800071a:	23ff      	movs	r3, #255	; 0xff
 800071c:	71fb      	strb	r3, [r7, #7]
   }

   return s8ErrorHandle;
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000060 	.word	0x20000060
 8000730:	200049a0 	.word	0x200049a0

08000734 <vCANSetStatusLED>:


static void vCANSetStatusLED(const int8_t cs8CANStatus)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
   (CAN_OKAY == cs8CANStatus) ? vLEDStatusOkaySet() : vLEDStatusErrorSet();
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d102      	bne.n	800074c <vCANSetStatusLED+0x18>
 8000746:	f000 f807 	bl	8000758 <vLEDStatusOkaySet>
}
 800074a:	e001      	b.n	8000750 <vCANSetStatusLED+0x1c>
   (CAN_OKAY == cs8CANStatus) ? vLEDStatusOkaySet() : vLEDStatusErrorSet();
 800074c:	f000 f818 	bl	8000780 <vLEDStatusErrorSet>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <vLEDStatusOkaySet>:

#include "BFFT.h"


void vLEDStatusOkaySet(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(LED_StatusOkay_GPIO_Port, LED_StatusOkay_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <vLEDStatusOkaySet+0x20>)
 8000762:	f001 fc3b 	bl	8001fdc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_StatusError_GPIO_Port, LED_StatusError_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <vLEDStatusOkaySet+0x24>)
 800076e:	f001 fc35 	bl	8001fdc <HAL_GPIO_WritePin>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40020000 	.word	0x40020000
 800077c:	40020400 	.word	0x40020400

08000780 <vLEDStatusErrorSet>:

void vLEDStatusErrorSet(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(LED_StatusOkay_GPIO_Port, LED_StatusOkay_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2120      	movs	r1, #32
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <vLEDStatusErrorSet+0x20>)
 800078a:	f001 fc27 	bl	8001fdc <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(LED_StatusError_GPIO_Port, LED_StatusError_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <vLEDStatusErrorSet+0x24>)
 8000796:	f001 fc21 	bl	8001fdc <HAL_GPIO_WritePin>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020400 	.word	0x40020400

080007a8 <vLEDSystemAliveToggle>:

void vLEDSystemAliveToggle(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
   HAL_GPIO_TogglePin(LED_SystemAlive_GPIO_Port, LED_SystemAlive_Pin);
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <vLEDSystemAliveToggle+0x10>)
 80007b0:	f001 fc2d 	bl	800200e <HAL_GPIO_TogglePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020400 	.word	0x40020400

080007bc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_CAN1_Init+0x68>)
 80007c2:	4a19      	ldr	r2, [pc, #100]	; (8000828 <MX_CAN1_Init+0x6c>)
 80007c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 50;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_CAN1_Init+0x68>)
 80007c8:	2232      	movs	r2, #50	; 0x32
 80007ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_CAN1_Init+0x68>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_CAN1_Init+0x68>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_CAN1_Init+0x68>)
 80007dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007e0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_CAN1_Init+0x68>)
 80007e4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007e8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_CAN1_Init+0x68>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_CAN1_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_CAN1_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_CAN1_Init+0x68>)
 80007fe:	2200      	movs	r2, #0
 8000800:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_CAN1_Init+0x68>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_CAN1_Init+0x68>)
 800080a:	2200      	movs	r2, #0
 800080c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_CAN1_Init+0x68>)
 8000810:	f000 fae6 	bl	8000de0 <HAL_CAN_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800081a:	f000 f9bd 	bl	8000b98 <Error_Handler>
  }

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200049a0 	.word	0x200049a0
 8000828:	40006400 	.word	0x40006400

0800082c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <HAL_CAN_MspInit+0x9c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d137      	bne.n	80008be <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <HAL_CAN_MspInit+0xa0>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <HAL_CAN_MspInit+0xa0>)
 8000854:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_CAN_MspInit+0xa0>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_CAN_MspInit+0xa0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <HAL_CAN_MspInit+0xa0>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_CAN_MspInit+0xa0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800087e:	2303      	movs	r3, #3
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800088e:	2309      	movs	r3, #9
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <HAL_CAN_MspInit+0xa4>)
 800089a:	f001 f9f5 	bl	8001c88 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2014      	movs	r0, #20
 80008a4:	f001 f9c6 	bl	8001c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008a8:	2014      	movs	r0, #20
 80008aa:	f001 f9df 	bl	8001c6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	2015      	movs	r0, #21
 80008b4:	f001 f9be 	bl	8001c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80008b8:	2015      	movs	r0, #21
 80008ba:	f001 f9d7 	bl	8001c6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40006400 	.word	0x40006400
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020c00 	.word	0x40020c00

080008d4 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <MX_FREERTOS_Init+0x38>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_FREERTOS_Init+0x3c>)
 80008ee:	f002 fc0f 	bl	8003110 <osThreadNew>
 80008f2:	4602      	mov	r2, r0
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_FREERTOS_Init+0x40>)
 80008f6:	601a      	str	r2, [r3, #0]

  /* creation of ThreadCANSendMe */
  ThreadCANSendMeHandle = osThreadNew(vThreadCANSendMessage, NULL, &ThreadCANSendMe_attributes);
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <MX_FREERTOS_Init+0x44>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <MX_FREERTOS_Init+0x48>)
 80008fe:	f002 fc07 	bl	8003110 <osThreadNew>
 8000902:	4602      	mov	r2, r0
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_FREERTOS_Init+0x4c>)
 8000906:	601a      	str	r2, [r3, #0]

  /* creation of ThreadLEDSystem */
  ThreadLEDSystemHandle = osThreadNew(vThreadLEDSystemAlive, NULL, &ThreadLEDSystem_attributes);
 8000908:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <MX_FREERTOS_Init+0x50>)
 800090a:	2100      	movs	r1, #0
 800090c:	480a      	ldr	r0, [pc, #40]	; (8000938 <MX_FREERTOS_Init+0x54>)
 800090e:	f002 fbff 	bl	8003110 <osThreadNew>
 8000912:	4602      	mov	r2, r0
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_FREERTOS_Init+0x58>)
 8000916:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	08005d38 	.word	0x08005d38
 8000920:	08000941 	.word	0x08000941
 8000924:	200049cc 	.word	0x200049cc
 8000928:	08005d5c 	.word	0x08005d5c
 800092c:	08000951 	.word	0x08000951
 8000930:	200049c8 	.word	0x200049c8
 8000934:	08005d80 	.word	0x08005d80
 8000938:	08000973 	.word	0x08000973
 800093c:	200049d0 	.word	0x200049d0

08000940 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000948:	2001      	movs	r0, #1
 800094a:	f002 fc87 	bl	800325c <osDelay>
 800094e:	e7fb      	b.n	8000948 <StartDefaultTask+0x8>

08000950 <vThreadCANSendMessage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vThreadCANSendMessage */
void vThreadCANSendMessage(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vThreadCANSendMessage */
  /* Infinite loop */
   TickType_t xPreviousWakeTime = xTaskGetTickCount();
 8000958:	f003 fdfc 	bl	8004554 <xTaskGetTickCount>
 800095c:	4603      	mov	r3, r0
 800095e:	60fb      	str	r3, [r7, #12]

   while(1)
   {
      s8CANSendMessage();
 8000960:	f7ff fe16 	bl	8000590 <s8CANSendMessage>
      vTaskDelayUntil(&xPreviousWakeTime, 5u/portTICK_RATE_MS);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2105      	movs	r1, #5
 800096a:	4618      	mov	r0, r3
 800096c:	f003 fc28 	bl	80041c0 <vTaskDelayUntil>
      s8CANSendMessage();
 8000970:	e7f6      	b.n	8000960 <vThreadCANSendMessage+0x10>

08000972 <vThreadLEDSystemAlive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vThreadLEDSystemAlive */
void vThreadLEDSystemAlive(void *argument)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vThreadLEDSystemAlive */
  /* Infinite loop */
   TickType_t xPreviousWakeTime = xTaskGetTickCount();
 800097a:	f003 fdeb 	bl	8004554 <xTaskGetTickCount>
 800097e:	4603      	mov	r3, r0
 8000980:	60fb      	str	r3, [r7, #12]

   while(1)
   {
      vLEDSystemAliveToggle();
 8000982:	f7ff ff11 	bl	80007a8 <vLEDSystemAliveToggle>
      vTaskDelayUntil(&xPreviousWakeTime, 250u/portTICK_RATE_MS);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	21fa      	movs	r1, #250	; 0xfa
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fc17 	bl	80041c0 <vTaskDelayUntil>
      vLEDSystemAliveToggle();
 8000992:	e7f6      	b.n	8000982 <vThreadLEDSystemAlive+0x10>

08000994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a27      	ldr	r2, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xd0>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_StatusOkay_GPIO_Port, LED_StatusOkay_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4816      	ldr	r0, [pc, #88]	; (8000a68 <MX_GPIO_Init+0xd4>)
 8000a10:	f001 fae4 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_StatusError_Pin|LED_SystemAlive_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <MX_GPIO_Init+0xd8>)
 8000a1c:	f001 fade 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_StatusOkay_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_StatusOkay_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0xd4>)
 8000a38:	f001 f926 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_StatusError_Pin|LED_SystemAlive_Pin;
 8000a3c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0xd8>)
 8000a56:	f001 f917 	bl	8001c88 <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40020400 	.word	0x40020400

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a74:	f000 f987 	bl	8000d86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f80e 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f7ff ff8a 	bl	8000994 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000a80:	f7ff fe9c 	bl	80007bc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  s8CANInit();
 8000a84:	f7ff fd5c 	bl	8000540 <s8CANInit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a88:	f002 fad8 	bl	800303c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a8c:	f7ff ff2a 	bl	80008e4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a90:	f002 fb08 	bl	80030a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <main+0x24>
	...

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	; 0x50
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2234      	movs	r2, #52	; 0x34
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f005 f90e 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <SystemClock_Config+0xd4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <SystemClock_Config+0xd4>)
 8000ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <SystemClock_Config+0xd4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <SystemClock_Config+0xd8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000adc:	4a24      	ldr	r2, [pc, #144]	; (8000b70 <SystemClock_Config+0xd8>)
 8000ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <SystemClock_Config+0xd8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b08:	2364      	movs	r3, #100	; 0x64
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fae3 	bl	80020e4 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b24:	f000 f838 	bl	8000b98 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b28:	f001 fa8c 	bl	8002044 <HAL_PWREx_EnableOverDrive>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b32:	f000 f831 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2103      	movs	r1, #3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fd73 	bl	8002640 <HAL_RCC_ClockConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b60:	f000 f81a 	bl	8000b98 <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3750      	adds	r7, #80	; 0x50
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 f90b 	bl	8000da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010000 	.word	0x40010000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <Error_Handler+0x6>

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210f      	movs	r1, #15
 8000bda:	f06f 0001 	mvn.w	r0, #1
 8000bde:	f001 f829 	bl	8001c34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2019      	movs	r0, #25
 8000c06:	f001 f815 	bl	8001c34 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f001 f82e 	bl	8001c6c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <HAL_InitTick+0xa0>)
 8000c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c14:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <HAL_InitTick+0xa0>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_InitTick+0xa0>)
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c28:	f107 0210 	add.w	r2, r7, #16
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fee8 	bl	8002a08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c38:	f001 fed2 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <HAL_InitTick+0xa4>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9b      	lsrs	r3, r3, #18
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_InitTick+0xa8>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_InitTick+0xac>)
 8000c54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_InitTick+0xa8>)
 8000c58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_InitTick+0xa8>)
 8000c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <HAL_InitTick+0xa8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_InitTick+0xa8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <HAL_InitTick+0xa8>)
 8000c72:	f001 fefb 	bl	8002a6c <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d104      	bne.n	8000c86 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <HAL_InitTick+0xa8>)
 8000c7e:	f001 ff57 	bl	8002b30 <HAL_TIM_Base_Start_IT>
 8000c82:	4603      	mov	r3, r0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3730      	adds	r7, #48	; 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	431bde83 	.word	0x431bde83
 8000c98:	200049d4 	.word	0x200049d4
 8000c9c:	40010000 	.word	0x40010000

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <CAN1_RX0_IRQHandler+0x14>)
 8000cd2:	f000 fcc4 	bl	800165e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  s8CANReceiveMessage(NULL);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fc7e 	bl	80005d8 <s8CANReceiveMessage>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200049a0 	.word	0x200049a0

08000ce4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <CAN1_RX1_IRQHandler+0x14>)
 8000cea:	f000 fcb8 	bl	800165e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  s8CANReceiveMessage(NULL);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fc72 	bl	80005d8 <s8CANReceiveMessage>
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200049a0 	.word	0x200049a0

08000cfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d02:	f001 ff8d 	bl	8002c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200049d4 	.word	0x200049d4

08000d10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3a:	490e      	ldr	r1, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d50:	4c0b      	ldr	r4, [pc, #44]	; (8000d80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5e:	f7ff ffd7 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f004 ff73 	bl	8005c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fe83 	bl	8000a70 <main>
  bx  lr    
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d78:	08005dcc 	.word	0x08005dcc
  ldr r2, =_sbss
 8000d7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d80:	20004a64 	.word	0x20004a64

08000d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC_IRQHandler>

08000d86 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f000 ff47 	bl	8001c1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff ff2d 	bl	8000bf0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d96:	f7ff ff03 	bl	8000ba0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20004a20 	.word	0x20004a20

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20004a20 	.word	0x20004a20

08000de0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e0ed      	b.n	8000fce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fd14 	bl	800082c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0202 	bic.w	r2, r2, #2
 8000e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e14:	f7ff ffd8 	bl	8000dc8 <HAL_GetTick>
 8000e18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e1a:	e012      	b.n	8000e42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e1c:	f7ff ffd4 	bl	8000dc8 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b0a      	cmp	r3, #10
 8000e28:	d90b      	bls.n	8000e42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2205      	movs	r2, #5
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e0c5      	b.n	8000fce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1e5      	bne.n	8000e1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0201 	orr.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e60:	f7ff ffb2 	bl	8000dc8 <HAL_GetTick>
 8000e64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e66:	e012      	b.n	8000e8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e68:	f7ff ffae 	bl	8000dc8 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b0a      	cmp	r3, #10
 8000e74:	d90b      	bls.n	8000e8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2205      	movs	r2, #5
 8000e86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e09f      	b.n	8000fce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0e5      	beq.n	8000e68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7e1b      	ldrb	r3, [r3, #24]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d108      	bne.n	8000eb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e007      	b.n	8000ec6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7e5b      	ldrb	r3, [r3, #25]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d108      	bne.n	8000ee0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7e9b      	ldrb	r3, [r3, #26]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d108      	bne.n	8000f0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0220 	orr.w	r2, r2, #32
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e007      	b.n	8000f1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0220 	bic.w	r2, r2, #32
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7edb      	ldrb	r3, [r3, #27]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d108      	bne.n	8000f34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0210 	bic.w	r2, r2, #16
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0210 	orr.w	r2, r2, #16
 8000f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7f1b      	ldrb	r3, [r3, #28]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0208 	orr.w	r2, r2, #8
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e007      	b.n	8000f6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0208 	bic.w	r2, r2, #8
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7f5b      	ldrb	r3, [r3, #29]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d108      	bne.n	8000f88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0204 	orr.w	r2, r2, #4
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e007      	b.n	8000f98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0204 	bic.w	r2, r2, #4
 8000f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	ea42 0103 	orr.w	r1, r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	1e5a      	subs	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ff0:	7cfb      	ldrb	r3, [r7, #19]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d003      	beq.n	8000ffe <HAL_CAN_ConfigFilter+0x26>
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	f040 80c7 	bne.w	800118c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a69      	ldr	r2, [pc, #420]	; (80011a8 <HAL_CAN_ConfigFilter+0x1d0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d001      	beq.n	800100c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001008:	4b68      	ldr	r3, [pc, #416]	; (80011ac <HAL_CAN_ConfigFilter+0x1d4>)
 800100a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	4a63      	ldr	r2, [pc, #396]	; (80011ac <HAL_CAN_ConfigFilter+0x1d4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d111      	bne.n	8001048 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800102a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	2201      	movs	r2, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d123      	bne.n	80010ba <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001094:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3248      	adds	r2, #72	; 0x48
 800109a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010b0:	6979      	ldr	r1, [r7, #20]
 80010b2:	3348      	adds	r3, #72	; 0x48
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d122      	bne.n	8001108 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	431a      	orrs	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3248      	adds	r2, #72	; 0x48
 80010e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010fe:	6979      	ldr	r1, [r7, #20]
 8001100:	3348      	adds	r3, #72	; 0x48
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d109      	bne.n	8001124 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001122:	e007      	b.n	8001134 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	431a      	orrs	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d109      	bne.n	8001150 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800114e:	e007      	b.n	8001160 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	431a      	orrs	r2, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d107      	bne.n	8001178 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	431a      	orrs	r2, r3
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800117e:	f023 0201 	bic.w	r2, r3, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	e006      	b.n	800119a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
  }
}
 800119a:	4618      	mov	r0, r3
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40003400 	.word	0x40003400
 80011ac:	40006400 	.word	0x40006400

080011b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d12e      	bne.n	8001222 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2202      	movs	r2, #2
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011dc:	f7ff fdf4 	bl	8000dc8 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011e2:	e012      	b.n	800120a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011e4:	f7ff fdf0 	bl	8000dc8 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d90b      	bls.n	800120a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2205      	movs	r2, #5
 8001202:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e012      	b.n	8001230 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e5      	bne.n	80011e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e006      	b.n	8001230 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
  }
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001256:	7ffb      	ldrb	r3, [r7, #31]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d003      	beq.n	8001264 <HAL_CAN_AddTxMessage+0x2c>
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	2b02      	cmp	r3, #2
 8001260:	f040 80b8 	bne.w	80013d4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10a      	bne.n	8001284 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80a0 	beq.w	80013c4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	0e1b      	lsrs	r3, r3, #24
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d907      	bls.n	80012a4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e09e      	b.n	80013e2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012a4:	2201      	movs	r2, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	409a      	lsls	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	6809      	ldr	r1, [r1, #0]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3318      	adds	r3, #24
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	440b      	add	r3, r1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e00f      	b.n	80012f2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e2:	68f9      	ldr	r1, [r7, #12]
 80012e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3318      	adds	r3, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	440b      	add	r3, r1
 80012f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3318      	adds	r3, #24
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	7d1b      	ldrb	r3, [r3, #20]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d111      	bne.n	8001332 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3318      	adds	r3, #24
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	6811      	ldr	r1, [r2, #0]
 8001322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3318      	adds	r3, #24
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3307      	adds	r3, #7
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	061a      	lsls	r2, r3, #24
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3306      	adds	r3, #6
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3305      	adds	r3, #5
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	4313      	orrs	r3, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	3204      	adds	r2, #4
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	4610      	mov	r0, r2
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	6811      	ldr	r1, [r2, #0]
 800135a:	ea43 0200 	orr.w	r2, r3, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	440b      	add	r3, r1
 8001364:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001368:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3303      	adds	r3, #3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	061a      	lsls	r2, r3, #24
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3302      	adds	r3, #2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4313      	orrs	r3, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4610      	mov	r0, r2
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	6811      	ldr	r1, [r2, #0]
 8001390:	ea43 0200 	orr.w	r2, r3, r0
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	440b      	add	r3, r1
 800139a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800139e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3318      	adds	r3, #24
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	4413      	add	r3, r2
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	6811      	ldr	r1, [r2, #0]
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3318      	adds	r3, #24
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	440b      	add	r3, r1
 80013be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e00e      	b.n	80013e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e006      	b.n	80013e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013ee:	b480      	push	{r7}
 80013f0:	b087      	sub	sp, #28
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001402:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d003      	beq.n	8001412 <HAL_CAN_GetRxMessage+0x24>
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b02      	cmp	r3, #2
 800140e:	f040 80f3 	bne.w	80015f8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10e      	bne.n	8001436 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0e7      	b.n	8001606 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0d8      	b.n	8001606 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	331b      	adds	r3, #27
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0204 	and.w	r2, r3, #4
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10c      	bne.n	800148c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	331b      	adds	r3, #27
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0d5b      	lsrs	r3, r3, #21
 8001482:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	331b      	adds	r3, #27
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	331b      	adds	r3, #27
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0202 	and.w	r2, r3, #2
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	331b      	adds	r3, #27
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	4413      	add	r3, r2
 80014c6:	3304      	adds	r3, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 020f 	and.w	r2, r3, #15
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	331b      	adds	r3, #27
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4413      	add	r3, r2
 80014de:	3304      	adds	r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	331b      	adds	r3, #27
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4413      	add	r3, r2
 80014f6:	3304      	adds	r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0a1a      	lsrs	r2, r3, #8
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4413      	add	r3, r2
 800153c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0c1a      	lsrs	r2, r3, #16
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3302      	adds	r3, #2
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	4413      	add	r3, r2
 8001556:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0e1a      	lsrs	r2, r3, #24
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3303      	adds	r3, #3
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	4413      	add	r3, r2
 8001570:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3304      	adds	r3, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0a1a      	lsrs	r2, r3, #8
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3305      	adds	r3, #5
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0c1a      	lsrs	r2, r3, #16
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	3306      	adds	r3, #6
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0e1a      	lsrs	r2, r3, #24
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	3307      	adds	r3, #7
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0220 	orr.w	r2, r2, #32
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0220 	orr.w	r2, r2, #32
 80015f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e006      	b.n	8001606 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
  }
}
 8001606:	4618      	mov	r0, r3
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001622:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d002      	beq.n	8001630 <HAL_CAN_ActivateNotification+0x1e>
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d109      	bne.n	8001644 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6959      	ldr	r1, [r3, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e006      	b.n	8001652 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
  }
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b08a      	sub	sp, #40	; 0x28
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d07c      	beq.n	800179e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d023      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f97d 	bl	80019c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80016c6:	e016      	b.n	80016f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	e00c      	b.n	80016f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d004      	beq.n	80016f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
 80016ee:	e002      	b.n	80016f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f983 	bl	80019fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d024      	beq.n	800174a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001708:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f95d 	bl	80019d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800171a:	e016      	b.n	800174a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
 800172e:	e00c      	b.n	800174a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
 8001742:	e002      	b.n	800174a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f963 	bl	8001a10 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d024      	beq.n	800179e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800175c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f93d 	bl	80019e8 <HAL_CAN_TxMailbox2CompleteCallback>
 800176e:	e016      	b.n	800179e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
 8001782:	e00c      	b.n	800179e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d004      	beq.n	8001798 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
 8001796:	e002      	b.n	800179e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f943 	bl	8001a24 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00c      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2210      	movs	r2, #16
 80017c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00b      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2208      	movs	r2, #8
 80017dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f934 	bl	8001a4c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f91b 	bl	8001a38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00c      	beq.n	8001826 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2210      	movs	r2, #16
 8001824:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2208      	movs	r2, #8
 8001840:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f916 	bl	8001a74 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f8fd 	bl	8001a60 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00b      	beq.n	8001888 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2210      	movs	r2, #16
 8001880:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f900 	bl	8001a88 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2208      	movs	r2, #8
 80018a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f8f9 	bl	8001a9c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d075      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d06c      	beq.n	8001998 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03d      	beq.n	8001998 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d038      	beq.n	8001998 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800192c:	2b30      	cmp	r3, #48	; 0x30
 800192e:	d017      	beq.n	8001960 <HAL_CAN_IRQHandler+0x302>
 8001930:	2b30      	cmp	r3, #48	; 0x30
 8001932:	d804      	bhi.n	800193e <HAL_CAN_IRQHandler+0x2e0>
 8001934:	2b10      	cmp	r3, #16
 8001936:	d009      	beq.n	800194c <HAL_CAN_IRQHandler+0x2ee>
 8001938:	2b20      	cmp	r3, #32
 800193a:	d00c      	beq.n	8001956 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800193c:	e024      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800193e:	2b50      	cmp	r3, #80	; 0x50
 8001940:	d018      	beq.n	8001974 <HAL_CAN_IRQHandler+0x316>
 8001942:	2b60      	cmp	r3, #96	; 0x60
 8001944:	d01b      	beq.n	800197e <HAL_CAN_IRQHandler+0x320>
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d00f      	beq.n	800196a <HAL_CAN_IRQHandler+0x30c>
            break;
 800194a:	e01d      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001954:	e018      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800195e:	e013      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	f043 0320 	orr.w	r3, r3, #32
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001968:	e00e      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001972:	e009      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800197c:	e004      	b.n	8001988 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001986:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001996:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2204      	movs	r2, #4
 800199e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d008      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f87c 	bl	8001ab0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x40>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00
 8001b08:	05fa0000 	.word	0x05fa0000

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff4c 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c46:	f7ff ff61 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	6978      	ldr	r0, [r7, #20]
 8001c52:	f7ff ffb1 	bl	8001bb8 <NVIC_EncodePriority>
 8001c56:	4602      	mov	r2, r0
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff80 	bl	8001b64 <__NVIC_SetPriority>
}
 8001c64:	bf00      	nop
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff54 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e175      	b.n	8001f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8164 	bne.w	8001f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_GPIO_Init+0x5e>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cda:	2b11      	cmp	r3, #17
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d130      	bne.n	8001d48 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x100>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b12      	cmp	r3, #18
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80be 	beq.w	8001f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a64      	ldr	r2, [pc, #400]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e2a:	4a60      	ldr	r2, [pc, #384]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a57      	ldr	r2, [pc, #348]	; (8001fb0 <HAL_GPIO_Init+0x328>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d037      	beq.n	8001ec6 <HAL_GPIO_Init+0x23e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a56      	ldr	r2, [pc, #344]	; (8001fb4 <HAL_GPIO_Init+0x32c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d031      	beq.n	8001ec2 <HAL_GPIO_Init+0x23a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a55      	ldr	r2, [pc, #340]	; (8001fb8 <HAL_GPIO_Init+0x330>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02b      	beq.n	8001ebe <HAL_GPIO_Init+0x236>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a54      	ldr	r2, [pc, #336]	; (8001fbc <HAL_GPIO_Init+0x334>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d025      	beq.n	8001eba <HAL_GPIO_Init+0x232>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a53      	ldr	r2, [pc, #332]	; (8001fc0 <HAL_GPIO_Init+0x338>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_GPIO_Init+0x22e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_GPIO_Init+0x33c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x22a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_GPIO_Init+0x340>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x226>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <HAL_GPIO_Init+0x344>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x222>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <HAL_GPIO_Init+0x348>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x21e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <HAL_GPIO_Init+0x34c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x21a>
 8001e9e:	2309      	movs	r3, #9
 8001ea0:	e012      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	e010      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	e00e      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e00c      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eae:	2306      	movs	r3, #6
 8001eb0:	e00a      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	e008      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x240>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ed8:	4934      	ldr	r1, [pc, #208]	; (8001fac <HAL_GPIO_Init+0x324>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0a:	4a33      	ldr	r2, [pc, #204]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f34:	4a28      	ldr	r2, [pc, #160]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <HAL_GPIO_Init+0x350>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	f67f ae86 	bls.w	8001ca8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3724      	adds	r7, #36	; 0x24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40021400 	.word	0x40021400
 8001fc8:	40021800 	.word	0x40021800
 8001fcc:	40021c00 	.word	0x40021c00
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40022400 	.word	0x40022400
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ff8:	e003      	b.n	8002002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	619a      	str	r2, [r3, #24]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002020:	887a      	ldrh	r2, [r7, #2]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	041a      	lsls	r2, r3, #16
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43d9      	mvns	r1, r3
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	400b      	ands	r3, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	619a      	str	r2, [r3, #24]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_PWREx_EnableOverDrive+0x98>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_PWREx_EnableOverDrive+0x98>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_PWREx_EnableOverDrive+0x98>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002072:	f7fe fea9 	bl	8000dc8 <HAL_GetTick>
 8002076:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002078:	e009      	b.n	800208e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800207a:	f7fe fea5 	bl	8000dc8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002088:	d901      	bls.n	800208e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e022      	b.n	80020d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209a:	d1ee      	bne.n	800207a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020a8:	f7fe fe8e 	bl	8000dc8 <HAL_GetTick>
 80020ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020ae:	e009      	b.n	80020c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020b0:	f7fe fe8a 	bl	8000dc8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020be:	d901      	bls.n	80020c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e007      	b.n	80020d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020d0:	d1ee      	bne.n	80020b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e29b      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8087 	beq.w	8002216 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002108:	4b96      	ldr	r3, [pc, #600]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b04      	cmp	r3, #4
 8002112:	d00c      	beq.n	800212e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002114:	4b93      	ldr	r3, [pc, #588]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b08      	cmp	r3, #8
 800211e:	d112      	bne.n	8002146 <HAL_RCC_OscConfig+0x62>
 8002120:	4b90      	ldr	r3, [pc, #576]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212c:	d10b      	bne.n	8002146 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212e:	4b8d      	ldr	r3, [pc, #564]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d06c      	beq.n	8002214 <HAL_RCC_OscConfig+0x130>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d168      	bne.n	8002214 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e275      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x7a>
 8002150:	4b84      	ldr	r3, [pc, #528]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a83      	ldr	r2, [pc, #524]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e02e      	b.n	80021bc <HAL_RCC_OscConfig+0xd8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x9c>
 8002166:	4b7f      	ldr	r3, [pc, #508]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7e      	ldr	r2, [pc, #504]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 800216c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b7c      	ldr	r3, [pc, #496]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a7b      	ldr	r2, [pc, #492]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e01d      	b.n	80021bc <HAL_RCC_OscConfig+0xd8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0xc0>
 800218a:	4b76      	ldr	r3, [pc, #472]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a75      	ldr	r2, [pc, #468]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b73      	ldr	r3, [pc, #460]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a72      	ldr	r2, [pc, #456]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xd8>
 80021a4:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6e      	ldr	r2, [pc, #440]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b6c      	ldr	r3, [pc, #432]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6b      	ldr	r2, [pc, #428]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80021b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe fe00 	bl	8000dc8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe fdfc 	bl	8000dc8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e229      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b61      	ldr	r3, [pc, #388]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0xe8>
 80021ea:	e014      	b.n	8002216 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fdec 	bl	8000dc8 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe fde8 	bl	8000dc8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e215      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	4b57      	ldr	r3, [pc, #348]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x110>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d069      	beq.n	80022f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002222:	4b50      	ldr	r3, [pc, #320]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b4d      	ldr	r3, [pc, #308]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b08      	cmp	r3, #8
 8002238:	d11c      	bne.n	8002274 <HAL_RCC_OscConfig+0x190>
 800223a:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x17a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e1e9      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	493d      	ldr	r1, [pc, #244]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	e040      	b.n	80022f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d023      	beq.n	80022c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a38      	ldr	r2, [pc, #224]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fd9e 	bl	8000dc8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002290:	f7fe fd9a 	bl	8000dc8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1c7      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4929      	ldr	r1, [pc, #164]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
 80022c2:	e018      	b.n	80022f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a26      	ldr	r2, [pc, #152]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fd7a 	bl	8000dc8 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7fe fd76 	bl	8000dc8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1a3      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d038      	beq.n	8002374 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d019      	beq.n	800233e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 800230c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230e:	4a15      	ldr	r2, [pc, #84]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fd57 	bl	8000dc8 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231e:	f7fe fd53 	bl	8000dc8 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e180      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x23a>
 800233c:	e01a      	b.n	8002374 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_RCC_OscConfig+0x280>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7fe fd3d 	bl	8000dc8 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002352:	f7fe fd39 	bl	8000dc8 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d903      	bls.n	8002368 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e166      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
 8002364:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 800236a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ee      	bne.n	8002352 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a4 	beq.w	80024ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b8c      	ldr	r3, [pc, #560]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10d      	bne.n	80023aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b89      	ldr	r3, [pc, #548]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a88      	ldr	r2, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	4b83      	ldr	r3, [pc, #524]	; (80025b8 <HAL_RCC_OscConfig+0x4d4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023b6:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <HAL_RCC_OscConfig+0x4d4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7f      	ldr	r2, [pc, #508]	; (80025b8 <HAL_RCC_OscConfig+0x4d4>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fd01 	bl	8000dc8 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe fcfd 	bl	8000dc8 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e12a      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023dc:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x4d4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x31a>
 80023f0:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	e02d      	b.n	800245a <HAL_RCC_OscConfig+0x376>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x33c>
 8002406:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a6a      	ldr	r2, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a67      	ldr	r2, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	e01c      	b.n	800245a <HAL_RCC_OscConfig+0x376>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x35e>
 8002428:	4b62      	ldr	r3, [pc, #392]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242c:	4a61      	ldr	r2, [pc, #388]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6713      	str	r3, [r2, #112]	; 0x70
 8002434:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a5e      	ldr	r2, [pc, #376]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x376>
 8002442:	4b5c      	ldr	r3, [pc, #368]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fcb1 	bl	8000dc8 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fcad 	bl	8000dc8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0d8      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ee      	beq.n	800246a <HAL_RCC_OscConfig+0x386>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248e:	f7fe fc9b 	bl	8000dc8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7fe fc97 	bl	8000dc8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0c2      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80ae 	beq.w	8002630 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d06d      	beq.n	80025bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d14b      	bne.n	8002580 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a31      	ldr	r2, [pc, #196]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80024ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fc68 	bl	8000dc8 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fc64 	bl	8000dc8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e091      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69da      	ldr	r2, [r3, #28]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	019b      	lsls	r3, r3, #6
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	071b      	lsls	r3, r3, #28
 8002546:	491b      	ldr	r1, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fc36 	bl	8000dc8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fc32 	bl	8000dc8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e05f      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x47c>
 800257e:	e057      	b.n	8002630 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fc1c 	bl	8000dc8 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fc18 	bl	8000dc8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e045      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x4b0>
 80025b2:	e03d      	b.n	8002630 <HAL_RCC_OscConfig+0x54c>
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_RCC_OscConfig+0x558>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d030      	beq.n	800262c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d129      	bne.n	800262c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d122      	bne.n	800262c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d119      	bne.n	800262c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	085b      	lsrs	r3, r3, #1
 8002604:	3b01      	subs	r3, #1
 8002606:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d10f      	bne.n	800262c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d107      	bne.n	800262c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0d0      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d910      	bls.n	8002688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	4965      	ldr	r1, [pc, #404]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0b8      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d020      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a0:	4b59      	ldr	r3, [pc, #356]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	494d      	ldr	r1, [pc, #308]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d040      	beq.n	8002764 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d115      	bne.n	8002722 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07f      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e073      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06b      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b39      	ldr	r3, [pc, #228]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4936      	ldr	r1, [pc, #216]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	4313      	orrs	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fb48 	bl	8000dc8 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe fb44 	bl	8000dc8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e053      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d210      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 020f 	bic.w	r2, r3, #15
 800277a:	4922      	ldr	r1, [pc, #136]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4916      	ldr	r1, [pc, #88]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	490e      	ldr	r1, [pc, #56]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d2:	f000 f821 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80027d6:	4601      	mov	r1, r0
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <HAL_RCC_ClockConfig+0x1cc>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	fa21 f303 	lsr.w	r3, r1, r3
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1d0>)
 80027ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1d4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe f9fc 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00
 8002808:	40023800 	.word	0x40023800
 800280c:	08005da4 	.word	0x08005da4
 8002810:	20000000 	.word	0x20000000
 8002814:	20000004 	.word	0x20000004

08002818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	2300      	movs	r3, #0
 8002828:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b04      	cmp	r3, #4
 8002838:	d007      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x32>
 800283a:	2b08      	cmp	r3, #8
 800283c:	d008      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x38>
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 80b4 	bne.w	80029ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4b5e      	ldr	r3, [pc, #376]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002846:	60bb      	str	r3, [r7, #8]
      break;
 8002848:	e0b3      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800284a:	4b5e      	ldr	r3, [pc, #376]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800284c:	60bb      	str	r3, [r7, #8]
      break;
 800284e:	e0b0      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002850:	4b5a      	ldr	r3, [pc, #360]	; (80029bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002858:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800285a:	4b58      	ldr	r3, [pc, #352]	; (80029bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d04a      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	4b55      	ldr	r3, [pc, #340]	; (80029bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	f04f 0400 	mov.w	r4, #0
 8002870:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	ea03 0501 	and.w	r5, r3, r1
 800287c:	ea04 0602 	and.w	r6, r4, r2
 8002880:	4629      	mov	r1, r5
 8002882:	4632      	mov	r2, r6
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	f04f 0400 	mov.w	r4, #0
 800288c:	0154      	lsls	r4, r2, #5
 800288e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002892:	014b      	lsls	r3, r1, #5
 8002894:	4619      	mov	r1, r3
 8002896:	4622      	mov	r2, r4
 8002898:	1b49      	subs	r1, r1, r5
 800289a:	eb62 0206 	sbc.w	r2, r2, r6
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	f04f 0400 	mov.w	r4, #0
 80028a6:	0194      	lsls	r4, r2, #6
 80028a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028ac:	018b      	lsls	r3, r1, #6
 80028ae:	1a5b      	subs	r3, r3, r1
 80028b0:	eb64 0402 	sbc.w	r4, r4, r2
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	00e2      	lsls	r2, r4, #3
 80028be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028c2:	00d9      	lsls	r1, r3, #3
 80028c4:	460b      	mov	r3, r1
 80028c6:	4614      	mov	r4, r2
 80028c8:	195b      	adds	r3, r3, r5
 80028ca:	eb44 0406 	adc.w	r4, r4, r6
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	0262      	lsls	r2, r4, #9
 80028d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028dc:	0259      	lsls	r1, r3, #9
 80028de:	460b      	mov	r3, r1
 80028e0:	4614      	mov	r4, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	4621      	mov	r1, r4
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f04f 0400 	mov.w	r4, #0
 80028ec:	461a      	mov	r2, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	f7fd fca6 	bl	8000240 <__aeabi_uldivmod>
 80028f4:	4603      	mov	r3, r0
 80028f6:	460c      	mov	r4, r1
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e049      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	f04f 0400 	mov.w	r4, #0
 8002906:	f240 11ff 	movw	r1, #511	; 0x1ff
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	ea03 0501 	and.w	r5, r3, r1
 8002912:	ea04 0602 	and.w	r6, r4, r2
 8002916:	4629      	mov	r1, r5
 8002918:	4632      	mov	r2, r6
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	f04f 0400 	mov.w	r4, #0
 8002922:	0154      	lsls	r4, r2, #5
 8002924:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002928:	014b      	lsls	r3, r1, #5
 800292a:	4619      	mov	r1, r3
 800292c:	4622      	mov	r2, r4
 800292e:	1b49      	subs	r1, r1, r5
 8002930:	eb62 0206 	sbc.w	r2, r2, r6
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	0194      	lsls	r4, r2, #6
 800293e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002942:	018b      	lsls	r3, r1, #6
 8002944:	1a5b      	subs	r3, r3, r1
 8002946:	eb64 0402 	sbc.w	r4, r4, r2
 800294a:	f04f 0100 	mov.w	r1, #0
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	00e2      	lsls	r2, r4, #3
 8002954:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002958:	00d9      	lsls	r1, r3, #3
 800295a:	460b      	mov	r3, r1
 800295c:	4614      	mov	r4, r2
 800295e:	195b      	adds	r3, r3, r5
 8002960:	eb44 0406 	adc.w	r4, r4, r6
 8002964:	f04f 0100 	mov.w	r1, #0
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	02a2      	lsls	r2, r4, #10
 800296e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002972:	0299      	lsls	r1, r3, #10
 8002974:	460b      	mov	r3, r1
 8002976:	4614      	mov	r4, r2
 8002978:	4618      	mov	r0, r3
 800297a:	4621      	mov	r1, r4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f04f 0400 	mov.w	r4, #0
 8002982:	461a      	mov	r2, r3
 8002984:	4623      	mov	r3, r4
 8002986:	f7fd fc5b 	bl	8000240 <__aeabi_uldivmod>
 800298a:	4603      	mov	r3, r0
 800298c:	460c      	mov	r4, r1
 800298e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	3301      	adds	r3, #1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	60bb      	str	r3, [r7, #8]
      break;
 80029aa:	e002      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ae:	60bb      	str	r3, [r7, #8]
      break;
 80029b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b2:	68bb      	ldr	r3, [r7, #8]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000

080029e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4601      	mov	r1, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0b5b      	lsrs	r3, r3, #13
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4a03      	ldr	r2, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08005db4 	.word	0x08005db4

08002a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	220f      	movs	r2, #15
 8002a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_RCC_GetClockConfig+0x5c>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0203 	and.w	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_RCC_GetClockConfig+0x5c>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_RCC_GetClockConfig+0x5c>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <HAL_RCC_GetClockConfig+0x60>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	601a      	str	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40023c00 	.word	0x40023c00

08002a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e049      	b.n	8002b12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f841 	bl	8002b1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 fa00 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e054      	b.n	8002bf2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b72:	d01d      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <HAL_TIM_Base_Start_IT+0xe0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_TIM_Base_Start_IT+0xe4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <HAL_TIM_Base_Start_IT+0xe8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d115      	bne.n	8002bdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_TIM_Base_Start_IT+0xec>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d015      	beq.n	8002bee <HAL_TIM_Base_Start_IT+0xbe>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d011      	beq.n	8002bee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	e008      	b.n	8002bee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e000      	b.n	8002bf0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	40010400 	.word	0x40010400
 8002c14:	40014000 	.word	0x40014000
 8002c18:	40001800 	.word	0x40001800
 8002c1c:	00010007 	.word	0x00010007

08002c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d122      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d11b      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0202 	mvn.w	r2, #2
 8002c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f905 	bl	8002e72 <HAL_TIM_IC_CaptureCallback>
 8002c68:	e005      	b.n	8002c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f8f7 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f908 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d122      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0204 	mvn.w	r2, #4
 8002ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8db 	bl	8002e72 <HAL_TIM_IC_CaptureCallback>
 8002cbc:	e005      	b.n	8002cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8cd 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f8de 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0208 	mvn.w	r2, #8
 8002cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8b1 	bl	8002e72 <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8a3 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f8b4 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0210 	mvn.w	r2, #16
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f887 	bl	8002e72 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f879 	bl	8002e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f88a 	bl	8002e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0201 	mvn.w	r2, #1
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd fee8 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f91a 	bl	8003004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dde:	d10e      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d107      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f90d 	bl	8003018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d10e      	bne.n	8002e2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d107      	bne.n	8002e2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f838 	bl	8002e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d10e      	bne.n	8002e56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d107      	bne.n	8002e56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f06f 0220 	mvn.w	r2, #32
 8002e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8cd 	bl	8002ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a40      	ldr	r2, [pc, #256]	; (8002fc4 <TIM_Base_SetConfig+0x114>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ece:	d00f      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a3d      	ldr	r2, [pc, #244]	; (8002fc8 <TIM_Base_SetConfig+0x118>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a3c      	ldr	r2, [pc, #240]	; (8002fcc <TIM_Base_SetConfig+0x11c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <TIM_Base_SetConfig+0x120>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3a      	ldr	r2, [pc, #232]	; (8002fd4 <TIM_Base_SetConfig+0x124>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <TIM_Base_SetConfig+0x114>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02b      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d027      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <TIM_Base_SetConfig+0x118>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d023      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <TIM_Base_SetConfig+0x11c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d01f      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <TIM_Base_SetConfig+0x120>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01b      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a29      	ldr	r2, [pc, #164]	; (8002fd4 <TIM_Base_SetConfig+0x124>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d017      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <TIM_Base_SetConfig+0x128>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <TIM_Base_SetConfig+0x12c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00f      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <TIM_Base_SetConfig+0x130>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00b      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a25      	ldr	r2, [pc, #148]	; (8002fe4 <TIM_Base_SetConfig+0x134>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d007      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <TIM_Base_SetConfig+0x138>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a23      	ldr	r2, [pc, #140]	; (8002fec <TIM_Base_SetConfig+0x13c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d108      	bne.n	8002f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <TIM_Base_SetConfig+0x114>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_Base_SetConfig+0xf8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <TIM_Base_SetConfig+0x124>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d103      	bne.n	8002fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40010400 	.word	0x40010400
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	40014400 	.word	0x40014400
 8002fe0:	40014800 	.word	0x40014800
 8002fe4:	40001800 	.word	0x40001800
 8002fe8:	40001c00 	.word	0x40001c00
 8002fec:	40002000 	.word	0x40002000

08002ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003042:	f3ef 8305 	mrs	r3, IPSR
 8003046:	60bb      	str	r3, [r7, #8]
  return(result);
 8003048:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304e:	f3ef 8310 	mrs	r3, PRIMASK
 8003052:	607b      	str	r3, [r7, #4]
  return(result);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800305a:	f3ef 8311 	mrs	r3, BASEPRI
 800305e:	603b      	str	r3, [r7, #0]
  return(result);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <osKernelInitialize+0x3a>
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <osKernelInitialize+0x64>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d103      	bne.n	8003076 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800306e:	f06f 0305 	mvn.w	r3, #5
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	e00c      	b.n	8003090 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <osKernelInitialize+0x64>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d105      	bne.n	800308a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <osKernelInitialize+0x64>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e002      	b.n	8003090 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003090:	68fb      	ldr	r3, [r7, #12]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000098 	.word	0x20000098

080030a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030aa:	f3ef 8305 	mrs	r3, IPSR
 80030ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80030b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ba:	607b      	str	r3, [r7, #4]
  return(result);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030c2:	f3ef 8311 	mrs	r3, BASEPRI
 80030c6:	603b      	str	r3, [r7, #0]
  return(result);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <osKernelStart+0x3a>
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <osKernelStart+0x68>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d103      	bne.n	80030de <osKernelStart+0x3a>
    stat = osErrorISR;
 80030d6:	f06f 0305 	mvn.w	r3, #5
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e010      	b.n	8003100 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <osKernelStart+0x68>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d109      	bne.n	80030fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030e6:	f7ff ffa1 	bl	800302c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <osKernelStart+0x68>)
 80030ec:	2202      	movs	r2, #2
 80030ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030f0:	f001 f91c 	bl	800432c <vTaskStartScheduler>
      stat = osOK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e002      	b.n	8003100 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000098 	.word	0x20000098

08003110 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b090      	sub	sp, #64	; 0x40
 8003114:	af04      	add	r7, sp, #16
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003120:	f3ef 8305 	mrs	r3, IPSR
 8003124:	61fb      	str	r3, [r7, #28]
  return(result);
 8003126:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 808f 	bne.w	800324c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312e:	f3ef 8310 	mrs	r3, PRIMASK
 8003132:	61bb      	str	r3, [r7, #24]
  return(result);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800313a:	f3ef 8311 	mrs	r3, BASEPRI
 800313e:	617b      	str	r3, [r7, #20]
  return(result);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <osThreadNew+0x3e>
 8003146:	4b44      	ldr	r3, [pc, #272]	; (8003258 <osThreadNew+0x148>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d07e      	beq.n	800324c <osThreadNew+0x13c>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d07b      	beq.n	800324c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003158:	2318      	movs	r3, #24
 800315a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800315c:	2300      	movs	r3, #0
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d045      	beq.n	80031f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <osThreadNew+0x6a>
        name = attr->name;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <osThreadNew+0x90>
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	2b38      	cmp	r3, #56	; 0x38
 8003192:	d805      	bhi.n	80031a0 <osThreadNew+0x90>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <osThreadNew+0x94>
        return (NULL);
 80031a0:	2300      	movs	r3, #0
 80031a2:	e054      	b.n	800324e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <osThreadNew+0xca>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b5b      	cmp	r3, #91	; 0x5b
 80031c2:	d90a      	bls.n	80031da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d006      	beq.n	80031da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <osThreadNew+0xca>
        mem = 1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	e010      	b.n	80031fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <osThreadNew+0xec>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <osThreadNew+0xec>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <osThreadNew+0xec>
          mem = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	e001      	b.n	80031fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d110      	bne.n	8003224 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800320a:	9202      	str	r2, [sp, #8]
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fe2b 	bl	8003e74 <xTaskCreateStatic>
 800321e:	4603      	mov	r3, r0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e013      	b.n	800324c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d110      	bne.n	800324c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	b29a      	uxth	r2, r3
 800322e:	f107 0310 	add.w	r3, r7, #16
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fe79 	bl	8003f34 <xTaskCreate>
 8003242:	4603      	mov	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <osThreadNew+0x13c>
          hTask = NULL;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800324c:	693b      	ldr	r3, [r7, #16]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3730      	adds	r7, #48	; 0x30
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000098 	.word	0x20000098

0800325c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003264:	f3ef 8305 	mrs	r3, IPSR
 8003268:	613b      	str	r3, [r7, #16]
  return(result);
 800326a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10f      	bne.n	8003290 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	60fb      	str	r3, [r7, #12]
  return(result);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800327c:	f3ef 8311 	mrs	r3, BASEPRI
 8003280:	60bb      	str	r3, [r7, #8]
  return(result);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <osDelay+0x3c>
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <osDelay+0x58>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d103      	bne.n	8003298 <osDelay+0x3c>
    stat = osErrorISR;
 8003290:	f06f 0305 	mvn.w	r3, #5
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e007      	b.n	80032a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f001 f80c 	bl	80042c0 <vTaskDelay>
    }
  }

  return (stat);
 80032a8:	697b      	ldr	r3, [r7, #20]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000098 	.word	0x20000098

080032b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a07      	ldr	r2, [pc, #28]	; (80032e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80032c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <vApplicationGetIdleTaskMemory+0x30>)
 80032ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2000009c 	.word	0x2000009c
 80032e8:	200000f8 	.word	0x200000f8

080032ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <vApplicationGetTimerTaskMemory+0x2c>)
 80032fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <vApplicationGetTimerTaskMemory+0x30>)
 8003302:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	200002f8 	.word	0x200002f8
 800331c:	20000354 	.word	0x20000354

08003320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f103 0208 	add.w	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f103 0208 	add.w	r2, r3, #8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f103 0208 	add.w	r2, r3, #8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d103      	bne.n	80033e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e00c      	b.n	80033fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3308      	adds	r3, #8
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e002      	b.n	80033f0 <vListInsert+0x2e>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d2f6      	bcs.n	80033ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	601a      	str	r2, [r3, #0]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6892      	ldr	r2, [r2, #8]
 800344a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6852      	ldr	r2, [r2, #4]
 8003454:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d103      	bne.n	8003468 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1e5a      	subs	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	b672      	cpsid	i
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	b662      	cpsie	i
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	e7fe      	b.n	80034b2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80034b4:	f002 f8c8 	bl	8005648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	441a      	add	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	3b01      	subs	r3, #1
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	22ff      	movs	r2, #255	; 0xff
 80034f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d114      	bne.n	8003534 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01a      	beq.n	8003548 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3310      	adds	r3, #16
 8003516:	4618      	mov	r0, r3
 8003518:	f001 f996 	bl	8004848 <xTaskRemoveFromEventList>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <xQueueGenericReset+0xd0>)
 8003524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	e009      	b.n	8003548 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3310      	adds	r3, #16
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fef1 	bl	8003320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3324      	adds	r3, #36	; 0x24
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff feec 	bl	8003320 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003548:	f002 f8b0 	bl	80056ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800354c:	2301      	movs	r3, #1
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	e000ed04 	.word	0xe000ed04

0800355c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08e      	sub	sp, #56	; 0x38
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <xQueueGenericCreateStatic+0x2c>
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	b672      	cpsid	i
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	b662      	cpsie	i
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
 8003586:	e7fe      	b.n	8003586 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <xQueueGenericCreateStatic+0x4a>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	b672      	cpsid	i
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	b662      	cpsie	i
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
 80035a4:	e7fe      	b.n	80035a4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <xQueueGenericCreateStatic+0x56>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <xQueueGenericCreateStatic+0x5a>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <xQueueGenericCreateStatic+0x5c>
 80035b6:	2300      	movs	r3, #0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <xQueueGenericCreateStatic+0x78>
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	b672      	cpsid	i
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	b662      	cpsie	i
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	e7fe      	b.n	80035d2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <xQueueGenericCreateStatic+0x84>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <xQueueGenericCreateStatic+0x88>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <xQueueGenericCreateStatic+0x8a>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <xQueueGenericCreateStatic+0xa6>
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	b672      	cpsid	i
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	b662      	cpsie	i
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e7fe      	b.n	8003600 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003602:	2350      	movs	r3, #80	; 0x50
 8003604:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b50      	cmp	r3, #80	; 0x50
 800360a:	d00b      	beq.n	8003624 <xQueueGenericCreateStatic+0xc8>
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	b672      	cpsid	i
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	b662      	cpsie	i
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e7fe      	b.n	8003622 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003624:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003638:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f805 	bl	8003656 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800364e:	4618      	mov	r0, r3
 8003650:	3730      	adds	r7, #48	; 0x30
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e002      	b.n	8003678 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003684:	2101      	movs	r1, #1
 8003686:	69b8      	ldr	r0, [r7, #24]
 8003688:	f7ff fefe 	bl	8003488 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08e      	sub	sp, #56	; 0x38
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <xQueueGenericSend+0x34>
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	b672      	cpsid	i
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	b662      	cpsie	i
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ce:	e7fe      	b.n	80036ce <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <xQueueGenericSend+0x42>
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <xQueueGenericSend+0x46>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <xQueueGenericSend+0x48>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <xQueueGenericSend+0x64>
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	b672      	cpsid	i
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	b662      	cpsie	i
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e7fe      	b.n	80036fe <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d103      	bne.n	800370e <xQueueGenericSend+0x72>
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <xQueueGenericSend+0x76>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <xQueueGenericSend+0x78>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <xQueueGenericSend+0x94>
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	b672      	cpsid	i
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	b662      	cpsie	i
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	e7fe      	b.n	800372e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003730:	f001 fa4a 	bl	8004bc8 <xTaskGetSchedulerState>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <xQueueGenericSend+0xa4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <xQueueGenericSend+0xa8>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <xQueueGenericSend+0xaa>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <xQueueGenericSend+0xc6>
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	b672      	cpsid	i
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	b662      	cpsie	i
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	e7fe      	b.n	8003760 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003762:	f001 ff71 	bl	8005648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <xQueueGenericSend+0xdc>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d129      	bne.n	80037cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377e:	f000 fa0d 	bl	8003b9c <prvCopyDataToQueue>
 8003782:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	3324      	adds	r3, #36	; 0x24
 8003790:	4618      	mov	r0, r3
 8003792:	f001 f859 	bl	8004848 <xTaskRemoveFromEventList>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800379c:	4b3f      	ldr	r3, [pc, #252]	; (800389c <xQueueGenericSend+0x200>)
 800379e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	e00a      	b.n	80037c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <xQueueGenericSend+0x200>)
 80037b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037c4:	f001 ff72 	bl	80056ac <vPortExitCritical>
				return pdPASS;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e063      	b.n	8003894 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037d2:	f001 ff6b 	bl	80056ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e05c      	b.n	8003894 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 f893 	bl	8004910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037ee:	f001 ff5d 	bl	80056ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037f2:	f000 fe03 	bl	80043fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037f6:	f001 ff27 	bl	8005648 <vPortEnterCritical>
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003800:	b25b      	sxtb	r3, r3
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d103      	bne.n	8003810 <xQueueGenericSend+0x174>
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003816:	b25b      	sxtb	r3, r3
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d103      	bne.n	8003826 <xQueueGenericSend+0x18a>
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003826:	f001 ff41 	bl	80056ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800382a:	1d3a      	adds	r2, r7, #4
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f001 f882 	bl	800493c <xTaskCheckForTimeOut>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d124      	bne.n	8003888 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800383e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003840:	f000 faa4 	bl	8003d8c <prvIsQueueFull>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	3310      	adds	r3, #16
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 ffa6 	bl	80047a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385a:	f000 fa2f 	bl	8003cbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800385e:	f000 fddb 	bl	8004418 <xTaskResumeAll>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f47f af7c 	bne.w	8003762 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <xQueueGenericSend+0x200>)
 800386c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	e772      	b.n	8003762 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800387c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800387e:	f000 fa1d 	bl	8003cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003882:	f000 fdc9 	bl	8004418 <xTaskResumeAll>
 8003886:	e76c      	b.n	8003762 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388a:	f000 fa17 	bl	8003cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800388e:	f000 fdc3 	bl	8004418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003892:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003894:	4618      	mov	r0, r3
 8003896:	3738      	adds	r7, #56	; 0x38
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <xQueueGenericSendFromISR+0x30>
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	b672      	cpsid	i
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	b662      	cpsie	i
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
 80038ce:	e7fe      	b.n	80038ce <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <xQueueGenericSendFromISR+0x3e>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <xQueueGenericSendFromISR+0x42>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <xQueueGenericSendFromISR+0x44>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <xQueueGenericSendFromISR+0x60>
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	b672      	cpsid	i
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	b662      	cpsie	i
 80038fc:	623b      	str	r3, [r7, #32]
 80038fe:	e7fe      	b.n	80038fe <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d103      	bne.n	800390e <xQueueGenericSendFromISR+0x6e>
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <xQueueGenericSendFromISR+0x72>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <xQueueGenericSendFromISR+0x74>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueGenericSendFromISR+0x90>
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	b672      	cpsid	i
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	b662      	cpsie	i
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e7fe      	b.n	800392e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003930:	f001 ff6a 	bl	8005808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003934:	f3ef 8211 	mrs	r2, BASEPRI
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	b672      	cpsid	i
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	b662      	cpsie	i
 800394c:	61ba      	str	r2, [r7, #24]
 800394e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003950:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <xQueueGenericSendFromISR+0xc6>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d12c      	bne.n	80039c0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800396c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003976:	f000 f911 	bl	8003b9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800397a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d112      	bne.n	80039aa <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d016      	beq.n	80039ba <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	3324      	adds	r3, #36	; 0x24
 8003990:	4618      	mov	r0, r3
 8003992:	f000 ff59 	bl	8004848 <xTaskRemoveFromEventList>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e007      	b.n	80039ba <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039ae:	3301      	adds	r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	b25a      	sxtb	r2, r3
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80039ba:	2301      	movs	r3, #1
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80039be:	e001      	b.n	80039c4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3738      	adds	r7, #56	; 0x38
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <xQueueReceive+0x32>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	b672      	cpsid	i
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	b662      	cpsie	i
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	e7fe      	b.n	8003a08 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <xQueueReceive+0x40>
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <xQueueReceive+0x44>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <xQueueReceive+0x46>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <xQueueReceive+0x62>
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	b672      	cpsid	i
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	b662      	cpsie	i
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	e7fe      	b.n	8003a38 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a3a:	f001 f8c5 	bl	8004bc8 <xTaskGetSchedulerState>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <xQueueReceive+0x72>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <xQueueReceive+0x76>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueReceive+0x78>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <xQueueReceive+0x94>
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	b672      	cpsid	i
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	b662      	cpsie	i
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e7fe      	b.n	8003a6a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a6c:	f001 fdec 	bl	8005648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01f      	beq.n	8003abc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a80:	f000 f8f6 	bl	8003c70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00f      	beq.n	8003ab4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	3310      	adds	r3, #16
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fed5 	bl	8004848 <xTaskRemoveFromEventList>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <xQueueReceive+0x1c0>)
 8003aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ab4:	f001 fdfa 	bl	80056ac <vPortExitCritical>
				return pdPASS;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e069      	b.n	8003b90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ac2:	f001 fdf3 	bl	80056ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e062      	b.n	8003b90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ad0:	f107 0310 	add.w	r3, r7, #16
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 ff1b 	bl	8004910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ada:	2301      	movs	r3, #1
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ade:	f001 fde5 	bl	80056ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ae2:	f000 fc8b 	bl	80043fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ae6:	f001 fdaf 	bl	8005648 <vPortEnterCritical>
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003af0:	b25b      	sxtb	r3, r3
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	d103      	bne.n	8003b00 <xQueueReceive+0x128>
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b06:	b25b      	sxtb	r3, r3
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d103      	bne.n	8003b16 <xQueueReceive+0x13e>
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b16:	f001 fdc9 	bl	80056ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b1a:	1d3a      	adds	r2, r7, #4
 8003b1c:	f107 0310 	add.w	r3, r7, #16
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 ff0a 	bl	800493c <xTaskCheckForTimeOut>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d123      	bne.n	8003b76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b30:	f000 f916 	bl	8003d60 <prvIsQueueEmpty>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	3324      	adds	r3, #36	; 0x24
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fe2e 	bl	80047a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b4a:	f000 f8b7 	bl	8003cbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b4e:	f000 fc63 	bl	8004418 <xTaskResumeAll>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d189      	bne.n	8003a6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <xQueueReceive+0x1c0>)
 8003b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	e780      	b.n	8003a6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b6c:	f000 f8a6 	bl	8003cbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b70:	f000 fc52 	bl	8004418 <xTaskResumeAll>
 8003b74:	e77a      	b.n	8003a6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b78:	f000 f8a0 	bl	8003cbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b7c:	f000 fc4c 	bl	8004418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b82:	f000 f8ed 	bl	8003d60 <prvIsQueueEmpty>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f43f af6f 	beq.w	8003a6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3730      	adds	r7, #48	; 0x30
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10d      	bne.n	8003bd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d14d      	bne.n	8003c5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 f81c 	bl	8004c04 <xTaskPriorityDisinherit>
 8003bcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	e043      	b.n	8003c5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d119      	bne.n	8003c10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6858      	ldr	r0, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	461a      	mov	r2, r3
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	f002 f863 	bl	8005cb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	441a      	add	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d32b      	bcc.n	8003c5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e026      	b.n	8003c5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68d8      	ldr	r0, [r3, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	f002 f849 	bl	8005cb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	425b      	negs	r3, r3
 8003c2a:	441a      	add	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d207      	bcs.n	8003c4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	425b      	negs	r3, r3
 8003c46:	441a      	add	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d105      	bne.n	8003c5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c66:	697b      	ldr	r3, [r7, #20]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d018      	beq.n	8003cb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	441a      	add	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d303      	bcc.n	8003ca4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68d9      	ldr	r1, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	461a      	mov	r2, r3
 8003cae:	6838      	ldr	r0, [r7, #0]
 8003cb0:	f001 ffff 	bl	8005cb2 <memcpy>
	}
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cc4:	f001 fcc0 	bl	8005648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cd0:	e011      	b.n	8003cf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d012      	beq.n	8003d00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3324      	adds	r3, #36	; 0x24
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fdb2 	bl	8004848 <xTaskRemoveFromEventList>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cea:	f000 fe8b 	bl	8004a04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	dce9      	bgt.n	8003cd2 <prvUnlockQueue+0x16>
 8003cfe:	e000      	b.n	8003d02 <prvUnlockQueue+0x46>
					break;
 8003d00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d0a:	f001 fccf 	bl	80056ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d0e:	f001 fc9b 	bl	8005648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d1a:	e011      	b.n	8003d40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d012      	beq.n	8003d4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3310      	adds	r3, #16
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fd8d 	bl	8004848 <xTaskRemoveFromEventList>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d34:	f000 fe66 	bl	8004a04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d38:	7bbb      	ldrb	r3, [r7, #14]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	dce9      	bgt.n	8003d1c <prvUnlockQueue+0x60>
 8003d48:	e000      	b.n	8003d4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	22ff      	movs	r2, #255	; 0xff
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d54:	f001 fcaa 	bl	80056ac <vPortExitCritical>
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d68:	f001 fc6e 	bl	8005648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e001      	b.n	8003d7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d7e:	f001 fc95 	bl	80056ac <vPortExitCritical>

	return xReturn;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d94:	f001 fc58 	bl	8005648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d102      	bne.n	8003daa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003da4:	2301      	movs	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e001      	b.n	8003dae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dae:	f001 fc7d 	bl	80056ac <vPortExitCritical>

	return xReturn;
 8003db2:	68fb      	ldr	r3, [r7, #12]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	e014      	b.n	8003df6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003dcc:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <vQueueAddToRegistry+0x4c>)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10b      	bne.n	8003df0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003dd8:	490b      	ldr	r1, [pc, #44]	; (8003e08 <vQueueAddToRegistry+0x4c>)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003de2:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <vQueueAddToRegistry+0x4c>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dee:	e005      	b.n	8003dfc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b07      	cmp	r3, #7
 8003dfa:	d9e7      	bls.n	8003dcc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20004a24 	.word	0x20004a24

08003e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e1c:	f001 fc14 	bl	8005648 <vPortEnterCritical>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e26:	b25b      	sxtb	r3, r3
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d103      	bne.n	8003e36 <vQueueWaitForMessageRestricted+0x2a>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e42:	d103      	bne.n	8003e4c <vQueueWaitForMessageRestricted+0x40>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e4c:	f001 fc2e 	bl	80056ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3324      	adds	r3, #36	; 0x24
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fcc5 	bl	80047f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff28 	bl	8003cbc <prvUnlockQueue>
	}
 8003e6c:	bf00      	nop
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08e      	sub	sp, #56	; 0x38
 8003e78:	af04      	add	r7, sp, #16
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <xTaskCreateStatic+0x2c>
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	b672      	cpsid	i
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	b662      	cpsie	i
 8003e9c:	623b      	str	r3, [r7, #32]
 8003e9e:	e7fe      	b.n	8003e9e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10b      	bne.n	8003ebe <xTaskCreateStatic+0x4a>
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	b672      	cpsid	i
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	b662      	cpsie	i
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e7fe      	b.n	8003ebc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ebe:	235c      	movs	r3, #92	; 0x5c
 8003ec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b5c      	cmp	r3, #92	; 0x5c
 8003ec6:	d00b      	beq.n	8003ee0 <xTaskCreateStatic+0x6c>
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	b672      	cpsid	i
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	b662      	cpsie	i
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e7fe      	b.n	8003ede <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ee0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01e      	beq.n	8003f26 <xTaskCreateStatic+0xb2>
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01b      	beq.n	8003f26 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f00:	2300      	movs	r3, #0
 8003f02:	9303      	str	r3, [sp, #12]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	9302      	str	r3, [sp, #8]
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f850 	bl	8003fbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f20:	f000 f8de 	bl	80040e0 <prvAddNewTaskToReadyList>
 8003f24:	e001      	b.n	8003f2a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f2a:	697b      	ldr	r3, [r7, #20]
	}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3728      	adds	r7, #40	; 0x28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08c      	sub	sp, #48	; 0x30
 8003f38:	af04      	add	r7, sp, #16
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 fc9f 	bl	800588c <pvPortMalloc>
 8003f4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f56:	205c      	movs	r0, #92	; 0x5c
 8003f58:	f001 fc98 	bl	800588c <pvPortMalloc>
 8003f5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
 8003f6a:	e005      	b.n	8003f78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f6c:	6978      	ldr	r0, [r7, #20]
 8003f6e:	f001 fd55 	bl	8005a1c <vPortFree>
 8003f72:	e001      	b.n	8003f78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9303      	str	r3, [sp, #12]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	9302      	str	r3, [sp, #8]
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f80e 	bl	8003fbe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa2:	69f8      	ldr	r0, [r7, #28]
 8003fa4:	f000 f89c 	bl	80040e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61bb      	str	r3, [r7, #24]
 8003fac:	e002      	b.n	8003fb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
	}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b088      	sub	sp, #32
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	21a5      	movs	r1, #165	; 0xa5
 8003fd8:	f001 fe76 	bl	8005cc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003fe6:	440b      	add	r3, r1
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f023 0307 	bic.w	r3, r3, #7
 8003ff4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <prvInitialiseNewTask+0x5a>
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	b672      	cpsid	i
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	b662      	cpsie	i
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e7fe      	b.n	8004016 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01f      	beq.n	800405e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e012      	b.n	800404a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	7819      	ldrb	r1, [r3, #0]
 800402c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	3334      	adds	r3, #52	; 0x34
 8004034:	460a      	mov	r2, r1
 8004036:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3301      	adds	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b0f      	cmp	r3, #15
 800404e:	d9e9      	bls.n	8004024 <prvInitialiseNewTask+0x66>
 8004050:	e000      	b.n	8004054 <prvInitialiseNewTask+0x96>
			{
				break;
 8004052:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800405c:	e003      	b.n	8004066 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	2b37      	cmp	r3, #55	; 0x37
 800406a:	d901      	bls.n	8004070 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800406c:	2337      	movs	r3, #55	; 0x37
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800407a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	2200      	movs	r2, #0
 8004080:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	3304      	adds	r3, #4
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff f96a 	bl	8003360 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	3318      	adds	r3, #24
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff f965 	bl	8003360 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	69b8      	ldr	r0, [r7, #24]
 80040c0:	f001 f9b8 	bl	8005434 <pxPortInitialiseStack>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d6:	bf00      	nop
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040e8:	f001 faae 	bl	8005648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040ec:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <prvAddNewTaskToReadyList+0xc4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	4a2c      	ldr	r2, [pc, #176]	; (80041a4 <prvAddNewTaskToReadyList+0xc4>)
 80040f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040f6:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <prvAddNewTaskToReadyList+0xc8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040fe:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <prvAddNewTaskToReadyList+0xc8>)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <prvAddNewTaskToReadyList+0xc4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d110      	bne.n	800412e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800410c:	f000 fca0 	bl	8004a50 <prvInitialiseTaskLists>
 8004110:	e00d      	b.n	800412e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <prvAddNewTaskToReadyList+0xcc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800411a:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <prvAddNewTaskToReadyList+0xc8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	429a      	cmp	r2, r3
 8004126:	d802      	bhi.n	800412e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <prvAddNewTaskToReadyList+0xc8>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <prvAddNewTaskToReadyList+0xd0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3301      	adds	r3, #1
 8004134:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <prvAddNewTaskToReadyList+0xd0>)
 8004136:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <prvAddNewTaskToReadyList+0xd0>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <prvAddNewTaskToReadyList+0xd4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d903      	bls.n	8004154 <prvAddNewTaskToReadyList+0x74>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <prvAddNewTaskToReadyList+0xd4>)
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <prvAddNewTaskToReadyList+0xd8>)
 8004162:	441a      	add	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7ff f905 	bl	800337a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004170:	f001 fa9c 	bl	80056ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <prvAddNewTaskToReadyList+0xcc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00e      	beq.n	800419a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <prvAddNewTaskToReadyList+0xc8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	429a      	cmp	r2, r3
 8004188:	d207      	bcs.n	800419a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <prvAddNewTaskToReadyList+0xdc>)
 800418c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000c28 	.word	0x20000c28
 80041a8:	20000754 	.word	0x20000754
 80041ac:	20000c34 	.word	0x20000c34
 80041b0:	20000c44 	.word	0x20000c44
 80041b4:	20000c30 	.word	0x20000c30
 80041b8:	20000758 	.word	0x20000758
 80041bc:	e000ed04 	.word	0xe000ed04

080041c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <vTaskDelayUntil+0x2c>
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	b672      	cpsid	i
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	b662      	cpsie	i
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e7fe      	b.n	80041ea <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <vTaskDelayUntil+0x4a>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	b672      	cpsid	i
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	b662      	cpsie	i
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	e7fe      	b.n	8004208 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800420a:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <vTaskDelayUntil+0xf4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <vTaskDelayUntil+0x6a>
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	b672      	cpsid	i
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	b662      	cpsie	i
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e7fe      	b.n	8004228 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800422a:	f000 f8e7 	bl	80043fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800422e:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <vTaskDelayUntil+0xf8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	4413      	add	r3, r2
 800423c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	429a      	cmp	r2, r3
 8004246:	d20b      	bcs.n	8004260 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	429a      	cmp	r2, r3
 8004250:	d211      	bcs.n	8004276 <vTaskDelayUntil+0xb6>
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	429a      	cmp	r2, r3
 8004258:	d90d      	bls.n	8004276 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
 800425e:	e00a      	b.n	8004276 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	429a      	cmp	r2, r3
 8004268:	d303      	bcc.n	8004272 <vTaskDelayUntil+0xb2>
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	429a      	cmp	r2, r3
 8004270:	d901      	bls.n	8004276 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d006      	beq.n	8004290 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fd2a 	bl	8004ce4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004290:	f000 f8c2 	bl	8004418 <xTaskResumeAll>
 8004294:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <vTaskDelayUntil+0xfc>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042ac:	bf00      	nop
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000c50 	.word	0x20000c50
 80042b8:	20000c2c 	.word	0x20000c2c
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d018      	beq.n	8004304 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <vTaskDelay+0x64>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <vTaskDelay+0x32>
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	b672      	cpsid	i
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	b662      	cpsie	i
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	e7fe      	b.n	80042f0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80042f2:	f000 f883 	bl	80043fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042f6:	2100      	movs	r1, #0
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fcf3 	bl	8004ce4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042fe:	f000 f88b 	bl	8004418 <xTaskResumeAll>
 8004302:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d107      	bne.n	800431a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <vTaskDelay+0x68>)
 800430c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000c50 	.word	0x20000c50
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800433a:	463a      	mov	r2, r7
 800433c:	1d39      	adds	r1, r7, #4
 800433e:	f107 0308 	add.w	r3, r7, #8
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe ffb8 	bl	80032b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	9202      	str	r2, [sp, #8]
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	2300      	movs	r3, #0
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	2300      	movs	r3, #0
 8004358:	460a      	mov	r2, r1
 800435a:	4922      	ldr	r1, [pc, #136]	; (80043e4 <vTaskStartScheduler+0xb8>)
 800435c:	4822      	ldr	r0, [pc, #136]	; (80043e8 <vTaskStartScheduler+0xbc>)
 800435e:	f7ff fd89 	bl	8003e74 <xTaskCreateStatic>
 8004362:	4602      	mov	r2, r0
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <vTaskStartScheduler+0xc0>)
 8004366:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004368:	4b20      	ldr	r3, [pc, #128]	; (80043ec <vTaskStartScheduler+0xc0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004370:	2301      	movs	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e001      	b.n	800437a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004380:	f000 fd04 	bl	8004d8c <xTimerCreateTimerTask>
 8004384:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d117      	bne.n	80043bc <vTaskStartScheduler+0x90>
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	b672      	cpsid	i
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	b662      	cpsie	i
 80043a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043a2:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <vTaskStartScheduler+0xc4>)
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <vTaskStartScheduler+0xc8>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <vTaskStartScheduler+0xcc>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043b6:	f001 f8cb 	bl	8005550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043ba:	e00f      	b.n	80043dc <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d10b      	bne.n	80043dc <vTaskStartScheduler+0xb0>
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	b672      	cpsid	i
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	b662      	cpsie	i
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e7fe      	b.n	80043da <vTaskStartScheduler+0xae>
}
 80043dc:	bf00      	nop
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	08005d1c 	.word	0x08005d1c
 80043e8:	08004a1d 	.word	0x08004a1d
 80043ec:	20000c4c 	.word	0x20000c4c
 80043f0:	20000c48 	.word	0x20000c48
 80043f4:	20000c34 	.word	0x20000c34
 80043f8:	20000c2c 	.word	0x20000c2c

080043fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <vTaskSuspendAll+0x18>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	4a03      	ldr	r2, [pc, #12]	; (8004414 <vTaskSuspendAll+0x18>)
 8004408:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800440a:	bf00      	nop
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	20000c50 	.word	0x20000c50

08004418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004426:	4b42      	ldr	r3, [pc, #264]	; (8004530 <xTaskResumeAll+0x118>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <xTaskResumeAll+0x2e>
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	b672      	cpsid	i
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	b662      	cpsie	i
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	e7fe      	b.n	8004444 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004446:	f001 f8ff 	bl	8005648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <xTaskResumeAll+0x118>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a37      	ldr	r2, [pc, #220]	; (8004530 <xTaskResumeAll+0x118>)
 8004452:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004454:	4b36      	ldr	r3, [pc, #216]	; (8004530 <xTaskResumeAll+0x118>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d162      	bne.n	8004522 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <xTaskResumeAll+0x11c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05e      	beq.n	8004522 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004464:	e02f      	b.n	80044c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <xTaskResumeAll+0x120>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3318      	adds	r3, #24
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe ffde 	bl	8003434 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe ffd9 	bl	8003434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	4b2d      	ldr	r3, [pc, #180]	; (800453c <xTaskResumeAll+0x124>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d903      	bls.n	8004496 <xTaskResumeAll+0x7e>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	4a2a      	ldr	r2, [pc, #168]	; (800453c <xTaskResumeAll+0x124>)
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4a27      	ldr	r2, [pc, #156]	; (8004540 <xTaskResumeAll+0x128>)
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f7fe ff64 	bl	800337a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <xTaskResumeAll+0x12c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d302      	bcc.n	80044c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <xTaskResumeAll+0x130>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044c6:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <xTaskResumeAll+0x120>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1cb      	bne.n	8004466 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044d4:	f000 fb58 	bl	8004b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044d8:	4b1c      	ldr	r3, [pc, #112]	; (800454c <xTaskResumeAll+0x134>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044e4:	f000 f846 	bl	8004574 <xTaskIncrementTick>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <xTaskResumeAll+0x130>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f1      	bne.n	80044e4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004500:	4b12      	ldr	r3, [pc, #72]	; (800454c <xTaskResumeAll+0x134>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <xTaskResumeAll+0x130>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800450e:	2301      	movs	r3, #1
 8004510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <xTaskResumeAll+0x138>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004522:	f001 f8c3 	bl	80056ac <vPortExitCritical>

	return xAlreadyYielded;
 8004526:	68bb      	ldr	r3, [r7, #8]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000c50 	.word	0x20000c50
 8004534:	20000c28 	.word	0x20000c28
 8004538:	20000be8 	.word	0x20000be8
 800453c:	20000c30 	.word	0x20000c30
 8004540:	20000758 	.word	0x20000758
 8004544:	20000754 	.word	0x20000754
 8004548:	20000c3c 	.word	0x20000c3c
 800454c:	20000c38 	.word	0x20000c38
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <xTaskGetTickCount+0x1c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004560:	687b      	ldr	r3, [r7, #4]
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000c2c 	.word	0x20000c2c

08004574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457e:	4b4f      	ldr	r3, [pc, #316]	; (80046bc <xTaskIncrementTick+0x148>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 808a 	bne.w	800469c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004588:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <xTaskIncrementTick+0x14c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004590:	4a4b      	ldr	r2, [pc, #300]	; (80046c0 <xTaskIncrementTick+0x14c>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d121      	bne.n	80045e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800459c:	4b49      	ldr	r3, [pc, #292]	; (80046c4 <xTaskIncrementTick+0x150>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <xTaskIncrementTick+0x4a>
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	b672      	cpsid	i
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	b662      	cpsie	i
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	e7fe      	b.n	80045bc <xTaskIncrementTick+0x48>
 80045be:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <xTaskIncrementTick+0x150>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <xTaskIncrementTick+0x154>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3e      	ldr	r2, [pc, #248]	; (80046c4 <xTaskIncrementTick+0x150>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4a3e      	ldr	r2, [pc, #248]	; (80046c8 <xTaskIncrementTick+0x154>)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <xTaskIncrementTick+0x158>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3301      	adds	r3, #1
 80045d8:	4a3c      	ldr	r2, [pc, #240]	; (80046cc <xTaskIncrementTick+0x158>)
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	f000 fad4 	bl	8004b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045e0:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <xTaskIncrementTick+0x15c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d349      	bcc.n	800467e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <xTaskIncrementTick+0x150>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <xTaskIncrementTick+0x15c>)
 80045f6:	f04f 32ff 	mov.w	r2, #4294967295
 80045fa:	601a      	str	r2, [r3, #0]
					break;
 80045fc:	e03f      	b.n	800467e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <xTaskIncrementTick+0x150>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d203      	bcs.n	800461e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004616:	4a2e      	ldr	r2, [pc, #184]	; (80046d0 <xTaskIncrementTick+0x15c>)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800461c:	e02f      	b.n	800467e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3304      	adds	r3, #4
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe ff06 	bl	8003434 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3318      	adds	r3, #24
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fefd 	bl	8003434 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <xTaskIncrementTick+0x160>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d903      	bls.n	800464e <xTaskIncrementTick+0xda>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <xTaskIncrementTick+0x160>)
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <xTaskIncrementTick+0x164>)
 800465c:	441a      	add	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f7fe fe88 	bl	800337a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <xTaskIncrementTick+0x168>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	429a      	cmp	r2, r3
 8004676:	d3b8      	bcc.n	80045ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004678:	2301      	movs	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800467c:	e7b5      	b.n	80045ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800467e:	4b17      	ldr	r3, [pc, #92]	; (80046dc <xTaskIncrementTick+0x168>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	4914      	ldr	r1, [pc, #80]	; (80046d8 <xTaskIncrementTick+0x164>)
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d907      	bls.n	80046a6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004696:	2301      	movs	r3, #1
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e004      	b.n	80046a6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <xTaskIncrementTick+0x16c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3301      	adds	r3, #1
 80046a2:	4a0f      	ldr	r2, [pc, #60]	; (80046e0 <xTaskIncrementTick+0x16c>)
 80046a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <xTaskIncrementTick+0x170>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80046ae:	2301      	movs	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046b2:	697b      	ldr	r3, [r7, #20]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20000c50 	.word	0x20000c50
 80046c0:	20000c2c 	.word	0x20000c2c
 80046c4:	20000be0 	.word	0x20000be0
 80046c8:	20000be4 	.word	0x20000be4
 80046cc:	20000c40 	.word	0x20000c40
 80046d0:	20000c48 	.word	0x20000c48
 80046d4:	20000c30 	.word	0x20000c30
 80046d8:	20000758 	.word	0x20000758
 80046dc:	20000754 	.word	0x20000754
 80046e0:	20000c38 	.word	0x20000c38
 80046e4:	20000c3c 	.word	0x20000c3c

080046e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ee:	4b28      	ldr	r3, [pc, #160]	; (8004790 <vTaskSwitchContext+0xa8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <vTaskSwitchContext+0xac>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046fc:	e042      	b.n	8004784 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80046fe:	4b25      	ldr	r3, [pc, #148]	; (8004794 <vTaskSwitchContext+0xac>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004704:	4b24      	ldr	r3, [pc, #144]	; (8004798 <vTaskSwitchContext+0xb0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e011      	b.n	8004730 <vTaskSwitchContext+0x48>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <vTaskSwitchContext+0x42>
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	b672      	cpsid	i
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	b662      	cpsie	i
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	e7fe      	b.n	8004728 <vTaskSwitchContext+0x40>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3b01      	subs	r3, #1
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	491a      	ldr	r1, [pc, #104]	; (800479c <vTaskSwitchContext+0xb4>)
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0e3      	beq.n	800470c <vTaskSwitchContext+0x24>
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4a13      	ldr	r2, [pc, #76]	; (800479c <vTaskSwitchContext+0xb4>)
 8004750:	4413      	add	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	3308      	adds	r3, #8
 8004766:	429a      	cmp	r2, r3
 8004768:	d104      	bne.n	8004774 <vTaskSwitchContext+0x8c>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	605a      	str	r2, [r3, #4]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <vTaskSwitchContext+0xb8>)
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4a06      	ldr	r2, [pc, #24]	; (8004798 <vTaskSwitchContext+0xb0>)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6013      	str	r3, [r2, #0]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000c50 	.word	0x20000c50
 8004794:	20000c3c 	.word	0x20000c3c
 8004798:	20000c30 	.word	0x20000c30
 800479c:	20000758 	.word	0x20000758
 80047a0:	20000754 	.word	0x20000754

080047a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10b      	bne.n	80047cc <vTaskPlaceOnEventList+0x28>
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	b672      	cpsid	i
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	b662      	cpsie	i
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e7fe      	b.n	80047ca <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047cc:	4b07      	ldr	r3, [pc, #28]	; (80047ec <vTaskPlaceOnEventList+0x48>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3318      	adds	r3, #24
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7fe fdf4 	bl	80033c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047da:	2101      	movs	r1, #1
 80047dc:	6838      	ldr	r0, [r7, #0]
 80047de:	f000 fa81 	bl	8004ce4 <prvAddCurrentTaskToDelayedList>
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000754 	.word	0x20000754

080047f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <vTaskPlaceOnEventListRestricted+0x2a>
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	b672      	cpsid	i
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	b662      	cpsie	i
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e7fe      	b.n	8004818 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <vTaskPlaceOnEventListRestricted+0x54>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3318      	adds	r3, #24
 8004820:	4619      	mov	r1, r3
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7fe fda9 	bl	800337a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295
 8004832:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	68b8      	ldr	r0, [r7, #8]
 8004838:	f000 fa54 	bl	8004ce4 <prvAddCurrentTaskToDelayedList>
	}
 800483c:	bf00      	nop
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000754 	.word	0x20000754

08004848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10b      	bne.n	8004876 <xTaskRemoveFromEventList+0x2e>
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	b672      	cpsid	i
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	b662      	cpsie	i
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e7fe      	b.n	8004874 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3318      	adds	r3, #24
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fdda 	bl	8003434 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <xTaskRemoveFromEventList+0xb0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11d      	bne.n	80048c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe fdd1 	bl	8003434 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004896:	4b19      	ldr	r3, [pc, #100]	; (80048fc <xTaskRemoveFromEventList+0xb4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d903      	bls.n	80048a6 <xTaskRemoveFromEventList+0x5e>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	4a16      	ldr	r2, [pc, #88]	; (80048fc <xTaskRemoveFromEventList+0xb4>)
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4a13      	ldr	r2, [pc, #76]	; (8004900 <xTaskRemoveFromEventList+0xb8>)
 80048b4:	441a      	add	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f7fe fd5c 	bl	800337a <vListInsertEnd>
 80048c2:	e005      	b.n	80048d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3318      	adds	r3, #24
 80048c8:	4619      	mov	r1, r3
 80048ca:	480e      	ldr	r0, [pc, #56]	; (8004904 <xTaskRemoveFromEventList+0xbc>)
 80048cc:	f7fe fd55 	bl	800337a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <xTaskRemoveFromEventList+0xc0>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	429a      	cmp	r2, r3
 80048dc:	d905      	bls.n	80048ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048de:	2301      	movs	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <xTaskRemoveFromEventList+0xc4>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e001      	b.n	80048ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048ee:	697b      	ldr	r3, [r7, #20]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000c50 	.word	0x20000c50
 80048fc:	20000c30 	.word	0x20000c30
 8004900:	20000758 	.word	0x20000758
 8004904:	20000be8 	.word	0x20000be8
 8004908:	20000754 	.word	0x20000754
 800490c:	20000c3c 	.word	0x20000c3c

08004910 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <vTaskInternalSetTimeOutState+0x24>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <vTaskInternalSetTimeOutState+0x28>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	605a      	str	r2, [r3, #4]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	20000c40 	.word	0x20000c40
 8004938:	20000c2c 	.word	0x20000c2c

0800493c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <xTaskCheckForTimeOut+0x28>
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	b672      	cpsid	i
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	b662      	cpsie	i
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	e7fe      	b.n	8004962 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <xTaskCheckForTimeOut+0x46>
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	b672      	cpsid	i
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	b662      	cpsie	i
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e7fe      	b.n	8004980 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8004982:	f000 fe61 	bl	8005648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <xTaskCheckForTimeOut+0xc0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d102      	bne.n	80049a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	e023      	b.n	80049ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <xTaskCheckForTimeOut+0xc4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d007      	beq.n	80049c2 <xTaskCheckForTimeOut+0x86>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d302      	bcc.n	80049c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	e015      	b.n	80049ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d20b      	bcs.n	80049e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad2      	subs	r2, r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff99 	bl	8004910 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e004      	b.n	80049ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049ee:	f000 fe5d 	bl	80056ac <vPortExitCritical>

	return xReturn;
 80049f2:	69fb      	ldr	r3, [r7, #28]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000c2c 	.word	0x20000c2c
 8004a00:	20000c40 	.word	0x20000c40

08004a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <vTaskMissedYield+0x14>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	20000c3c 	.word	0x20000c3c

08004a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a24:	f000 f854 	bl	8004ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a28:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <prvIdleTask+0x2c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d907      	bls.n	8004a40 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <prvIdleTask+0x30>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004a40:	f7fb ff48 	bl	80008d4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004a44:	e7ee      	b.n	8004a24 <prvIdleTask+0x8>
 8004a46:	bf00      	nop
 8004a48:	20000758 	.word	0x20000758
 8004a4c:	e000ed04 	.word	0xe000ed04

08004a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	e00c      	b.n	8004a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <prvInitialiseTaskLists+0x60>)
 8004a68:	4413      	add	r3, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe fc58 	bl	8003320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3301      	adds	r3, #1
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b37      	cmp	r3, #55	; 0x37
 8004a7a:	d9ef      	bls.n	8004a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a7c:	480d      	ldr	r0, [pc, #52]	; (8004ab4 <prvInitialiseTaskLists+0x64>)
 8004a7e:	f7fe fc4f 	bl	8003320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a82:	480d      	ldr	r0, [pc, #52]	; (8004ab8 <prvInitialiseTaskLists+0x68>)
 8004a84:	f7fe fc4c 	bl	8003320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a88:	480c      	ldr	r0, [pc, #48]	; (8004abc <prvInitialiseTaskLists+0x6c>)
 8004a8a:	f7fe fc49 	bl	8003320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a8e:	480c      	ldr	r0, [pc, #48]	; (8004ac0 <prvInitialiseTaskLists+0x70>)
 8004a90:	f7fe fc46 	bl	8003320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a94:	480b      	ldr	r0, [pc, #44]	; (8004ac4 <prvInitialiseTaskLists+0x74>)
 8004a96:	f7fe fc43 	bl	8003320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <prvInitialiseTaskLists+0x78>)
 8004a9c:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <prvInitialiseTaskLists+0x64>)
 8004a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <prvInitialiseTaskLists+0x7c>)
 8004aa2:	4a05      	ldr	r2, [pc, #20]	; (8004ab8 <prvInitialiseTaskLists+0x68>)
 8004aa4:	601a      	str	r2, [r3, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000758 	.word	0x20000758
 8004ab4:	20000bb8 	.word	0x20000bb8
 8004ab8:	20000bcc 	.word	0x20000bcc
 8004abc:	20000be8 	.word	0x20000be8
 8004ac0:	20000bfc 	.word	0x20000bfc
 8004ac4:	20000c14 	.word	0x20000c14
 8004ac8:	20000be0 	.word	0x20000be0
 8004acc:	20000be4 	.word	0x20000be4

08004ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ad6:	e019      	b.n	8004b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ad8:	f000 fdb6 	bl	8005648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <prvCheckTasksWaitingTermination+0x4c>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe fca3 	bl	8003434 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <prvCheckTasksWaitingTermination+0x50>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <prvCheckTasksWaitingTermination+0x50>)
 8004af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <prvCheckTasksWaitingTermination+0x54>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <prvCheckTasksWaitingTermination+0x54>)
 8004b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b02:	f000 fdd3 	bl	80056ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f80e 	bl	8004b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <prvCheckTasksWaitingTermination+0x54>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e1      	bne.n	8004ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000bfc 	.word	0x20000bfc
 8004b20:	20000c28 	.word	0x20000c28
 8004b24:	20000c10 	.word	0x20000c10

08004b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 ff6c 	bl	8005a1c <vPortFree>
				vPortFree( pxTCB );
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 ff69 	bl	8005a1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b4a:	e019      	b.n	8004b80 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d103      	bne.n	8004b5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 ff60 	bl	8005a1c <vPortFree>
	}
 8004b5c:	e010      	b.n	8004b80 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d00b      	beq.n	8004b80 <prvDeleteTCB+0x58>
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	b672      	cpsid	i
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	b662      	cpsie	i
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e7fe      	b.n	8004b7e <prvDeleteTCB+0x56>
	}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <prvResetNextTaskUnblockTime+0x38>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8004b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ba0:	e008      	b.n	8004bb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <prvResetNextTaskUnblockTime+0x38>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4a04      	ldr	r2, [pc, #16]	; (8004bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8004bb2:	6013      	str	r3, [r2, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	20000be0 	.word	0x20000be0
 8004bc4:	20000c48 	.word	0x20000c48

08004bc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <xTaskGetSchedulerState+0x34>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	e008      	b.n	8004bee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <xTaskGetSchedulerState+0x38>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004be4:	2302      	movs	r3, #2
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	e001      	b.n	8004bee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bee:	687b      	ldr	r3, [r7, #4]
	}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	20000c34 	.word	0x20000c34
 8004c00:	20000c50 	.word	0x20000c50

08004c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d058      	beq.n	8004ccc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c1a:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <xTaskPriorityDisinherit+0xd4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d00b      	beq.n	8004c3c <xTaskPriorityDisinherit+0x38>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	b672      	cpsid	i
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	b662      	cpsie	i
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e7fe      	b.n	8004c3a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <xTaskPriorityDisinherit+0x58>
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	b672      	cpsid	i
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	b662      	cpsie	i
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	e7fe      	b.n	8004c5a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d02c      	beq.n	8004ccc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d128      	bne.n	8004ccc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fbd8 	bl	8003434 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <xTaskPriorityDisinherit+0xd8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d903      	bls.n	8004cac <xTaskPriorityDisinherit+0xa8>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <xTaskPriorityDisinherit+0xd8>)
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <xTaskPriorityDisinherit+0xdc>)
 8004cba:	441a      	add	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f7fe fb59 	bl	800337a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ccc:	697b      	ldr	r3, [r7, #20]
	}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000754 	.word	0x20000754
 8004cdc:	20000c30 	.word	0x20000c30
 8004ce0:	20000758 	.word	0x20000758

08004ce4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cee:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <prvAddCurrentTaskToDelayedList+0x90>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cf4:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fb9a 	bl	8003434 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d10a      	bne.n	8004d1e <prvAddCurrentTaskToDelayedList+0x3a>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4819      	ldr	r0, [pc, #100]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x98>)
 8004d18:	f7fe fb2f 	bl	800337a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d1c:	e026      	b.n	8004d6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4413      	add	r3, r2
 8004d24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d26:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d209      	bcs.n	8004d4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fe fb3d 	bl	80033c2 <vListInsert>
}
 8004d48:	e010      	b.n	8004d6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d4a:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fe fb33 	bl	80033c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d202      	bcs.n	8004d6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d66:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6013      	str	r3, [r2, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000c2c 	.word	0x20000c2c
 8004d78:	20000754 	.word	0x20000754
 8004d7c:	20000c14 	.word	0x20000c14
 8004d80:	20000be4 	.word	0x20000be4
 8004d84:	20000be0 	.word	0x20000be0
 8004d88:	20000c48 	.word	0x20000c48

08004d8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d96:	f000 fb0d 	bl	80053b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d9a:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <xTimerCreateTimerTask+0x84>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d021      	beq.n	8004de6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004daa:	1d3a      	adds	r2, r7, #4
 8004dac:	f107 0108 	add.w	r1, r7, #8
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe fa99 	bl	80032ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	9202      	str	r2, [sp, #8]
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	460a      	mov	r2, r1
 8004dcc:	4911      	ldr	r1, [pc, #68]	; (8004e14 <xTimerCreateTimerTask+0x88>)
 8004dce:	4812      	ldr	r0, [pc, #72]	; (8004e18 <xTimerCreateTimerTask+0x8c>)
 8004dd0:	f7ff f850 	bl	8003e74 <xTaskCreateStatic>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <xTimerCreateTimerTask+0x90>)
 8004dd8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <xTimerCreateTimerTask+0x90>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004de2:	2301      	movs	r3, #1
 8004de4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <xTimerCreateTimerTask+0x78>
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	b672      	cpsid	i
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	b662      	cpsie	i
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	e7fe      	b.n	8004e02 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8004e04:	697b      	ldr	r3, [r7, #20]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000c84 	.word	0x20000c84
 8004e14:	08005d24 	.word	0x08005d24
 8004e18:	08004f59 	.word	0x08004f59
 8004e1c:	20000c88 	.word	0x20000c88

08004e20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10b      	bne.n	8004e50 <xTimerGenericCommand+0x30>
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	b672      	cpsid	i
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	b662      	cpsie	i
 8004e4c:	623b      	str	r3, [r7, #32]
 8004e4e:	e7fe      	b.n	8004e4e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <xTimerGenericCommand+0x98>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02a      	beq.n	8004eae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	dc18      	bgt.n	8004e9c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e6a:	f7ff fead 	bl	8004bc8 <xTaskGetSchedulerState>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d109      	bne.n	8004e88 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e74:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <xTimerGenericCommand+0x98>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	f107 0110 	add.w	r1, r7, #16
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e80:	f7fe fc0c 	bl	800369c <xQueueGenericSend>
 8004e84:	6278      	str	r0, [r7, #36]	; 0x24
 8004e86:	e012      	b.n	8004eae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <xTimerGenericCommand+0x98>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	f107 0110 	add.w	r1, r7, #16
 8004e90:	2300      	movs	r3, #0
 8004e92:	2200      	movs	r2, #0
 8004e94:	f7fe fc02 	bl	800369c <xQueueGenericSend>
 8004e98:	6278      	str	r0, [r7, #36]	; 0x24
 8004e9a:	e008      	b.n	8004eae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <xTimerGenericCommand+0x98>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	f107 0110 	add.w	r1, r7, #16
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	f7fe fcfa 	bl	80038a0 <xQueueGenericSendFromISR>
 8004eac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3728      	adds	r7, #40	; 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20000c84 	.word	0x20000c84

08004ebc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec6:	4b23      	ldr	r3, [pc, #140]	; (8004f54 <prvProcessExpiredTimer+0x98>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe faad 	bl	8003434 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	18d1      	adds	r1, r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	6978      	ldr	r0, [r7, #20]
 8004ef6:	f000 f8d3 	bl	80050a0 <prvInsertTimerInActiveList>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f00:	2300      	movs	r3, #0
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	2100      	movs	r1, #0
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7ff ff88 	bl	8004e20 <xTimerGenericCommand>
 8004f10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d114      	bne.n	8004f42 <prvProcessExpiredTimer+0x86>
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	b672      	cpsid	i
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	b662      	cpsie	i
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e7fe      	b.n	8004f2e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	6978      	ldr	r0, [r7, #20]
 8004f48:	4798      	blx	r3
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000c7c 	.word	0x20000c7c

08004f58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f60:	f107 0308 	add.w	r3, r7, #8
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f857 	bl	8005018 <prvGetNextExpireTime>
 8004f6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f803 	bl	8004f7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f76:	f000 f8d5 	bl	8005124 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f7a:	e7f1      	b.n	8004f60 <prvTimerTask+0x8>

08004f7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f86:	f7ff fa39 	bl	80043fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f866 	bl	8005060 <prvSampleTimeNow>
 8004f94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d130      	bne.n	8004ffe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <prvProcessTimerOrBlockTask+0x3c>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d806      	bhi.n	8004fb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004faa:	f7ff fa35 	bl	8004418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fae:	68f9      	ldr	r1, [r7, #12]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ff83 	bl	8004ebc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fb6:	e024      	b.n	8005002 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d008      	beq.n	8004fd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <prvProcessTimerOrBlockTask+0x90>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <prvProcessTimerOrBlockTask+0x50>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <prvProcessTimerOrBlockTask+0x52>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <prvProcessTimerOrBlockTask+0x94>)
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f7fe ff15 	bl	8003e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fe2:	f7ff fa19 	bl	8004418 <xTaskResumeAll>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <prvProcessTimerOrBlockTask+0x98>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	f3bf 8f6f 	isb	sy
}
 8004ffc:	e001      	b.n	8005002 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ffe:	f7ff fa0b 	bl	8004418 <xTaskResumeAll>
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000c80 	.word	0x20000c80
 8005010:	20000c84 	.word	0x20000c84
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005020:	4b0e      	ldr	r3, [pc, #56]	; (800505c <prvGetNextExpireTime+0x44>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <prvGetNextExpireTime+0x16>
 800502a:	2201      	movs	r2, #1
 800502c:	e000      	b.n	8005030 <prvGetNextExpireTime+0x18>
 800502e:	2200      	movs	r2, #0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <prvGetNextExpireTime+0x44>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e001      	b.n	800504c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800504c:	68fb      	ldr	r3, [r7, #12]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000c7c 	.word	0x20000c7c

08005060 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005068:	f7ff fa74 	bl	8004554 <xTaskGetTickCount>
 800506c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <prvSampleTimeNow+0x3c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	429a      	cmp	r2, r3
 8005076:	d205      	bcs.n	8005084 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005078:	f000 f936 	bl	80052e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e002      	b.n	800508a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800508a:	4a04      	ldr	r2, [pc, #16]	; (800509c <prvSampleTimeNow+0x3c>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000c8c 	.word	0x20000c8c

080050a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d812      	bhi.n	80050ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad2      	subs	r2, r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d302      	bcc.n	80050da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e01b      	b.n	8005112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <prvInsertTimerInActiveList+0x7c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3304      	adds	r3, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f7fe f96c 	bl	80033c2 <vListInsert>
 80050ea:	e012      	b.n	8005112 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d206      	bcs.n	8005102 <prvInsertTimerInActiveList+0x62>
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e007      	b.n	8005112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <prvInsertTimerInActiveList+0x80>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3304      	adds	r3, #4
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7fe f958 	bl	80033c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000c80 	.word	0x20000c80
 8005120:	20000c7c 	.word	0x20000c7c

08005124 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08e      	sub	sp, #56	; 0x38
 8005128:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800512a:	e0cc      	b.n	80052c6 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	da19      	bge.n	8005166 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005132:	1d3b      	adds	r3, r7, #4
 8005134:	3304      	adds	r3, #4
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <prvProcessReceivedCommands+0x32>
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	b672      	cpsid	i
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	b662      	cpsie	i
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e7fe      	b.n	8005154 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800515c:	6850      	ldr	r0, [r2, #4]
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	6892      	ldr	r2, [r2, #8]
 8005162:	4611      	mov	r1, r2
 8005164:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	f2c0 80ab 	blt.w	80052c4 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	3304      	adds	r3, #4
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe f958 	bl	8003434 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005184:	463b      	mov	r3, r7
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff6a 	bl	8005060 <prvSampleTimeNow>
 800518c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b09      	cmp	r3, #9
 8005192:	f200 8098 	bhi.w	80052c6 <prvProcessReceivedCommands+0x1a2>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <prvProcessReceivedCommands+0x78>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051c5 	.word	0x080051c5
 80051a8:	0800523b 	.word	0x0800523b
 80051ac:	0800524f 	.word	0x0800524f
 80051b0:	0800529b 	.word	0x0800529b
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051c5 	.word	0x080051c5
 80051bc:	0800523b 	.word	0x0800523b
 80051c0:	0800524f 	.word	0x0800524f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	18d1      	adds	r1, r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e4:	f7ff ff5c 	bl	80050a0 <prvInsertTimerInActiveList>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d06b      	beq.n	80052c6 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d060      	beq.n	80052c6 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	441a      	add	r2, r3
 800520c:	2300      	movs	r3, #0
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	2300      	movs	r3, #0
 8005212:	2100      	movs	r1, #0
 8005214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005216:	f7ff fe03 	bl	8004e20 <xTimerGenericCommand>
 800521a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d151      	bne.n	80052c6 <prvProcessReceivedCommands+0x1a2>
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	b672      	cpsid	i
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	b662      	cpsie	i
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e7fe      	b.n	8005238 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800524c:	e03b      	b.n	80052c6 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10b      	bne.n	8005286 <prvProcessReceivedCommands+0x162>
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	b672      	cpsid	i
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	b662      	cpsie	i
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e7fe      	b.n	8005284 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	18d1      	adds	r1, r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005294:	f7ff ff04 	bl	80050a0 <prvInsertTimerInActiveList>
					break;
 8005298:	e015      	b.n	80052c6 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80052a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052aa:	f000 fbb7 	bl	8005a1c <vPortFree>
 80052ae:	e00a      	b.n	80052c6 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80052c2:	e000      	b.n	80052c6 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80052c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <prvProcessReceivedCommands+0x1c0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	1d39      	adds	r1, r7, #4
 80052cc:	2200      	movs	r2, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fb82 	bl	80039d8 <xQueueReceive>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f47f af28 	bne.w	800512c <prvProcessReceivedCommands+0x8>
	}
}
 80052dc:	bf00      	nop
 80052de:	3730      	adds	r7, #48	; 0x30
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000c84 	.word	0x20000c84

080052e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052ee:	e049      	b.n	8005384 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052f0:	4b2e      	ldr	r3, [pc, #184]	; (80053ac <prvSwitchTimerLists+0xc4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fa:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <prvSwitchTimerLists+0xc4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3304      	adds	r3, #4
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe f893 	bl	8003434 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02f      	beq.n	8005384 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	d90e      	bls.n	8005354 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005342:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <prvSwitchTimerLists+0xc4>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f7fe f838 	bl	80033c2 <vListInsert>
 8005352:	e017      	b.n	8005384 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005354:	2300      	movs	r3, #0
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2300      	movs	r3, #0
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	2100      	movs	r1, #0
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fd5e 	bl	8004e20 <xTimerGenericCommand>
 8005364:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <prvSwitchTimerLists+0x9c>
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	b672      	cpsid	i
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	b662      	cpsie	i
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	e7fe      	b.n	8005382 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <prvSwitchTimerLists+0xc4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1b0      	bne.n	80052f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800538e:	4b07      	ldr	r3, [pc, #28]	; (80053ac <prvSwitchTimerLists+0xc4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005394:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <prvSwitchTimerLists+0xc8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a04      	ldr	r2, [pc, #16]	; (80053ac <prvSwitchTimerLists+0xc4>)
 800539a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800539c:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <prvSwitchTimerLists+0xc8>)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	6013      	str	r3, [r2, #0]
}
 80053a2:	bf00      	nop
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000c7c 	.word	0x20000c7c
 80053b0:	20000c80 	.word	0x20000c80

080053b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053ba:	f000 f945 	bl	8005648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053be:	4b15      	ldr	r3, [pc, #84]	; (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d120      	bne.n	8005408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80053c6:	4814      	ldr	r0, [pc, #80]	; (8005418 <prvCheckForValidListAndQueue+0x64>)
 80053c8:	f7fd ffaa 	bl	8003320 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80053cc:	4813      	ldr	r0, [pc, #76]	; (800541c <prvCheckForValidListAndQueue+0x68>)
 80053ce:	f7fd ffa7 	bl	8003320 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80053d2:	4b13      	ldr	r3, [pc, #76]	; (8005420 <prvCheckForValidListAndQueue+0x6c>)
 80053d4:	4a10      	ldr	r2, [pc, #64]	; (8005418 <prvCheckForValidListAndQueue+0x64>)
 80053d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053d8:	4b12      	ldr	r3, [pc, #72]	; (8005424 <prvCheckForValidListAndQueue+0x70>)
 80053da:	4a10      	ldr	r2, [pc, #64]	; (800541c <prvCheckForValidListAndQueue+0x68>)
 80053dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053de:	2300      	movs	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	4b11      	ldr	r3, [pc, #68]	; (8005428 <prvCheckForValidListAndQueue+0x74>)
 80053e4:	4a11      	ldr	r2, [pc, #68]	; (800542c <prvCheckForValidListAndQueue+0x78>)
 80053e6:	2110      	movs	r1, #16
 80053e8:	200a      	movs	r0, #10
 80053ea:	f7fe f8b7 	bl	800355c <xQueueGenericCreateStatic>
 80053ee:	4602      	mov	r2, r0
 80053f0:	4b08      	ldr	r3, [pc, #32]	; (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <prvCheckForValidListAndQueue+0x60>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	490b      	ldr	r1, [pc, #44]	; (8005430 <prvCheckForValidListAndQueue+0x7c>)
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fcda 	bl	8003dbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005408:	f000 f950 	bl	80056ac <vPortExitCritical>
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000c84 	.word	0x20000c84
 8005418:	20000c54 	.word	0x20000c54
 800541c:	20000c68 	.word	0x20000c68
 8005420:	20000c7c 	.word	0x20000c7c
 8005424:	20000c80 	.word	0x20000c80
 8005428:	20000d30 	.word	0x20000d30
 800542c:	20000c90 	.word	0x20000c90
 8005430:	08005d2c 	.word	0x08005d2c

08005434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3b04      	subs	r3, #4
 8005444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800544c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3b04      	subs	r3, #4
 8005452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f023 0201 	bic.w	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3b04      	subs	r3, #4
 8005462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005464:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <pxPortInitialiseStack+0x64>)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3b14      	subs	r3, #20
 800546e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3b04      	subs	r3, #4
 800547a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f06f 0202 	mvn.w	r2, #2
 8005482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3b20      	subs	r3, #32
 8005488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	0800549d 	.word	0x0800549d

0800549c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <prvTaskExitError+0x58>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d00b      	beq.n	80054c8 <prvTaskExitError+0x2c>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	b672      	cpsid	i
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	b662      	cpsie	i
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	e7fe      	b.n	80054c6 <prvTaskExitError+0x2a>
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	b672      	cpsid	i
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	b662      	cpsie	i
 80054dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054de:	bf00      	nop
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0fc      	beq.n	80054e0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000000c 	.word	0x2000000c
	...

08005500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <pxCurrentTCBConst2>)
 8005502:	6819      	ldr	r1, [r3, #0]
 8005504:	6808      	ldr	r0, [r1, #0]
 8005506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550a:	f380 8809 	msr	PSP, r0
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f04f 0000 	mov.w	r0, #0
 8005516:	f380 8811 	msr	BASEPRI, r0
 800551a:	4770      	bx	lr
 800551c:	f3af 8000 	nop.w

08005520 <pxCurrentTCBConst2>:
 8005520:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop

08005528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005528:	4808      	ldr	r0, [pc, #32]	; (800554c <prvPortStartFirstTask+0x24>)
 800552a:	6800      	ldr	r0, [r0, #0]
 800552c:	6800      	ldr	r0, [r0, #0]
 800552e:	f380 8808 	msr	MSP, r0
 8005532:	f04f 0000 	mov.w	r0, #0
 8005536:	f380 8814 	msr	CONTROL, r0
 800553a:	b662      	cpsie	i
 800553c:	b661      	cpsie	f
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	df00      	svc	0
 8005548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800554a:	bf00      	nop
 800554c:	e000ed08 	.word	0xe000ed08

08005550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005556:	4b36      	ldr	r3, [pc, #216]	; (8005630 <xPortStartScheduler+0xe0>)
 8005558:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	22ff      	movs	r2, #255	; 0xff
 8005566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005578:	b2da      	uxtb	r2, r3
 800557a:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <xPortStartScheduler+0xe4>)
 800557c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800557e:	4b2e      	ldr	r3, [pc, #184]	; (8005638 <xPortStartScheduler+0xe8>)
 8005580:	2207      	movs	r2, #7
 8005582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005584:	e009      	b.n	800559a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005586:	4b2c      	ldr	r3, [pc, #176]	; (8005638 <xPortStartScheduler+0xe8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3b01      	subs	r3, #1
 800558c:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <xPortStartScheduler+0xe8>)
 800558e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d0ef      	beq.n	8005586 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055a6:	4b24      	ldr	r3, [pc, #144]	; (8005638 <xPortStartScheduler+0xe8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1c3 0307 	rsb	r3, r3, #7
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d00b      	beq.n	80055ca <xPortStartScheduler+0x7a>
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	b672      	cpsid	i
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	b662      	cpsie	i
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	e7fe      	b.n	80055c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055ca:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <xPortStartScheduler+0xe8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	4a19      	ldr	r2, [pc, #100]	; (8005638 <xPortStartScheduler+0xe8>)
 80055d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055d4:	4b18      	ldr	r3, [pc, #96]	; (8005638 <xPortStartScheduler+0xe8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055dc:	4a16      	ldr	r2, [pc, #88]	; (8005638 <xPortStartScheduler+0xe8>)
 80055de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055e8:	4b14      	ldr	r3, [pc, #80]	; (800563c <xPortStartScheduler+0xec>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a13      	ldr	r2, [pc, #76]	; (800563c <xPortStartScheduler+0xec>)
 80055ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <xPortStartScheduler+0xec>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a10      	ldr	r2, [pc, #64]	; (800563c <xPortStartScheduler+0xec>)
 80055fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005600:	f000 f8d4 	bl	80057ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005604:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <xPortStartScheduler+0xf0>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800560a:	f000 f8f3 	bl	80057f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800560e:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <xPortStartScheduler+0xf4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a0c      	ldr	r2, [pc, #48]	; (8005644 <xPortStartScheduler+0xf4>)
 8005614:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005618:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800561a:	f7ff ff85 	bl	8005528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800561e:	f7ff f863 	bl	80046e8 <vTaskSwitchContext>
	prvTaskExitError();
 8005622:	f7ff ff3b 	bl	800549c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	e000e400 	.word	0xe000e400
 8005634:	20000d80 	.word	0x20000d80
 8005638:	20000d84 	.word	0x20000d84
 800563c:	e000ed20 	.word	0xe000ed20
 8005640:	2000000c 	.word	0x2000000c
 8005644:	e000ef34 	.word	0xe000ef34

08005648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	b672      	cpsid	i
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	b662      	cpsie	i
 8005662:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <vPortEnterCritical+0x5c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	4a0e      	ldr	r2, [pc, #56]	; (80056a4 <vPortEnterCritical+0x5c>)
 800566c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <vPortEnterCritical+0x5c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d110      	bne.n	8005698 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <vPortEnterCritical+0x60>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <vPortEnterCritical+0x50>
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	b672      	cpsid	i
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	b662      	cpsie	i
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	e7fe      	b.n	8005696 <vPortEnterCritical+0x4e>
	}
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	2000000c 	.word	0x2000000c
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <vPortExitCritical+0x50>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <vPortExitCritical+0x26>
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	b672      	cpsid	i
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	b662      	cpsie	i
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	e7fe      	b.n	80056d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <vPortExitCritical+0x50>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	4a08      	ldr	r2, [pc, #32]	; (80056fc <vPortExitCritical+0x50>)
 80056da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056dc:	4b07      	ldr	r3, [pc, #28]	; (80056fc <vPortExitCritical+0x50>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <vPortExitCritical+0x42>
 80056e4:	2300      	movs	r3, #0
 80056e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	2000000c 	.word	0x2000000c

08005700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005700:	f3ef 8009 	mrs	r0, PSP
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	4b15      	ldr	r3, [pc, #84]	; (8005760 <pxCurrentTCBConst>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f01e 0f10 	tst.w	lr, #16
 8005710:	bf08      	it	eq
 8005712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571a:	6010      	str	r0, [r2, #0]
 800571c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005724:	b672      	cpsid	i
 8005726:	f380 8811 	msr	BASEPRI, r0
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	b662      	cpsie	i
 8005734:	f7fe ffd8 	bl	80046e8 <vTaskSwitchContext>
 8005738:	f04f 0000 	mov.w	r0, #0
 800573c:	f380 8811 	msr	BASEPRI, r0
 8005740:	bc09      	pop	{r0, r3}
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	6808      	ldr	r0, [r1, #0]
 8005746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574a:	f01e 0f10 	tst.w	lr, #16
 800574e:	bf08      	it	eq
 8005750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005754:	f380 8809 	msr	PSP, r0
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop

08005760 <pxCurrentTCBConst>:
 8005760:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop

08005768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	b672      	cpsid	i
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	b662      	cpsie	i
 8005782:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005784:	f7fe fef6 	bl	8004574 <xTaskIncrementTick>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <SysTick_Handler+0x40>)
 8005790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	2300      	movs	r3, #0
 8005798:	603b      	str	r3, [r7, #0]
	__asm volatile
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80057a0:	bf00      	nop
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <vPortSetupTimerInterrupt+0x34>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <vPortSetupTimerInterrupt+0x38>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <vPortSetupTimerInterrupt+0x3c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <vPortSetupTimerInterrupt+0x40>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	4a09      	ldr	r2, [pc, #36]	; (80057f0 <vPortSetupTimerInterrupt+0x44>)
 80057ca:	3b01      	subs	r3, #1
 80057cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ce:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <vPortSetupTimerInterrupt+0x34>)
 80057d0:	2207      	movs	r2, #7
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000e010 	.word	0xe000e010
 80057e4:	e000e018 	.word	0xe000e018
 80057e8:	20000000 	.word	0x20000000
 80057ec:	10624dd3 	.word	0x10624dd3
 80057f0:	e000e014 	.word	0xe000e014

080057f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005804 <vPortEnableVFP+0x10>
 80057f8:	6801      	ldr	r1, [r0, #0]
 80057fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057fe:	6001      	str	r1, [r0, #0]
 8005800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005802:	bf00      	nop
 8005804:	e000ed88 	.word	0xe000ed88

08005808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800580e:	f3ef 8305 	mrs	r3, IPSR
 8005812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b0f      	cmp	r3, #15
 8005818:	d915      	bls.n	8005846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800581a:	4a18      	ldr	r2, [pc, #96]	; (800587c <vPortValidateInterruptPriority+0x74>)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <vPortValidateInterruptPriority+0x78>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	7afa      	ldrb	r2, [r7, #11]
 800582a:	429a      	cmp	r2, r3
 800582c:	d20b      	bcs.n	8005846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	b672      	cpsid	i
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	b662      	cpsie	i
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	e7fe      	b.n	8005844 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <vPortValidateInterruptPriority+0x7c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <vPortValidateInterruptPriority+0x80>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d90b      	bls.n	800586e <vPortValidateInterruptPriority+0x66>
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	b672      	cpsid	i
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	b662      	cpsie	i
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	e7fe      	b.n	800586c <vPortValidateInterruptPriority+0x64>
	}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	e000e3f0 	.word	0xe000e3f0
 8005880:	20000d80 	.word	0x20000d80
 8005884:	e000ed0c 	.word	0xe000ed0c
 8005888:	20000d84 	.word	0x20000d84

0800588c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	; 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005898:	f7fe fdb0 	bl	80043fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800589c:	4b5a      	ldr	r3, [pc, #360]	; (8005a08 <pvPortMalloc+0x17c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058a4:	f000 f916 	bl	8005ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058a8:	4b58      	ldr	r3, [pc, #352]	; (8005a0c <pvPortMalloc+0x180>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 8090 	bne.w	80059d6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01e      	beq.n	80058fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80058bc:	2208      	movs	r2, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d015      	beq.n	80058fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f023 0307 	bic.w	r3, r3, #7
 80058d4:	3308      	adds	r3, #8
 80058d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <pvPortMalloc+0x6e>
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	b672      	cpsid	i
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	b662      	cpsie	i
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e7fe      	b.n	80058f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d06a      	beq.n	80059d6 <pvPortMalloc+0x14a>
 8005900:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <pvPortMalloc+0x184>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d865      	bhi.n	80059d6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800590a:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <pvPortMalloc+0x188>)
 800590c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800590e:	4b41      	ldr	r3, [pc, #260]	; (8005a14 <pvPortMalloc+0x188>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005914:	e004      	b.n	8005920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <pvPortMalloc+0xa6>
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f1      	bne.n	8005916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005932:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <pvPortMalloc+0x17c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005938:	429a      	cmp	r2, r3
 800593a:	d04c      	beq.n	80059d6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2208      	movs	r2, #8
 8005942:	4413      	add	r3, r2
 8005944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	1ad2      	subs	r2, r2, r3
 8005956:	2308      	movs	r3, #8
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	429a      	cmp	r2, r3
 800595c:	d920      	bls.n	80059a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800595e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <pvPortMalloc+0xfc>
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	b672      	cpsid	i
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	b662      	cpsie	i
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	e7fe      	b.n	8005986 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1ad2      	subs	r2, r2, r3
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800599a:	69b8      	ldr	r0, [r7, #24]
 800599c:	f000 f8fc 	bl	8005b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059a0:	4b1b      	ldr	r3, [pc, #108]	; (8005a10 <pvPortMalloc+0x184>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <pvPortMalloc+0x184>)
 80059ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059ae:	4b18      	ldr	r3, [pc, #96]	; (8005a10 <pvPortMalloc+0x184>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <pvPortMalloc+0x18c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d203      	bcs.n	80059c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059ba:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <pvPortMalloc+0x184>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <pvPortMalloc+0x18c>)
 80059c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <pvPortMalloc+0x180>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059d6:	f7fe fd1f 	bl	8004418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <pvPortMalloc+0x170>
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	b672      	cpsid	i
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	b662      	cpsie	i
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e7fe      	b.n	80059fa <pvPortMalloc+0x16e>
	return pvReturn;
 80059fc:	69fb      	ldr	r3, [r7, #28]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3728      	adds	r7, #40	; 0x28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20004990 	.word	0x20004990
 8005a0c:	2000499c 	.word	0x2000499c
 8005a10:	20004994 	.word	0x20004994
 8005a14:	20004988 	.word	0x20004988
 8005a18:	20004998 	.word	0x20004998

08005a1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d04a      	beq.n	8005ac4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a2e:	2308      	movs	r3, #8
 8005a30:	425b      	negs	r3, r3
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4413      	add	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	4b22      	ldr	r3, [pc, #136]	; (8005acc <vPortFree+0xb0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <vPortFree+0x46>
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	b672      	cpsid	i
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	b662      	cpsie	i
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	e7fe      	b.n	8005a60 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <vPortFree+0x66>
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	b672      	cpsid	i
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	b662      	cpsie	i
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	e7fe      	b.n	8005a80 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <vPortFree+0xb0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d019      	beq.n	8005ac4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d115      	bne.n	8005ac4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <vPortFree+0xb0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005aa8:	f7fe fca8 	bl	80043fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <vPortFree+0xb4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	4a06      	ldr	r2, [pc, #24]	; (8005ad0 <vPortFree+0xb4>)
 8005ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005aba:	6938      	ldr	r0, [r7, #16]
 8005abc:	f000 f86c 	bl	8005b98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ac0:	f7fe fcaa 	bl	8004418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ac4:	bf00      	nop
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	2000499c 	.word	0x2000499c
 8005ad0:	20004994 	.word	0x20004994

08005ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ada:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ae0:	4b27      	ldr	r3, [pc, #156]	; (8005b80 <prvHeapInit+0xac>)
 8005ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3307      	adds	r3, #7
 8005af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <prvHeapInit+0xac>)
 8005b04:	4413      	add	r3, r2
 8005b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <prvHeapInit+0xb0>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b12:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <prvHeapInit+0xb0>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b20:	2208      	movs	r2, #8
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <prvHeapInit+0xb4>)
 8005b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b36:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <prvHeapInit+0xb4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b3e:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <prvHeapInit+0xb4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b54:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <prvHeapInit+0xb4>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <prvHeapInit+0xb8>)
 8005b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <prvHeapInit+0xbc>)
 8005b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <prvHeapInit+0xc0>)
 8005b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b72:	601a      	str	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	20000d88 	.word	0x20000d88
 8005b84:	20004988 	.word	0x20004988
 8005b88:	20004990 	.word	0x20004990
 8005b8c:	20004998 	.word	0x20004998
 8005b90:	20004994 	.word	0x20004994
 8005b94:	2000499c 	.word	0x2000499c

08005b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ba0:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <prvInsertBlockIntoFreeList+0xac>)
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e002      	b.n	8005bac <prvInsertBlockIntoFreeList+0x14>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d8f7      	bhi.n	8005ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d108      	bne.n	8005bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	441a      	add	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d118      	bne.n	8005c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <prvInsertBlockIntoFreeList+0xb0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d00d      	beq.n	8005c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e008      	b.n	8005c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <prvInsertBlockIntoFreeList+0xb0>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e003      	b.n	8005c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d002      	beq.n	8005c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20004988 	.word	0x20004988
 8005c48:	20004990 	.word	0x20004990

08005c4c <__libc_init_array>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	4e0d      	ldr	r6, [pc, #52]	; (8005c84 <__libc_init_array+0x38>)
 8005c50:	4c0d      	ldr	r4, [pc, #52]	; (8005c88 <__libc_init_array+0x3c>)
 8005c52:	1ba4      	subs	r4, r4, r6
 8005c54:	10a4      	asrs	r4, r4, #2
 8005c56:	2500      	movs	r5, #0
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	d109      	bne.n	8005c70 <__libc_init_array+0x24>
 8005c5c:	4e0b      	ldr	r6, [pc, #44]	; (8005c8c <__libc_init_array+0x40>)
 8005c5e:	4c0c      	ldr	r4, [pc, #48]	; (8005c90 <__libc_init_array+0x44>)
 8005c60:	f000 f83a 	bl	8005cd8 <_init>
 8005c64:	1ba4      	subs	r4, r4, r6
 8005c66:	10a4      	asrs	r4, r4, #2
 8005c68:	2500      	movs	r5, #0
 8005c6a:	42a5      	cmp	r5, r4
 8005c6c:	d105      	bne.n	8005c7a <__libc_init_array+0x2e>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c74:	4798      	blx	r3
 8005c76:	3501      	adds	r5, #1
 8005c78:	e7ee      	b.n	8005c58 <__libc_init_array+0xc>
 8005c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c7e:	4798      	blx	r3
 8005c80:	3501      	adds	r5, #1
 8005c82:	e7f2      	b.n	8005c6a <__libc_init_array+0x1e>
 8005c84:	08005dc4 	.word	0x08005dc4
 8005c88:	08005dc4 	.word	0x08005dc4
 8005c8c:	08005dc4 	.word	0x08005dc4
 8005c90:	08005dc8 	.word	0x08005dc8

08005c94 <memcmp>:
 8005c94:	b530      	push	{r4, r5, lr}
 8005c96:	2400      	movs	r4, #0
 8005c98:	42a2      	cmp	r2, r4
 8005c9a:	d101      	bne.n	8005ca0 <memcmp+0xc>
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e007      	b.n	8005cb0 <memcmp+0x1c>
 8005ca0:	5d03      	ldrb	r3, [r0, r4]
 8005ca2:	3401      	adds	r4, #1
 8005ca4:	190d      	adds	r5, r1, r4
 8005ca6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005caa:	42ab      	cmp	r3, r5
 8005cac:	d0f4      	beq.n	8005c98 <memcmp+0x4>
 8005cae:	1b58      	subs	r0, r3, r5
 8005cb0:	bd30      	pop	{r4, r5, pc}

08005cb2 <memcpy>:
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	1e43      	subs	r3, r0, #1
 8005cb6:	440a      	add	r2, r1
 8005cb8:	4291      	cmp	r1, r2
 8005cba:	d100      	bne.n	8005cbe <memcpy+0xc>
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cc6:	e7f7      	b.n	8005cb8 <memcpy+0x6>

08005cc8 <memset>:
 8005cc8:	4402      	add	r2, r0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <_init>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	bf00      	nop
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr

08005ce4 <_fini>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr
